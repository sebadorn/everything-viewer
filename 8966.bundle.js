"use strict";(self.webpackChunkeverything_viewer=self.webpackChunkeverything_viewer||[]).push([[8966],{48966:(o,e,t)=>{t.d(e,{KD:()=>r,X6:()=>l,rO:()=>i});var a=t(51137),n=t(4720);function l(o){const[e,t]=o.split(":");return r({op:e,extension:t})}function r(o,e=!0){const t=o.extension?u[o.extension]?.[o.op]:p[o.op];if(!t&&(a.V.Warn(`No mapping found for operation ${o.op} and extension ${o.extension||"KHR_interactivity"}`),e)){const e={},t={flows:{}};if(o.inputValueSockets){e.values={};for(const t in o.inputValueSockets)e.values[t]={name:t}}return o.outputValueSockets&&(t.values={},Object.keys(o.outputValueSockets).forEach((o=>{t.values[o]={name:o}}))),{blocks:[],inputs:e,outputs:t}}return t}function i(o,e,t){u[e]||(u[e]={}),u[e][o]=t}const u={BABYLON:{"flow/log":{blocks:["FlowGraphConsoleLogBlock"],inputs:{values:{message:{name:"message"}}}}}},p={"event/onStart":{blocks:["FlowGraphSceneReadyEventBlock"],outputs:{flows:{out:{name:"done"}}}},"event/onTick":{blocks:["FlowGraphSceneTickEventBlock"],inputs:{},outputs:{values:{timeSinceLastTick:{name:"deltaTime",gltfType:"number"}},flows:{out:{name:"done"}}}},"event/send":{blocks:["FlowGraphSendCustomEventBlock"],extraProcessor(o,e,t,a,n){if("event/send"!==e.op||!o.configuration||1!==Object.keys(o.configuration).length)throw new Error("Receive event should have a single configuration object, the event itself");const l=o.configuration.event.value[0];if("number"!=typeof l)throw new Error("Event id should be a number");const r=a.arrays.events[l],i=n[0];return i.config||(i.config={}),i.config.eventId=r.eventId,i.config.eventData=r.eventData,n}},"event/receive":{blocks:["FlowGraphReceiveCustomEventBlock"],outputs:{flows:{out:{name:"done"}}},validation(o,e){if(!o.configuration)return a.V.Error("Receive event should have a configuration object"),{valid:!1,error:"Receive event should have a configuration object"};const t=o.configuration.event;if(!t)return a.V.Error("Receive event should have a single configuration object, the event itself"),{valid:!1,error:"Receive event should have a single configuration object, the event itself"};const n=t.value[0];if("number"!=typeof n)return a.V.Error("Event id should be a number"),{valid:!1,error:"Event id should be a number"};const l=e.events?.[n];return l?{valid:!0}:(a.V.Error(`Event with id ${n} not found`),{valid:!1,error:`Event with id ${n} not found`})},extraProcessor(o,e,t,a,n){if("event/receive"!==e.op||!o.configuration||1!==Object.keys(o.configuration).length)throw new Error("Receive event should have a single configuration object, the event itself");const l=o.configuration.event.value[0];if("number"!=typeof l)throw new Error("Event id should be a number");const r=a.arrays.events[l],i=n[0];return i.config||(i.config={}),i.config.eventId=r.eventId,i.config.eventData=r.eventData,n}},"math/e":s("FlowGraphEBlock"),"math/pi":s("FlowGraphPIBlock"),"math/inf":s("FlowGraphInfBlock"),"math/nan":s("FlowGraphNaNBlock"),"math/abs":s("FlowGraphAbsBlock"),"math/sign":s("FlowGraphSignBlock"),"math/trunc":s("FlowGraphTruncBlock"),"math/floor":s("FlowGraphFloorBlock"),"math/ceil":s("FlowGraphCeilBlock"),"math/round":{blocks:["FlowGraphRoundBlock"],configuration:{},inputs:{values:{a:{name:"a"}}},outputs:{values:{value:{name:"value"}}},extraProcessor:(o,e,t,a,n)=>(n[0].config=n[0].config||{},n[0].config.roundHalfAwayFromZero=!0,n)},"math/fract":s("FlowGraphFractBlock"),"math/neg":s("FlowGraphNegationBlock"),"math/add":s("FlowGraphAddBlock",["a","b"],!0),"math/sub":s("FlowGraphSubtractBlock",["a","b"],!0),"math/mul":{blocks:["FlowGraphMultiplyBlock"],extraProcessor(o,e,t,a,n){n[0].config=n[0].config||{},n[0].config.useMatrixPerComponent=!0,n[0].config.preventIntegerFloatArithmetic=!0;let l=-1;return Object.keys(o.values||{}).find((e=>void 0!==o.values?.[e].type&&(l=o.values[e].type,!0))),-1!==l&&(n[0].config.type=a.arrays.types[l].flowGraphType),n},validation:o=>o.values?c(o):{valid:!0}},"math/div":s("FlowGraphDivideBlock",["a","b"],!0),"math/rem":s("FlowGraphModuloBlock",["a","b"]),"math/min":s("FlowGraphMinBlock",["a","b"]),"math/max":s("FlowGraphMaxBlock",["a","b"]),"math/clamp":s("FlowGraphClampBlock",["a","b","c"]),"math/saturate":s("FlowGraphSaturateBlock"),"math/mix":s("FlowGraphMathInterpolationBlock",["a","b","c"]),"math/eq":s("FlowGraphEqualityBlock",["a","b"]),"math/lt":s("FlowGraphLessThanBlock",["a","b"]),"math/le":s("FlowGraphLessThanOrEqualBlock",["a","b"]),"math/gt":s("FlowGraphGreaterThanBlock",["a","b"]),"math/ge":s("FlowGraphGreaterThanOrEqualBlock",["a","b"]),"math/isnan":s("FlowGraphIsNaNBlock"),"math/isinf":s("FlowGraphIsInfBlock"),"math/select":{blocks:["FlowGraphConditionalBlock"],inputs:{values:{condition:{name:"condition"},a:{name:"onTrue"},b:{name:"onFalse"}}},outputs:{values:{value:{name:"output"}}}},"math/random":{blocks:["FlowGraphRandomBlock"],outputs:{values:{value:{name:"value"}}}},"math/sin":s("FlowGraphSinBlock"),"math/cos":s("FlowGraphCosBlock"),"math/tan":s("FlowGraphTanBlock"),"math/asin":s("FlowGraphASinBlock"),"math/acos":s("FlowGraphACosBlock"),"math/atan":s("FlowGraphATanBlock"),"math/atan2":s("FlowGraphATan2Block",["a","b"]),"math/sinh":s("FlowGraphSinhBlock"),"math/cosh":s("FlowGraphCoshBlock"),"math/tanh":s("FlowGraphTanhBlock"),"math/asinh":s("FlowGraphASinhBlock"),"math/acosh":s("FlowGraphACoshBlock"),"math/atanh":s("FlowGraphATanhBlock"),"math/exp":s("FlowGraphExponentialBlock"),"math/log":s("FlowGraphLogBlock"),"math/log2":s("FlowGraphLog2Block"),"math/log10":s("FlowGraphLog10Block"),"math/sqrt":s("FlowGraphSquareRootBlock"),"math/cbrt":s("FlowGraphCubeRootBlock"),"math/pow":s("FlowGraphPowerBlock",["a","b"]),"math/length":s("FlowGraphLengthBlock"),"math/normalize":s("FlowGraphNormalizeBlock"),"math/dot":s("FlowGraphDotBlock",["a","b"]),"math/cross":s("FlowGraphCrossBlock",["a","b"]),"math/rotate2d":s("FlowGraphRotate2DBlock",["a","b"]),"math/rotate3d":s("FlowGraphRotate3DBlock",["a","b","c"]),"math/transform":{blocks:["FlowGraphTransformVectorBlock"],inputs:{values:{a:{name:"a"},b:{name:"b"}}},outputs:{values:{value:{name:"value"}}}},"math/combine2":{blocks:["FlowGraphCombineVector2Block"],inputs:{values:{a:{name:"input_0",gltfType:"number"},b:{name:"input_1",gltfType:"number"}}},outputs:{values:{value:{name:"value"}}}},"math/combine3":{blocks:["FlowGraphCombineVector3Block"],inputs:{values:{a:{name:"input_0",gltfType:"number"},b:{name:"input_1",gltfType:"number"},c:{name:"input_2",gltfType:"number"}}},outputs:{values:{value:{name:"value"}}}},"math/combine4":{blocks:["FlowGraphCombineVector4Block"],inputs:{values:{a:{name:"input_0",gltfType:"number"},b:{name:"input_1",gltfType:"number"},c:{name:"input_2",gltfType:"number"},d:{name:"input_3",gltfType:"number"}}},outputs:{values:{value:{name:"value"}}}},"math/extract2":{blocks:["FlowGraphExtractVector2Block"],inputs:{values:{a:{name:"input",gltfType:"number"}}},outputs:{values:{0:{name:"output_0"},1:{name:"output_1"}}}},"math/extract3":{blocks:["FlowGraphExtractVector3Block"],inputs:{values:{a:{name:"input",gltfType:"number"}}},outputs:{values:{0:{name:"output_0"},1:{name:"output_1"},2:{name:"output_2"}}}},"math/extract4":{blocks:["FlowGraphExtractVector4Block"],inputs:{values:{a:{name:"input",gltfType:"number"}}},outputs:{values:{0:{name:"output_0"},1:{name:"output_1"},2:{name:"output_2"},3:{name:"output_3"}}}},"math/transpose":s("FlowGraphTransposeBlock"),"math/determinant":s("FlowGraphDeterminantBlock"),"math/inverse":s("FlowGraphInvertMatrixBlock"),"math/matmul":s("FlowGraphMatrixMultiplicationBlock",["a","b"]),"math/matCompose":{blocks:["FlowGraphMatrixCompose"],inputs:{values:{translation:{name:"position",gltfType:"float3"},rotation:{name:"rotationQuaternion",gltfType:"float4"},scale:{name:"scaling",gltfType:"float3"}}},outputs:{values:{value:{name:"value"}}},extraProcessor(o,e,t,a,n,l){const r=n[0].dataInputs.find((o=>"rotationQuaternion"===o.name));if(!r)throw new Error("Rotation quaternion input not found");return l._connectionValues[r.uniqueId]&&(l._connectionValues[r.uniqueId].type="Quaternion"),n}},"math/matDecompose":{blocks:["FlowGraphMatrixDecompose"],inputs:{values:{a:{name:"input",gltfType:"number"}}},outputs:{values:{translation:{name:"position"},rotation:{name:"rotationQuaternion"},scale:{name:"scaling"}}}},"math/combine2x2":{blocks:["FlowGraphCombineMatrix2DBlock"],inputs:{values:{a:{name:"input_0",gltfType:"number"},b:{name:"input_1",gltfType:"number"},c:{name:"input_2",gltfType:"number"},d:{name:"input_3",gltfType:"number"}}},outputs:{values:{value:{name:"value"}}},extraProcessor:(o,e,t,a,n)=>(n[0].config=n[0].config||{},n[0].config.inputIsColumnMajor=!0,n)},"math/extract2x2":{blocks:["FlowGraphExtractMatrix2DBlock"],inputs:{values:{a:{name:"input",gltfType:"float2x2"}}},outputs:{values:{0:{name:"output_0"},1:{name:"output_1"},2:{name:"output_2"},3:{name:"output_3"}}}},"math/combine3x3":{blocks:["FlowGraphCombineMatrix3DBlock"],inputs:{values:{a:{name:"input_0",gltfType:"number"},b:{name:"input_1",gltfType:"number"},c:{name:"input_2",gltfType:"number"},d:{name:"input_3",gltfType:"number"},e:{name:"input_4",gltfType:"number"},f:{name:"input_5",gltfType:"number"},g:{name:"input_6",gltfType:"number"},h:{name:"input_7",gltfType:"number"},i:{name:"input_8",gltfType:"number"}}},outputs:{values:{value:{name:"value"}}},extraProcessor:(o,e,t,a,n)=>(n[0].config=n[0].config||{},n[0].config.inputIsColumnMajor=!0,n)},"math/extract3x3":{blocks:["FlowGraphExtractMatrix3DBlock"],inputs:{values:{a:{name:"input",gltfType:"float3x3"}}},outputs:{values:{0:{name:"output_0"},1:{name:"output_1"},2:{name:"output_2"},3:{name:"output_3"},4:{name:"output_4"},5:{name:"output_5"},6:{name:"output_6"},7:{name:"output_7"},8:{name:"output_8"}}}},"math/combine4x4":{blocks:["FlowGraphCombineMatrixBlock"],inputs:{values:{a:{name:"input_0",gltfType:"number"},b:{name:"input_1",gltfType:"number"},c:{name:"input_2",gltfType:"number"},d:{name:"input_3",gltfType:"number"},e:{name:"input_4",gltfType:"number"},f:{name:"input_5",gltfType:"number"},g:{name:"input_6",gltfType:"number"},h:{name:"input_7",gltfType:"number"},i:{name:"input_8",gltfType:"number"},j:{name:"input_9",gltfType:"number"},k:{name:"input_10",gltfType:"number"},l:{name:"input_11",gltfType:"number"},m:{name:"input_12",gltfType:"number"},n:{name:"input_13",gltfType:"number"},o:{name:"input_14",gltfType:"number"},p:{name:"input_15",gltfType:"number"}}},outputs:{values:{value:{name:"value"}}},extraProcessor:(o,e,t,a,n)=>(n[0].config=n[0].config||{},n[0].config.inputIsColumnMajor=!0,n)},"math/extract4x4":{blocks:["FlowGraphExtractMatrixBlock"],configuration:{},inputs:{values:{a:{name:"input",gltfType:"number"}}},outputs:{values:{0:{name:"output_0"},1:{name:"output_1"},2:{name:"output_2"},3:{name:"output_3"},4:{name:"output_4"},5:{name:"output_5"},6:{name:"output_6"},7:{name:"output_7"},8:{name:"output_8"},9:{name:"output_9"},10:{name:"output_10"},11:{name:"output_11"},12:{name:"output_12"},13:{name:"output_13"},14:{name:"output_14"},15:{name:"output_15"}}}},"math/compose":{blocks:["FlowGraphMatrixCompose"],configuration:{},inputs:{values:{translation:{name:"position",gltfType:"float3"},rotation:{name:"rotationQuaternion",gltfType:"float4"},scale:{name:"scaling",gltfType:"float3"}}},outputs:{values:{value:{name:"output"}}}},"math/decompose":{blocks:["FlowGraphMatrixDecompose"],configuration:{},inputs:{values:{a:{name:"input"}}},outputs:{values:{translation:{name:"position"},rotation:{name:"rotationQuaternion"},scale:{name:"scaling"}}}},"math/not":{blocks:["FlowGraphBitwiseNotBlock"],inputs:{values:{a:{name:"a"}}},outputs:{values:{value:{name:"value"}}},extraProcessor(o,e,t,a,n,l){n[0].config=n[0].config||{};const r=n[0].dataInputs[0];return n[0].config.valueType=l._connectionValues[r.uniqueId]?.type??"FlowGraphInteger",n}},"math/and":{blocks:["FlowGraphBitwiseAndBlock"],inputs:{values:{a:{name:"a"},b:{name:"b"}}},outputs:{values:{value:{name:"value"}}},extraProcessor(o,e,t,a,n,l){n[0].config=n[0].config||{};const r=n[0].dataInputs[0],i=n[0].dataInputs[1];return n[0].config.valueType=l._connectionValues[r.uniqueId]?.type??l._connectionValues[i.uniqueId]?.type??"FlowGraphInteger",n}},"math/or":{blocks:["FlowGraphBitwiseOrBlock"],inputs:{values:{a:{name:"a"},b:{name:"b"}}},outputs:{values:{value:{name:"value"}}},extraProcessor(o,e,t,a,n,l){n[0].config=n[0].config||{};const r=n[0].dataInputs[0],i=n[0].dataInputs[1];return n[0].config.valueType=l._connectionValues[r.uniqueId]?.type??l._connectionValues[i.uniqueId]?.type??"FlowGraphInteger",n}},"math/xor":{blocks:["FlowGraphBitwiseXorBlock"],inputs:{values:{a:{name:"a"},b:{name:"b"}}},outputs:{values:{value:{name:"value"}}},extraProcessor(o,e,t,a,n,l){n[0].config=n[0].config||{};const r=n[0].dataInputs[0],i=n[0].dataInputs[1];return n[0].config.valueType=l._connectionValues[r.uniqueId]?.type??l._connectionValues[i.uniqueId]?.type??"FlowGraphInteger",n}},"math/asr":s("FlowGraphBitwiseRightShiftBlock",["a","b"]),"math/lsl":s("FlowGraphBitwiseLeftShiftBlock",["a","b"]),"math/clz":s("FlowGraphLeadingZerosBlock"),"math/ctz":s("FlowGraphTrailingZerosBlock"),"math/popcnt":s("FlowGraphOneBitsCounterBlock"),"math/rad":s("FlowGraphDegToRadBlock"),"math/deg":s("FlowGraphRadToDegBlock"),"type/boolToInt":s("FlowGraphBooleanToInt"),"type/boolToFloat":s("FlowGraphBooleanToFloat"),"type/intToBool":s("FlowGraphIntToBoolean"),"type/intToFloat":s("FlowGraphIntToFloat"),"type/floatToInt":s("FlowGraphFloatToInt"),"type/floatToBool":s("FlowGraphFloatToBoolean"),"flow/sequence":{blocks:["FlowGraphSequenceBlock"],extraProcessor(o,e,t,a,n){const l=n[0];return l.config||(l.config={}),l.config.outputSignalCount=Object.keys(o.flows||[]).length,l.signalOutputs.forEach(((o,e)=>{o.name="out_"+e})),n}},"flow/branch":{blocks:["FlowGraphBranchBlock"],outputs:{flows:{true:{name:"onTrue"},false:{name:"onFalse"}}}},"flow/switch":{blocks:["FlowGraphSwitchBlock"],configuration:{cases:{name:"cases",inOptions:!0,defaultValue:[]}},inputs:{values:{selection:{name:"case"}}},validation(o){if(o.configuration&&o.configuration.cases){const e=o.configuration.cases.value;if(!e.every((o=>"number"==typeof o&&/^\d+$/.test(o.toString()))))return o.configuration.cases.value=[],{valid:!0};const t=new Set(e);o.configuration.cases.value=Array.from(t)}return{valid:!0}},extraProcessor(o,e,t,a,n){if("flow/switch"!==e.op||!o.flows||0===Object.keys(o.flows).length)throw new Error("Switch should have a single configuration object, the cases array");return n[0].signalOutputs.forEach((o=>{"default"!==o.name&&(o.name="out_"+o.name)})),n}},"flow/while":{blocks:["FlowGraphWhileLoopBlock"],outputs:{flows:{loopBody:{name:"executionFlow"}}}},"flow/for":{blocks:["FlowGraphForLoopBlock"],configuration:{initialIndex:{name:"initialIndex",gltfType:"number",inOptions:!0,defaultValue:0}},inputs:{values:{startIndex:{name:"startIndex",gltfType:"number"},endIndex:{name:"endIndex",gltfType:"number"}}},outputs:{values:{index:{name:"index"}},flows:{loopBody:{name:"executionFlow"}}}},"flow/doN":{blocks:["FlowGraphDoNBlock"],configuration:{},inputs:{values:{n:{name:"maxExecutions",gltfType:"number"}}},outputs:{values:{currentCount:{name:"executionCount"}}}},"flow/multiGate":{blocks:["FlowGraphMultiGateBlock"],configuration:{isRandom:{name:"isRandom",gltfType:"boolean",inOptions:!0,defaultValue:!1},isLoop:{name:"isLoop",gltfType:"boolean",inOptions:!0,defaultValue:!1}},extraProcessor(o,e,t,a,n){if("flow/multiGate"!==e.op||!o.flows||0===Object.keys(o.flows).length)throw new Error("MultiGate should have a single configuration object, the number of output flows");const l=n[0];return l.config||(l.config={}),l.config.outputSignalCount=Object.keys(o.flows).length,l.signalOutputs.forEach(((o,e)=>{o.name="out_"+e})),n}},"flow/waitAll":{blocks:["FlowGraphWaitAllBlock"],configuration:{inputFlows:{name:"inputSignalCount",gltfType:"number",inOptions:!0,defaultValue:0}},inputs:{flows:{"[segment]":{name:"in_$1"}}},validation:o=>("number"!=typeof o.configuration?.inputFlows?.value[0]&&(o.configuration=o.configuration||{inputFlows:{value:[0]}},o.configuration.inputFlows.value=[0]),{valid:!0})},"flow/throttle":{blocks:["FlowGraphThrottleBlock"],outputs:{flows:{err:{name:"error"}}}},"flow/setDelay":{blocks:["FlowGraphSetDelayBlock"],outputs:{flows:{err:{name:"error"}}}},"flow/cancelDelay":{blocks:["FlowGraphCancelDelayBlock"]},"variable/get":{blocks:["FlowGraphGetVariableBlock"],validation:o=>o.configuration?.variable?.value?{valid:!0}:(a.V.Error("Variable get block should have a variable configuration"),{valid:!1,error:"Variable get block should have a variable configuration"}),configuration:{variable:{name:"variable",gltfType:"number",flowGraphType:"string",inOptions:!0,isVariable:!0,dataTransformer:(o,e)=>[e.getVariableName(o[0])]}}},"variable/set":{blocks:["FlowGraphSetVariableBlock"],configuration:{variable:{name:"variable",gltfType:"number",flowGraphType:"string",inOptions:!0,isVariable:!0,dataTransformer:(o,e)=>[e.getVariableName(o[0])]}}},"variable/setMultiple":{blocks:["FlowGraphSetVariableBlock"],configuration:{variables:{name:"variables",gltfType:"number",flowGraphType:"string",inOptions:!0,dataTransformer:(o,e)=>[o[0].map((o=>e.getVariableName(o)))]}},extraProcessor:(o,e,t,a,n)=>(n[0].dataInputs.forEach((o=>{o.name=a.getVariableName(+o.name)})),n)},"variable/interpolate":{blocks:["FlowGraphInterpolationBlock","FlowGraphContextBlock","FlowGraphPlayAnimationBlock","FlowGraphBezierCurveEasing","FlowGraphGetVariableBlock"],configuration:{variable:{name:"propertyName",inOptions:!0,isVariable:!0,dataTransformer:(o,e)=>[e.getVariableName(o[0])]},useSlerp:{name:"animationType",inOptions:!0,defaultValue:!1,dataTransformer:o=>!0===o[0]?["Quaternion"]:[void 0]}},inputs:{values:{value:{name:"value_1"},duration:{name:"duration_1",gltfType:"number"},p1:{name:"controlPoint1",toBlock:"FlowGraphBezierCurveEasing"},p2:{name:"controlPoint2",toBlock:"FlowGraphBezierCurveEasing"}},flows:{in:{name:"in",toBlock:"FlowGraphPlayAnimationBlock"}}},outputs:{flows:{err:{name:"error",toBlock:"FlowGraphPlayAnimationBlock"},out:{name:"out",toBlock:"FlowGraphPlayAnimationBlock"},done:{name:"done",toBlock:"FlowGraphPlayAnimationBlock"}}},interBlockConnectors:[{input:"object",output:"userVariables",inputBlockIndex:2,outputBlockIndex:1,isVariable:!0},{input:"animation",output:"animation",inputBlockIndex:2,outputBlockIndex:0,isVariable:!0},{input:"easingFunction",output:"easingFunction",inputBlockIndex:0,outputBlockIndex:3,isVariable:!0},{input:"value_0",output:"value",inputBlockIndex:0,outputBlockIndex:4,isVariable:!0}],extraProcessor(o,e,t,l,r){var i,u;const p=r[0],s=o.configuration?.variable.value[0];if("number"!=typeof s)throw a.V.Error("Variable index is not defined for variable interpolation block"),new Error("Variable index is not defined for variable interpolation block");const c=l.arrays.staticVariables[s];void 0===p.config.animationType.value&&(l.arrays.staticVariables,p.config.animationType.value=(0,n.U_)(c.type));const m=r[4];return m.config||(m.config={}),(i=m.config).variable||(i.variable={}),m.config.variable.value=l.getVariableName(s),(u=r[3]).config||(u.config={}),r}},"pointer/get":{blocks:["FlowGraphGetPropertyBlock","FlowGraphJsonPointerParserBlock"],configuration:{pointer:{name:"jsonPointer",toBlock:"FlowGraphJsonPointerParserBlock"}},inputs:{values:{"[segment]":{name:"$1",toBlock:"FlowGraphJsonPointerParserBlock"}}},interBlockConnectors:[{input:"object",output:"object",inputBlockIndex:0,outputBlockIndex:1,isVariable:!0},{input:"propertyName",output:"propertyName",inputBlockIndex:0,outputBlockIndex:1,isVariable:!0},{input:"customGetFunction",output:"getFunction",inputBlockIndex:0,outputBlockIndex:1,isVariable:!0}],extraProcessor:(o,e,t,a,n)=>(n.forEach((o=>{"FlowGraphJsonPointerParserBlock"===o.className&&(o.config||(o.config={}),o.config.outputValue=!0)})),n)},"pointer/set":{blocks:["FlowGraphSetPropertyBlock","FlowGraphJsonPointerParserBlock"],configuration:{pointer:{name:"jsonPointer",toBlock:"FlowGraphJsonPointerParserBlock"}},inputs:{values:{value:{name:"value"},"[segment]":{name:"$1",toBlock:"FlowGraphJsonPointerParserBlock"}}},outputs:{flows:{err:{name:"error"}}},interBlockConnectors:[{input:"object",output:"object",inputBlockIndex:0,outputBlockIndex:1,isVariable:!0},{input:"propertyName",output:"propertyName",inputBlockIndex:0,outputBlockIndex:1,isVariable:!0},{input:"customSetFunction",output:"setFunction",inputBlockIndex:0,outputBlockIndex:1,isVariable:!0}],extraProcessor:(o,e,t,a,n)=>(n.forEach((o=>{"FlowGraphJsonPointerParserBlock"===o.className&&(o.config||(o.config={}),o.config.outputValue=!0)})),n)},"pointer/interpolate":{blocks:["FlowGraphInterpolationBlock","FlowGraphJsonPointerParserBlock","FlowGraphPlayAnimationBlock","FlowGraphBezierCurveEasing"],configuration:{pointer:{name:"jsonPointer",toBlock:"FlowGraphJsonPointerParserBlock"}},inputs:{values:{value:{name:"value_1"},"[segment]":{name:"$1",toBlock:"FlowGraphJsonPointerParserBlock"},duration:{name:"duration_1",gltfType:"number"},p1:{name:"controlPoint1",toBlock:"FlowGraphBezierCurveEasing"},p2:{name:"controlPoint2",toBlock:"FlowGraphBezierCurveEasing"}},flows:{in:{name:"in",toBlock:"FlowGraphPlayAnimationBlock"}}},outputs:{flows:{err:{name:"error",toBlock:"FlowGraphPlayAnimationBlock"},out:{name:"out",toBlock:"FlowGraphPlayAnimationBlock"},done:{name:"done",toBlock:"FlowGraphPlayAnimationBlock"}}},interBlockConnectors:[{input:"object",output:"object",inputBlockIndex:2,outputBlockIndex:1,isVariable:!0},{input:"propertyName",output:"propertyName",inputBlockIndex:0,outputBlockIndex:1,isVariable:!0},{input:"customBuildAnimation",output:"generateAnimationsFunction",inputBlockIndex:0,outputBlockIndex:1,isVariable:!0},{input:"animation",output:"animation",inputBlockIndex:2,outputBlockIndex:0,isVariable:!0},{input:"easingFunction",output:"easingFunction",inputBlockIndex:0,outputBlockIndex:3,isVariable:!0},{input:"value_0",output:"value",inputBlockIndex:0,outputBlockIndex:1,isVariable:!0}],extraProcessor:(o,e,t,a,n)=>(n.forEach((e=>{"FlowGraphJsonPointerParserBlock"===e.className?(e.config||(e.config={}),e.config.outputValue=!0):"FlowGraphInterpolationBlock"===e.className&&(e.config||(e.config={}),Object.keys(o.values||[]).forEach((t=>{const n=o.values?.[t];if("value"===t&&n){const o=n.type;void 0!==o&&(e.config.animationType=a.arrays.types[o].flowGraphType)}})))})),n)},"animation/start":{blocks:["FlowGraphPlayAnimationBlock","FlowGraphArrayIndexBlock","KHR_interactivity/FlowGraphGLTFDataProvider"],inputs:{values:{animation:{name:"index",gltfType:"number",toBlock:"FlowGraphArrayIndexBlock"},speed:{name:"speed",gltfType:"number"},startTime:{name:"from",gltfType:"number",dataTransformer:(o,e)=>[o[0]*e._loader.parent.targetFps]},endTime:{name:"to",gltfType:"number",dataTransformer:(o,e)=>[o[0]*e._loader.parent.targetFps]}}},outputs:{flows:{err:{name:"error"}}},interBlockConnectors:[{input:"animationGroup",output:"value",inputBlockIndex:0,outputBlockIndex:1,isVariable:!0},{input:"array",output:"animationGroups",inputBlockIndex:1,outputBlockIndex:2,isVariable:!0}],extraProcessor(o,e,t,a,n,l,r){const i=n[n.length-1];return i.config||(i.config={}),i.config.glTF=r,n}},"animation/stop":{blocks:["FlowGraphStopAnimationBlock","FlowGraphArrayIndexBlock","KHR_interactivity/FlowGraphGLTFDataProvider"],inputs:{values:{animation:{name:"index",gltfType:"number",toBlock:"FlowGraphArrayIndexBlock"}}},outputs:{flows:{err:{name:"error"}}},interBlockConnectors:[{input:"animationGroup",output:"value",inputBlockIndex:0,outputBlockIndex:1,isVariable:!0},{input:"array",output:"animationGroups",inputBlockIndex:1,outputBlockIndex:2,isVariable:!0}],extraProcessor(o,e,t,a,n,l,r){const i=n[n.length-1];return i.config||(i.config={}),i.config.glTF=r,n}},"animation/stopAt":{blocks:["FlowGraphStopAnimationBlock","FlowGraphArrayIndexBlock","KHR_interactivity/FlowGraphGLTFDataProvider"],configuration:{},inputs:{values:{animation:{name:"index",gltfType:"number",toBlock:"FlowGraphArrayIndexBlock"},stopTime:{name:"stopAtFrame",gltfType:"number",dataTransformer:(o,e)=>[o[0]*e._loader.parent.targetFps]}}},outputs:{flows:{err:{name:"error"}}},interBlockConnectors:[{input:"animationGroup",output:"value",inputBlockIndex:0,outputBlockIndex:1,isVariable:!0},{input:"array",output:"animationGroups",inputBlockIndex:1,outputBlockIndex:2,isVariable:!0}],extraProcessor(o,e,t,a,n,l,r){const i=n[n.length-1];return i.config||(i.config={}),i.config.glTF=r,n}},"math/switch":{blocks:["FlowGraphDataSwitchBlock"],configuration:{cases:{name:"cases",inOptions:!0,defaultValue:[]}},inputs:{values:{selection:{name:"case"}}},validation(o){if(o.configuration&&o.configuration.cases){const e=o.configuration.cases.value;if(!e.every((o=>"number"==typeof o&&/^\d+$/.test(o.toString()))))return o.configuration.cases.value=[],{valid:!0};const t=new Set(e);o.configuration.cases.value=Array.from(t)}return{valid:!0}},extraProcessor:(o,e,t,a,n)=>(n[0].dataInputs.forEach((o=>{"default"!==o.name&&"case"!==o.name&&(o.name="in_"+o.name)})),n)},"debug/log":{blocks:["FlowGraphConsoleLogBlock"],configuration:{message:{name:"messageTemplate",inOptions:!0}}}};function s(o,e=["a"],t){return{blocks:[o],inputs:{values:e.reduce(((o,e)=>(o[e]={name:e},o)),{})},outputs:{values:{value:{name:"value"}}},extraProcessor(o,e,a,n,l){if(t){l[0].config=l[0].config||{},l[0].config.preventIntegerFloatArithmetic=!0;let e=-1;Object.keys(o.values||{}).find((t=>void 0!==o.values?.[t].type&&(e=o.values[t].type,!0))),-1!==e&&(l[0].config.type=n.arrays.types[e].flowGraphType)}return l},validation:o=>t?c(o):{valid:!0}}}function c(o){if(o.values){const e=Object.keys(o.values).map((e=>o.values[e].type)).filter((o=>void 0!==o));if(!e.every((o=>o===e[0])))return{valid:!1,error:"All inputs must be of the same type"}}return{valid:!0}}}}]);