"use strict";(self.webpackChunkeverything_viewer=self.webpackChunkeverything_viewer||[]).push([[8966],{4720:(e,t,o)=>{o.d(t,{Dx:()=>f,Es:()=>p,F4:()=>w,K$:()=>h,KV:()=>c,Ko:()=>g,P_:()=>B,RI:()=>m,Sp:()=>v,U_:()=>x,Vv:()=>s,Yd:()=>G,aZ:()=>T,cZ:()=>b,k4:()=>F,x2:()=>y});var a,n=o(79923),r=o(26041),l=o(90868),u=o(57565);!function(e){e.Any="any",e.String="string",e.Number="number",e.Boolean="boolean",e.Object="object",e.Integer="FlowGraphInteger",e.Vector2="Vector2",e.Vector3="Vector3",e.Vector4="Vector4",e.Quaternion="Quaternion",e.Matrix="Matrix",e.Matrix2D="Matrix2D",e.Matrix3D="Matrix3D",e.Color3="Color3",e.Color4="Color4"}(a||(a={}));class i{constructor(e,t,o=-1){this.typeName=e,this.defaultValue=t,this.animationType=o}serialize(e){e.typeName=this.typeName,e.defaultValue=this.defaultValue}}const s=new i("any",void 0),c=new i("string",""),p=new i("number",0,0),m=new i("boolean",!1),h=new i("Vector2",n.I9.Zero(),5),f=new i("Vector3",n.Pq.Zero(),1),g=new i("Vector4",n.IU.Zero()),v=new i("Matrix",n.uq.Identity(),3),b=new i("Matrix2D",new u.K),w=new i("Matrix3D",new u.z),k=new i("Color3",r.v9.Black(),4),d=new i("Color4",new r.ov(0,0,0,0),7),B=new i("Quaternion",n.PT.Identity(),2);B.typeTransformer=e=>{if(e.getClassName){if("Vector4"===e.getClassName())return n.PT.FromArray(e.asArray());if("Vector3"===e.getClassName())return n.PT.FromEulerVector(e);if("Matrix"===e.getClassName())return n.PT.FromRotationMatrix(e)}return e};const y=new i("FlowGraphInteger",new l.P(0),0);function F(e){const t=e;switch(typeof e){case"string":return c;case"number":return p;case"boolean":return m;case"object":if(t.getClassName)switch(t.getClassName()){case"Vector2":return h;case"Vector3":return f;case"Vector4":return g;case"Matrix":return v;case"Color3":return k;case"Color4":return d;case"Quaternion":return B;case"FlowGraphInteger":return y;case"Matrix2D":return b;case"Matrix3D":return w}return s;default:return s}}function G(e){switch(e){case"string":return c;case"number":return p;case"boolean":return m;case"Vector2":return h;case"Vector3":return f;case"Vector4":return g;case"Matrix":return v;case"Color3":return k;case"Color4":return d;case"Quaternion":return B;case"FlowGraphInteger":return y;case"Matrix2D":return b;case"Matrix3D":return w;default:return s}}function x(e){switch(e){case"number":default:return 0;case"Vector2":return 5;case"Vector3":return 1;case"Matrix":return 3;case"Color3":return 4;case"Color4":return 7;case"Quaternion":return 2}}function T(e){switch(e){case 0:return p;case 5:return h;case 1:return f;case 3:return v;case 4:return k;case 7:return d;case 2:return B;default:return s}}},48966:(e,t,o)=>{o.d(t,{KD:()=>l,X6:()=>r,rO:()=>u});var a=o(51137),n=o(4720);function r(e){const[t,o]=e.split(":");return l({op:t,extension:o})}function l(e,t=!0){const o=e.extension?i[e.extension]?.[e.op]:s[e.op];if(!o&&(a.V.Warn(`No mapping found for operation ${e.op} and extension ${e.extension||"KHR_interactivity"}`),t)){const t={},o={flows:{}};if(e.inputValueSockets){t.values={};for(const o in e.inputValueSockets)t.values[o]={name:o}}return e.outputValueSockets&&(o.values={},Object.keys(e.outputValueSockets).forEach(e=>{o.values[e]={name:e}})),{blocks:[],inputs:t,outputs:o}}return o}function u(e,t,o){i[t]||(i[t]={}),i[t][e]=o}const i={BABYLON:{"flow/log":{blocks:["FlowGraphConsoleLogBlock"],inputs:{values:{message:{name:"message"}}}}}},s={"event/onStart":{blocks:["FlowGraphSceneReadyEventBlock"],outputs:{flows:{out:{name:"done"}}}},"event/onTick":{blocks:["FlowGraphSceneTickEventBlock"],inputs:{},outputs:{values:{timeSinceLastTick:{name:"deltaTime",gltfType:"number"}},flows:{out:{name:"done"}}}},"event/send":{blocks:["FlowGraphSendCustomEventBlock"],extraProcessor(e,t,o,a,n){if("event/send"!==t.op||!e.configuration||1!==Object.keys(e.configuration).length)throw new Error("Receive event should have a single configuration object, the event itself");const r=e.configuration.event.value[0];if("number"!=typeof r)throw new Error("Event id should be a number");const l=a.arrays.events[r],u=n[0];return u.config||(u.config={}),u.config.eventId=l.eventId,u.config.eventData=l.eventData,n}},"event/receive":{blocks:["FlowGraphReceiveCustomEventBlock"],outputs:{flows:{out:{name:"done"}}},validation(e,t){if(!e.configuration)return a.V.Error("Receive event should have a configuration object"),{valid:!1,error:"Receive event should have a configuration object"};const o=e.configuration.event;if(!o)return a.V.Error("Receive event should have a single configuration object, the event itself"),{valid:!1,error:"Receive event should have a single configuration object, the event itself"};const n=o.value[0];if("number"!=typeof n)return a.V.Error("Event id should be a number"),{valid:!1,error:"Event id should be a number"};const r=t.events?.[n];return r?{valid:!0}:(a.V.Error(`Event with id ${n} not found`),{valid:!1,error:`Event with id ${n} not found`})},extraProcessor(e,t,o,a,n){if("event/receive"!==t.op||!e.configuration||1!==Object.keys(e.configuration).length)throw new Error("Receive event should have a single configuration object, the event itself");const r=e.configuration.event.value[0];if("number"!=typeof r)throw new Error("Event id should be a number");const l=a.arrays.events[r],u=n[0];return u.config||(u.config={}),u.config.eventId=l.eventId,u.config.eventData=l.eventData,n}},"math/E":c("FlowGraphEBlock"),"math/Pi":c("FlowGraphPIBlock"),"math/Inf":c("FlowGraphInfBlock"),"math/NaN":c("FlowGraphNaNBlock"),"math/abs":c("FlowGraphAbsBlock"),"math/sign":c("FlowGraphSignBlock"),"math/trunc":c("FlowGraphTruncBlock"),"math/floor":c("FlowGraphFloorBlock"),"math/ceil":c("FlowGraphCeilBlock"),"math/round":{blocks:["FlowGraphRoundBlock"],configuration:{},inputs:{values:{a:{name:"a"}}},outputs:{values:{value:{name:"value"}}},extraProcessor(e,t,o,a,n){var r;return(r=n[0]).config||(r.config={}),n[0].config.roundHalfAwayFromZero=!0,n}},"math/fract":c("FlowGraphFractBlock"),"math/neg":c("FlowGraphNegationBlock"),"math/add":c("FlowGraphAddBlock",["a","b"],!0),"math/sub":c("FlowGraphSubtractBlock",["a","b"],!0),"math/mul":{blocks:["FlowGraphMultiplyBlock"],extraProcessor(e,t,o,a,n){var r;(r=n[0]).config||(r.config={}),n[0].config.useMatrixPerComponent=!0,n[0].config.preventIntegerFloatArithmetic=!0;let l=-1;return Object.keys(e.values||{}).find(t=>void 0!==e.values?.[t].type&&(l=e.values[t].type,!0)),-1!==l&&(n[0].config.type=a.arrays.types[l].flowGraphType),n},validation:e=>e.values?p(e):{valid:!0}},"math/div":c("FlowGraphDivideBlock",["a","b"],!0),"math/rem":c("FlowGraphModuloBlock",["a","b"]),"math/min":c("FlowGraphMinBlock",["a","b"]),"math/max":c("FlowGraphMaxBlock",["a","b"]),"math/clamp":c("FlowGraphClampBlock",["a","b","c"]),"math/saturate":c("FlowGraphSaturateBlock"),"math/mix":c("FlowGraphMathInterpolationBlock",["a","b","c"]),"math/eq":c("FlowGraphEqualityBlock",["a","b"]),"math/lt":c("FlowGraphLessThanBlock",["a","b"]),"math/le":c("FlowGraphLessThanOrEqualBlock",["a","b"]),"math/gt":c("FlowGraphGreaterThanBlock",["a","b"]),"math/ge":c("FlowGraphGreaterThanOrEqualBlock",["a","b"]),"math/isNaN":c("FlowGraphIsNaNBlock"),"math/isInf":c("FlowGraphIsInfBlock"),"math/select":{blocks:["FlowGraphConditionalBlock"],inputs:{values:{condition:{name:"condition"},a:{name:"onTrue"},b:{name:"onFalse"}}},outputs:{values:{value:{name:"output"}}}},"math/random":{blocks:["FlowGraphRandomBlock"],outputs:{values:{value:{name:"value"}}}},"math/sin":c("FlowGraphSinBlock"),"math/cos":c("FlowGraphCosBlock"),"math/tan":c("FlowGraphTanBlock"),"math/asin":c("FlowGraphASinBlock"),"math/acos":c("FlowGraphACosBlock"),"math/atan":c("FlowGraphATanBlock"),"math/atan2":c("FlowGraphATan2Block",["a","b"]),"math/sinh":c("FlowGraphSinhBlock"),"math/cosh":c("FlowGraphCoshBlock"),"math/tanh":c("FlowGraphTanhBlock"),"math/asinh":c("FlowGraphASinhBlock"),"math/acosh":c("FlowGraphACoshBlock"),"math/atanh":c("FlowGraphATanhBlock"),"math/exp":c("FlowGraphExponentialBlock"),"math/log":c("FlowGraphLogBlock"),"math/log2":c("FlowGraphLog2Block"),"math/log10":c("FlowGraphLog10Block"),"math/sqrt":c("FlowGraphSquareRootBlock"),"math/cbrt":c("FlowGraphCubeRootBlock"),"math/pow":c("FlowGraphPowerBlock",["a","b"]),"math/length":c("FlowGraphLengthBlock"),"math/normalize":c("FlowGraphNormalizeBlock"),"math/dot":c("FlowGraphDotBlock",["a","b"]),"math/cross":c("FlowGraphCrossBlock",["a","b"]),"math/rotate2D":{blocks:["FlowGraphRotate2DBlock"],inputs:{values:{a:{name:"a"},angle:{name:"b"}}},outputs:{values:{value:{name:"value"}}}},"math/rotate3D":{blocks:["FlowGraphRotate3DBlock"],inputs:{values:{a:{name:"a"},rotation:{name:"b"}}},outputs:{values:{value:{name:"value"}}}},"math/transform":{blocks:["FlowGraphTransformVectorBlock"],inputs:{values:{a:{name:"a"},b:{name:"b"}}},outputs:{values:{value:{name:"value"}}}},"math/combine2":{blocks:["FlowGraphCombineVector2Block"],inputs:{values:{a:{name:"input_0",gltfType:"number"},b:{name:"input_1",gltfType:"number"}}},outputs:{values:{value:{name:"value"}}}},"math/combine3":{blocks:["FlowGraphCombineVector3Block"],inputs:{values:{a:{name:"input_0",gltfType:"number"},b:{name:"input_1",gltfType:"number"},c:{name:"input_2",gltfType:"number"}}},outputs:{values:{value:{name:"value"}}}},"math/combine4":{blocks:["FlowGraphCombineVector4Block"],inputs:{values:{a:{name:"input_0",gltfType:"number"},b:{name:"input_1",gltfType:"number"},c:{name:"input_2",gltfType:"number"},d:{name:"input_3",gltfType:"number"}}},outputs:{values:{value:{name:"value"}}}},"math/extract2":{blocks:["FlowGraphExtractVector2Block"],inputs:{values:{a:{name:"input",gltfType:"number"}}},outputs:{values:{0:{name:"output_0"},1:{name:"output_1"}}}},"math/extract3":{blocks:["FlowGraphExtractVector3Block"],inputs:{values:{a:{name:"input",gltfType:"number"}}},outputs:{values:{0:{name:"output_0"},1:{name:"output_1"},2:{name:"output_2"}}}},"math/extract4":{blocks:["FlowGraphExtractVector4Block"],inputs:{values:{a:{name:"input",gltfType:"number"}}},outputs:{values:{0:{name:"output_0"},1:{name:"output_1"},2:{name:"output_2"},3:{name:"output_3"}}}},"math/transpose":c("FlowGraphTransposeBlock"),"math/determinant":c("FlowGraphDeterminantBlock"),"math/inverse":c("FlowGraphInvertMatrixBlock"),"math/matMul":c("FlowGraphMatrixMultiplicationBlock",["a","b"]),"math/matCompose":{blocks:["FlowGraphMatrixCompose"],inputs:{values:{translation:{name:"position",gltfType:"float3"},rotation:{name:"rotationQuaternion",gltfType:"float4"},scale:{name:"scaling",gltfType:"float3"}}},outputs:{values:{value:{name:"value"}}},extraProcessor(e,t,o,a,n,r){const l=n[0].dataInputs.find(e=>"rotationQuaternion"===e.name);if(!l)throw new Error("Rotation quaternion input not found");return r._connectionValues[l.uniqueId]&&(r._connectionValues[l.uniqueId].type="Quaternion"),n}},"math/matDecompose":{blocks:["FlowGraphMatrixDecompose"],inputs:{values:{a:{name:"input",gltfType:"number"}}},outputs:{values:{translation:{name:"position"},rotation:{name:"rotationQuaternion"},scale:{name:"scaling"}}}},"math/quatConjugate":c("FlowGraphConjugateBlock",["a"]),"math/quatMul":{blocks:["FlowGraphMultiplyBlock"],inputs:{values:{a:{name:"a",gltfType:"vector4"},b:{name:"b",gltfType:"vector4"}}},outputs:{values:{value:{name:"value"}}},extraProcessor(e,t,o,a,n){var r;return(r=n[0]).config||(r.config={}),n[0].config.type="Quaternion",n}},"math/quatAngleBetween":c("FlowGraphAngleBetweenBlock",["a","b"]),"math/quatFromAxisAngle":{blocks:["FlowGraphQuaternionFromAxisAngleBlock"],inputs:{values:{axis:{name:"a",gltfType:"float3"},angle:{name:"b",gltfType:"number"}}},outputs:{values:{value:{name:"value"}}}},"math/quatToAxisAngle":c("FlowGraphAxisAngleFromQuaternionBlock",["a"]),"math/quatFromDirections":c("FlowGraphQuaternionFromDirectionsBlock",["a","b"]),"math/combine2x2":{blocks:["FlowGraphCombineMatrix2DBlock"],inputs:{values:{a:{name:"input_0",gltfType:"number"},b:{name:"input_1",gltfType:"number"},c:{name:"input_2",gltfType:"number"},d:{name:"input_3",gltfType:"number"}}},outputs:{values:{value:{name:"value"}}},extraProcessor(e,t,o,a,n){var r;return(r=n[0]).config||(r.config={}),n[0].config.inputIsColumnMajor=!0,n}},"math/extract2x2":{blocks:["FlowGraphExtractMatrix2DBlock"],inputs:{values:{a:{name:"input",gltfType:"float2x2"}}},outputs:{values:{0:{name:"output_0"},1:{name:"output_1"},2:{name:"output_2"},3:{name:"output_3"}}}},"math/combine3x3":{blocks:["FlowGraphCombineMatrix3DBlock"],inputs:{values:{a:{name:"input_0",gltfType:"number"},b:{name:"input_1",gltfType:"number"},c:{name:"input_2",gltfType:"number"},d:{name:"input_3",gltfType:"number"},e:{name:"input_4",gltfType:"number"},f:{name:"input_5",gltfType:"number"},g:{name:"input_6",gltfType:"number"},h:{name:"input_7",gltfType:"number"},i:{name:"input_8",gltfType:"number"}}},outputs:{values:{value:{name:"value"}}},extraProcessor(e,t,o,a,n){var r;return(r=n[0]).config||(r.config={}),n[0].config.inputIsColumnMajor=!0,n}},"math/extract3x3":{blocks:["FlowGraphExtractMatrix3DBlock"],inputs:{values:{a:{name:"input",gltfType:"float3x3"}}},outputs:{values:{0:{name:"output_0"},1:{name:"output_1"},2:{name:"output_2"},3:{name:"output_3"},4:{name:"output_4"},5:{name:"output_5"},6:{name:"output_6"},7:{name:"output_7"},8:{name:"output_8"}}}},"math/combine4x4":{blocks:["FlowGraphCombineMatrixBlock"],inputs:{values:{a:{name:"input_0",gltfType:"number"},b:{name:"input_1",gltfType:"number"},c:{name:"input_2",gltfType:"number"},d:{name:"input_3",gltfType:"number"},e:{name:"input_4",gltfType:"number"},f:{name:"input_5",gltfType:"number"},g:{name:"input_6",gltfType:"number"},h:{name:"input_7",gltfType:"number"},i:{name:"input_8",gltfType:"number"},j:{name:"input_9",gltfType:"number"},k:{name:"input_10",gltfType:"number"},l:{name:"input_11",gltfType:"number"},m:{name:"input_12",gltfType:"number"},n:{name:"input_13",gltfType:"number"},o:{name:"input_14",gltfType:"number"},p:{name:"input_15",gltfType:"number"}}},outputs:{values:{value:{name:"value"}}},extraProcessor(e,t,o,a,n){var r;return(r=n[0]).config||(r.config={}),n[0].config.inputIsColumnMajor=!0,n}},"math/extract4x4":{blocks:["FlowGraphExtractMatrixBlock"],configuration:{},inputs:{values:{a:{name:"input",gltfType:"number"}}},outputs:{values:{0:{name:"output_0"},1:{name:"output_1"},2:{name:"output_2"},3:{name:"output_3"},4:{name:"output_4"},5:{name:"output_5"},6:{name:"output_6"},7:{name:"output_7"},8:{name:"output_8"},9:{name:"output_9"},10:{name:"output_10"},11:{name:"output_11"},12:{name:"output_12"},13:{name:"output_13"},14:{name:"output_14"},15:{name:"output_15"}}}},"math/not":{blocks:["FlowGraphBitwiseNotBlock"],inputs:{values:{a:{name:"a"}}},outputs:{values:{value:{name:"value"}}},extraProcessor(e,t,o,a,n,r){var l;(l=n[0]).config||(l.config={});const u=n[0].dataInputs[0];return n[0].config.valueType=r._connectionValues[u.uniqueId]?.type??"FlowGraphInteger",n}},"math/and":{blocks:["FlowGraphBitwiseAndBlock"],inputs:{values:{a:{name:"a"},b:{name:"b"}}},outputs:{values:{value:{name:"value"}}},extraProcessor(e,t,o,a,n,r){var l;(l=n[0]).config||(l.config={});const u=n[0].dataInputs[0],i=n[0].dataInputs[1];return n[0].config.valueType=r._connectionValues[u.uniqueId]?.type??r._connectionValues[i.uniqueId]?.type??"FlowGraphInteger",n}},"math/or":{blocks:["FlowGraphBitwiseOrBlock"],inputs:{values:{a:{name:"a"},b:{name:"b"}}},outputs:{values:{value:{name:"value"}}},extraProcessor(e,t,o,a,n,r){var l;(l=n[0]).config||(l.config={});const u=n[0].dataInputs[0],i=n[0].dataInputs[1];return n[0].config.valueType=r._connectionValues[u.uniqueId]?.type??r._connectionValues[i.uniqueId]?.type??"FlowGraphInteger",n}},"math/xor":{blocks:["FlowGraphBitwiseXorBlock"],inputs:{values:{a:{name:"a"},b:{name:"b"}}},outputs:{values:{value:{name:"value"}}},extraProcessor(e,t,o,a,n,r){var l;(l=n[0]).config||(l.config={});const u=n[0].dataInputs[0],i=n[0].dataInputs[1];return n[0].config.valueType=r._connectionValues[u.uniqueId]?.type??r._connectionValues[i.uniqueId]?.type??"FlowGraphInteger",n}},"math/asr":c("FlowGraphBitwiseRightShiftBlock",["a","b"]),"math/lsl":c("FlowGraphBitwiseLeftShiftBlock",["a","b"]),"math/clz":c("FlowGraphLeadingZerosBlock"),"math/ctz":c("FlowGraphTrailingZerosBlock"),"math/popcnt":c("FlowGraphOneBitsCounterBlock"),"math/rad":c("FlowGraphDegToRadBlock"),"math/deg":c("FlowGraphRadToDegBlock"),"type/boolToInt":c("FlowGraphBooleanToInt"),"type/boolToFloat":c("FlowGraphBooleanToFloat"),"type/intToBool":c("FlowGraphIntToBoolean"),"type/intToFloat":c("FlowGraphIntToFloat"),"type/floatToInt":c("FlowGraphFloatToInt"),"type/floatToBool":c("FlowGraphFloatToBoolean"),"flow/sequence":{blocks:["FlowGraphSequenceBlock"],extraProcessor(e,t,o,a,n){const r=n[0];return r.config||(r.config={}),r.config.outputSignalCount=Object.keys(e.flows||[]).length,r.signalOutputs.forEach((e,t)=>{e.name="out_"+t}),n}},"flow/branch":{blocks:["FlowGraphBranchBlock"],outputs:{flows:{true:{name:"onTrue"},false:{name:"onFalse"}}}},"flow/switch":{blocks:["FlowGraphSwitchBlock"],configuration:{cases:{name:"cases",inOptions:!0,defaultValue:[]}},inputs:{values:{selection:{name:"case"},default:{name:"default"}}},validation(e){if(e.configuration&&e.configuration.cases){const t=e.configuration.cases.value;if(!t.every(e=>"number"==typeof e&&/^-?\d+$/.test(e.toString())))return a.V.Warn("Switch cases should be integers. Using empty array instead."),e.configuration.cases.value=[],{valid:!0};const o=new Set(t);e.configuration.cases.value=Array.from(o)}return{valid:!0}},extraProcessor(e,t,o,a,n){if("flow/switch"!==t.op||!e.flows||0===Object.keys(e.flows).length)throw new Error("Switch should have a single configuration object, the cases array");return n[0].signalOutputs.forEach(e=>{"default"!==e.name&&(e.name="out_"+e.name)}),n}},"flow/while":{blocks:["FlowGraphWhileLoopBlock"],outputs:{flows:{loopBody:{name:"executionFlow"}}}},"flow/for":{blocks:["FlowGraphForLoopBlock"],configuration:{initialIndex:{name:"initialIndex",gltfType:"number",inOptions:!0,defaultValue:0}},inputs:{values:{startIndex:{name:"startIndex",gltfType:"number"},endIndex:{name:"endIndex",gltfType:"number"}}},outputs:{values:{index:{name:"index"}},flows:{loopBody:{name:"executionFlow"}}},extraProcessor(e,t,o,a,n){const r=n[0];return r.config||(r.config={}),r.config.incrementIndexWhenLoopDone=!0,n}},"flow/doN":{blocks:["FlowGraphDoNBlock"],configuration:{},inputs:{values:{n:{name:"maxExecutions",gltfType:"number"}}},outputs:{values:{currentCount:{name:"executionCount"}}}},"flow/multiGate":{blocks:["FlowGraphMultiGateBlock"],configuration:{isRandom:{name:"isRandom",gltfType:"boolean",inOptions:!0,defaultValue:!1},isLoop:{name:"isLoop",gltfType:"boolean",inOptions:!0,defaultValue:!1}},extraProcessor(e,t,o,a,n){if("flow/multiGate"!==t.op||!e.flows||0===Object.keys(e.flows).length)throw new Error("MultiGate should have a single configuration object, the number of output flows");const r=n[0];return r.config||(r.config={}),r.config.outputSignalCount=Object.keys(e.flows).length,r.signalOutputs.forEach((e,t)=>{e.name="out_"+t}),n}},"flow/waitAll":{blocks:["FlowGraphWaitAllBlock"],configuration:{inputFlows:{name:"inputSignalCount",gltfType:"number",inOptions:!0,defaultValue:0}},inputs:{flows:{reset:{name:"reset"},"[segment]":{name:"in_$1"}}},validation:e=>("number"!=typeof e.configuration?.inputFlows?.value[0]&&(e.configuration=e.configuration||{inputFlows:{value:[0]}},e.configuration.inputFlows.value=[0]),{valid:!0})},"flow/throttle":{blocks:["FlowGraphThrottleBlock"],outputs:{flows:{err:{name:"error"}}}},"flow/setDelay":{blocks:["FlowGraphSetDelayBlock"],outputs:{flows:{err:{name:"error"}}}},"flow/cancelDelay":{blocks:["FlowGraphCancelDelayBlock"]},"variable/get":{blocks:["FlowGraphGetVariableBlock"],validation:e=>e.configuration?.variable?.value?{valid:!0}:(a.V.Error("Variable get block should have a variable configuration"),{valid:!1,error:"Variable get block should have a variable configuration"}),configuration:{variable:{name:"variable",gltfType:"number",flowGraphType:"string",inOptions:!0,isVariable:!0,dataTransformer:(e,t)=>[t.getVariableName(e[0])]}}},"variable/set":{blocks:["FlowGraphSetVariableBlock"],configuration:{variable:{name:"variable",gltfType:"number",flowGraphType:"string",inOptions:!0,isVariable:!0,dataTransformer:(e,t)=>[t.getVariableName(e[0])]}}},"variable/setMultiple":{blocks:["FlowGraphSetVariableBlock"],configuration:{variables:{name:"variables",gltfType:"number",flowGraphType:"string",inOptions:!0,dataTransformer:(e,t)=>[e[0].map(e=>t.getVariableName(e))]}},extraProcessor:(e,t,o,a,n)=>(n[0].dataInputs.forEach(e=>{e.name=a.getVariableName(+e.name)}),n)},"variable/interpolate":{blocks:["FlowGraphInterpolationBlock","FlowGraphContextBlock","FlowGraphPlayAnimationBlock","FlowGraphBezierCurveEasing","FlowGraphGetVariableBlock"],configuration:{variable:{name:"propertyName",inOptions:!0,isVariable:!0,dataTransformer:(e,t)=>[t.getVariableName(e[0])]},useSlerp:{name:"animationType",inOptions:!0,defaultValue:!1,dataTransformer:e=>!0===e[0]?["Quaternion"]:[void 0]}},inputs:{values:{value:{name:"value_1"},duration:{name:"duration_1",gltfType:"number"},p1:{name:"controlPoint1",toBlock:"FlowGraphBezierCurveEasing"},p2:{name:"controlPoint2",toBlock:"FlowGraphBezierCurveEasing"}},flows:{in:{name:"in",toBlock:"FlowGraphPlayAnimationBlock"}}},outputs:{flows:{err:{name:"error",toBlock:"FlowGraphPlayAnimationBlock"},out:{name:"out",toBlock:"FlowGraphPlayAnimationBlock"},done:{name:"done",toBlock:"FlowGraphPlayAnimationBlock"}}},interBlockConnectors:[{input:"object",output:"userVariables",inputBlockIndex:2,outputBlockIndex:1,isVariable:!0},{input:"animation",output:"animation",inputBlockIndex:2,outputBlockIndex:0,isVariable:!0},{input:"easingFunction",output:"easingFunction",inputBlockIndex:0,outputBlockIndex:3,isVariable:!0},{input:"value_0",output:"value",inputBlockIndex:0,outputBlockIndex:4,isVariable:!0}],extraProcessor(e,t,o,r,l){var u,i;const s=l[0],c=e.configuration?.variable.value[0];if("number"!=typeof c)throw a.V.Error("Variable index is not defined for variable interpolation block"),new Error("Variable index is not defined for variable interpolation block");const p=r.arrays.staticVariables[c];void 0===s.config.animationType.value&&(r.arrays.staticVariables,s.config.animationType.value=(0,n.U_)(p.type));const m=l[4];return m.config||(m.config={}),(u=m.config).variable||(u.variable={}),m.config.variable.value=r.getVariableName(c),(i=l[3]).config||(i.config={}),l}},"pointer/get":{blocks:["FlowGraphGetPropertyBlock","FlowGraphJsonPointerParserBlock"],configuration:{pointer:{name:"jsonPointer",toBlock:"FlowGraphJsonPointerParserBlock"}},inputs:{values:{"[segment]":{name:"$1",toBlock:"FlowGraphJsonPointerParserBlock"}}},interBlockConnectors:[{input:"object",output:"object",inputBlockIndex:0,outputBlockIndex:1,isVariable:!0},{input:"propertyName",output:"propertyName",inputBlockIndex:0,outputBlockIndex:1,isVariable:!0},{input:"customGetFunction",output:"getFunction",inputBlockIndex:0,outputBlockIndex:1,isVariable:!0}],extraProcessor:(e,t,o,a,n)=>(n.forEach(e=>{"FlowGraphJsonPointerParserBlock"===e.className&&(e.config||(e.config={}),e.config.outputValue=!0)}),n)},"pointer/set":{blocks:["FlowGraphSetPropertyBlock","FlowGraphJsonPointerParserBlock"],configuration:{pointer:{name:"jsonPointer",toBlock:"FlowGraphJsonPointerParserBlock"}},inputs:{values:{value:{name:"value"},"[segment]":{name:"$1",toBlock:"FlowGraphJsonPointerParserBlock"}}},outputs:{flows:{err:{name:"error"}}},interBlockConnectors:[{input:"object",output:"object",inputBlockIndex:0,outputBlockIndex:1,isVariable:!0},{input:"propertyName",output:"propertyName",inputBlockIndex:0,outputBlockIndex:1,isVariable:!0},{input:"customSetFunction",output:"setFunction",inputBlockIndex:0,outputBlockIndex:1,isVariable:!0}],extraProcessor:(e,t,o,a,n)=>(n.forEach(e=>{"FlowGraphJsonPointerParserBlock"===e.className&&(e.config||(e.config={}),e.config.outputValue=!0)}),n)},"pointer/interpolate":{blocks:["FlowGraphInterpolationBlock","FlowGraphJsonPointerParserBlock","FlowGraphPlayAnimationBlock","FlowGraphBezierCurveEasing"],configuration:{pointer:{name:"jsonPointer",toBlock:"FlowGraphJsonPointerParserBlock"}},inputs:{values:{value:{name:"value_1"},"[segment]":{name:"$1",toBlock:"FlowGraphJsonPointerParserBlock"},duration:{name:"duration_1",gltfType:"number"},p1:{name:"controlPoint1",toBlock:"FlowGraphBezierCurveEasing"},p2:{name:"controlPoint2",toBlock:"FlowGraphBezierCurveEasing"}},flows:{in:{name:"in",toBlock:"FlowGraphPlayAnimationBlock"}}},outputs:{flows:{err:{name:"error",toBlock:"FlowGraphPlayAnimationBlock"},out:{name:"out",toBlock:"FlowGraphPlayAnimationBlock"},done:{name:"done",toBlock:"FlowGraphPlayAnimationBlock"}}},interBlockConnectors:[{input:"object",output:"object",inputBlockIndex:2,outputBlockIndex:1,isVariable:!0},{input:"propertyName",output:"propertyName",inputBlockIndex:0,outputBlockIndex:1,isVariable:!0},{input:"customBuildAnimation",output:"generateAnimationsFunction",inputBlockIndex:0,outputBlockIndex:1,isVariable:!0},{input:"animation",output:"animation",inputBlockIndex:2,outputBlockIndex:0,isVariable:!0},{input:"easingFunction",output:"easingFunction",inputBlockIndex:0,outputBlockIndex:3,isVariable:!0},{input:"value_0",output:"value",inputBlockIndex:0,outputBlockIndex:1,isVariable:!0}],extraProcessor:(e,t,o,a,n)=>(n.forEach(t=>{"FlowGraphJsonPointerParserBlock"===t.className?(t.config||(t.config={}),t.config.outputValue=!0):"FlowGraphInterpolationBlock"===t.className&&(t.config||(t.config={}),Object.keys(e.values||[]).forEach(o=>{const n=e.values?.[o];if("value"===o&&n){const e=n.type;void 0!==e&&(t.config.animationType=a.arrays.types[e].flowGraphType)}}))}),n)},"animation/start":{blocks:["FlowGraphPlayAnimationBlock","FlowGraphArrayIndexBlock","KHR_interactivity/FlowGraphGLTFDataProvider"],inputs:{values:{animation:{name:"index",gltfType:"number",toBlock:"FlowGraphArrayIndexBlock"},speed:{name:"speed",gltfType:"number"},startTime:{name:"from",gltfType:"number",dataTransformer:(e,t)=>[e[0]*t._animationTargetFps]},endTime:{name:"to",gltfType:"number",dataTransformer:(e,t)=>[e[0]*t._animationTargetFps]}}},outputs:{flows:{err:{name:"error"}}},interBlockConnectors:[{input:"animationGroup",output:"value",inputBlockIndex:0,outputBlockIndex:1,isVariable:!0},{input:"array",output:"animationGroups",inputBlockIndex:1,outputBlockIndex:2,isVariable:!0}],extraProcessor(e,t,o,a,n,r,l){const u=n[n.length-1];return u.config||(u.config={}),u.config.glTF=l,n}},"animation/stop":{blocks:["FlowGraphStopAnimationBlock","FlowGraphArrayIndexBlock","KHR_interactivity/FlowGraphGLTFDataProvider"],inputs:{values:{animation:{name:"index",gltfType:"number",toBlock:"FlowGraphArrayIndexBlock"}}},outputs:{flows:{err:{name:"error"}}},interBlockConnectors:[{input:"animationGroup",output:"value",inputBlockIndex:0,outputBlockIndex:1,isVariable:!0},{input:"array",output:"animationGroups",inputBlockIndex:1,outputBlockIndex:2,isVariable:!0}],extraProcessor(e,t,o,a,n,r,l){const u=n[n.length-1];return u.config||(u.config={}),u.config.glTF=l,n}},"animation/stopAt":{blocks:["FlowGraphStopAnimationBlock","FlowGraphArrayIndexBlock","KHR_interactivity/FlowGraphGLTFDataProvider"],configuration:{},inputs:{values:{animation:{name:"index",gltfType:"number",toBlock:"FlowGraphArrayIndexBlock"},stopTime:{name:"stopAtFrame",gltfType:"number",dataTransformer:(e,t)=>[e[0]*t._animationTargetFps]}}},outputs:{flows:{err:{name:"error"}}},interBlockConnectors:[{input:"animationGroup",output:"value",inputBlockIndex:0,outputBlockIndex:1,isVariable:!0},{input:"array",output:"animationGroups",inputBlockIndex:1,outputBlockIndex:2,isVariable:!0}],extraProcessor(e,t,o,a,n,r,l){const u=n[n.length-1];return u.config||(u.config={}),u.config.glTF=l,n}},"math/switch":{blocks:["FlowGraphDataSwitchBlock"],configuration:{cases:{name:"cases",inOptions:!0,defaultValue:[]}},inputs:{values:{selection:{name:"case"}}},validation(e){if(e.configuration&&e.configuration.cases){const t=e.configuration.cases.value;if(!t.every(e=>"number"==typeof e&&/^-?\d+$/.test(e.toString())))return a.V.Warn("Switch cases should be integers. Using empty array instead."),e.configuration.cases.value=[],{valid:!0};const o=new Set(t);e.configuration.cases.value=Array.from(o)}return{valid:!0}},extraProcessor(e,t,o,a,n){const r=n[0];return r.dataInputs.forEach(e=>{"default"!==e.name&&"case"!==e.name&&(e.name="in_"+e.name)}),r.config||(r.config={}),r.config.treatCasesAsIntegers=!0,n}},"debug/log":{blocks:["FlowGraphConsoleLogBlock"],configuration:{message:{name:"messageTemplate",inOptions:!0}}}};function c(e,t=["a"],o){return{blocks:[e],inputs:{values:t.reduce((e,t)=>(e[t]={name:t},e),{})},outputs:{values:{value:{name:"value"}}},extraProcessor(e,t,a,n,r){var l;if(o){(l=r[0]).config||(l.config={}),r[0].config.preventIntegerFloatArithmetic=!0;let t=-1;Object.keys(e.values||{}).find(o=>void 0!==e.values?.[o].type&&(t=e.values[o].type,!0)),-1!==t&&(r[0].config.type=n.arrays.types[t].flowGraphType)}return r},validation:e=>o?p(e):{valid:!0}}}function p(e){if(e.values){const t=Object.keys(e.values).map(t=>e.values[t].type).filter(e=>void 0!==e);if(!t.every(e=>e===t[0]))return{valid:!1,error:"All inputs must be of the same type"}}return{valid:!0}}},57565:(e,t,o)=>{o.d(t,{K:()=>n,z:()=>r});var a=o(79923);class n{constructor(e=[1,0,0,1]){this._m=e}get m(){return this._m}transformVector(e){return this.transformVectorToRef(e,new a.I9)}transformVectorToRef(e,t){return t.x=e.x*this._m[0]+e.y*this._m[1],t.y=e.x*this._m[2]+e.y*this._m[3],t}asArray(){return this.toArray()}toArray(e=[]){for(let t=0;t<4;t++)e[t]=this._m[t];return e}fromArray(e){for(let t=0;t<4;t++)this._m[t]=e[t];return this}multiplyToRef(e,t){const o=e._m,a=this._m,n=t._m;return n[0]=o[0]*a[0]+o[1]*a[2],n[1]=o[0]*a[1]+o[1]*a[3],n[2]=o[2]*a[0]+o[3]*a[2],n[3]=o[2]*a[1]+o[3]*a[3],t}multiply(e){return this.multiplyToRef(e,new n)}divideToRef(e,t){const o=this._m,a=e._m,n=t._m;return n[0]=o[0]/a[0],n[1]=o[1]/a[1],n[2]=o[2]/a[2],n[3]=o[3]/a[3],t}divide(e){return this.divideToRef(e,new n)}addToRef(e,t){const o=this._m,a=e.m,n=t.m;return n[0]=o[0]+a[0],n[1]=o[1]+a[1],n[2]=o[2]+a[2],n[3]=o[3]+a[3],t}add(e){return this.addToRef(e,new n)}subtractToRef(e,t){const o=this._m,a=e.m,n=t.m;return n[0]=o[0]-a[0],n[1]=o[1]-a[1],n[2]=o[2]-a[2],n[3]=o[3]-a[3],t}subtract(e){return this.subtractToRef(e,new n)}transpose(){const e=this._m;return new n([e[0],e[2],e[1],e[3]])}determinant(){const e=this._m;return e[0]*e[3]-e[1]*e[2]}inverse(){const e=this.determinant();if(0===e)throw new Error("Matrix is not invertible");const t=this._m,o=1/e;return new n([t[3]*o,-t[1]*o,-t[2]*o,t[0]*o])}equals(e,t=0){const o=this._m,a=e.m;return 0===t?o[0]===a[0]&&o[1]===a[1]&&o[2]===a[2]&&o[3]===a[3]:Math.abs(o[0]-a[0])<t&&Math.abs(o[1]-a[1])<t&&Math.abs(o[2]-a[2])<t&&Math.abs(o[3]-a[3])<t}getClassName(){return"FlowGraphMatrix2D"}toString(){return`FlowGraphMatrix2D(${this._m.join(", ")})`}}class r{constructor(e=[1,0,0,0,1,0,0,0,1]){this._m=e}get m(){return this._m}transformVector(e){return this.transformVectorToRef(e,new a.Pq)}transformVectorToRef(e,t){const o=this._m;return t.x=e.x*o[0]+e.y*o[1]+e.z*o[2],t.y=e.x*o[3]+e.y*o[4]+e.z*o[5],t.z=e.x*o[6]+e.y*o[7]+e.z*o[8],t}multiplyToRef(e,t){const o=e._m,a=this._m,n=t.m;return n[0]=o[0]*a[0]+o[1]*a[3]+o[2]*a[6],n[1]=o[0]*a[1]+o[1]*a[4]+o[2]*a[7],n[2]=o[0]*a[2]+o[1]*a[5]+o[2]*a[8],n[3]=o[3]*a[0]+o[4]*a[3]+o[5]*a[6],n[4]=o[3]*a[1]+o[4]*a[4]+o[5]*a[7],n[5]=o[3]*a[2]+o[4]*a[5]+o[5]*a[8],n[6]=o[6]*a[0]+o[7]*a[3]+o[8]*a[6],n[7]=o[6]*a[1]+o[7]*a[4]+o[8]*a[7],n[8]=o[6]*a[2]+o[7]*a[5]+o[8]*a[8],t}multiply(e){return this.multiplyToRef(e,new r)}divideToRef(e,t){const o=this._m,a=e.m,n=t.m;return n[0]=o[0]/a[0],n[1]=o[1]/a[1],n[2]=o[2]/a[2],n[3]=o[3]/a[3],n[4]=o[4]/a[4],n[5]=o[5]/a[5],n[6]=o[6]/a[6],n[7]=o[7]/a[7],n[8]=o[8]/a[8],t}divide(e){return this.divideToRef(e,new r)}addToRef(e,t){const o=this._m,a=e.m,n=t.m;return n[0]=o[0]+a[0],n[1]=o[1]+a[1],n[2]=o[2]+a[2],n[3]=o[3]+a[3],n[4]=o[4]+a[4],n[5]=o[5]+a[5],n[6]=o[6]+a[6],n[7]=o[7]+a[7],n[8]=o[8]+a[8],t}add(e){return this.addToRef(e,new r)}subtractToRef(e,t){const o=this._m,a=e.m,n=t.m;return n[0]=o[0]-a[0],n[1]=o[1]-a[1],n[2]=o[2]-a[2],n[3]=o[3]-a[3],n[4]=o[4]-a[4],n[5]=o[5]-a[5],n[6]=o[6]-a[6],n[7]=o[7]-a[7],n[8]=o[8]-a[8],t}subtract(e){return this.subtractToRef(e,new r)}toArray(e=[]){for(let t=0;t<9;t++)e[t]=this._m[t];return e}asArray(){return this.toArray()}fromArray(e){for(let t=0;t<9;t++)this._m[t]=e[t];return this}transpose(){const e=this._m;return new r([e[0],e[3],e[6],e[1],e[4],e[7],e[2],e[5],e[8]])}determinant(){const e=this._m;return e[0]*(e[4]*e[8]-e[5]*e[7])-e[1]*(e[3]*e[8]-e[5]*e[6])+e[2]*(e[3]*e[7]-e[4]*e[6])}inverse(){const e=this.determinant();if(0===e)throw new Error("Matrix is not invertible");const t=this._m,o=1/e;return new r([(t[4]*t[8]-t[5]*t[7])*o,(t[2]*t[7]-t[1]*t[8])*o,(t[1]*t[5]-t[2]*t[4])*o,(t[5]*t[6]-t[3]*t[8])*o,(t[0]*t[8]-t[2]*t[6])*o,(t[2]*t[3]-t[0]*t[5])*o,(t[3]*t[7]-t[4]*t[6])*o,(t[1]*t[6]-t[0]*t[7])*o,(t[0]*t[4]-t[1]*t[3])*o])}equals(e,t=0){const o=this._m,a=e.m;return 0===t?o[0]===a[0]&&o[1]===a[1]&&o[2]===a[2]&&o[3]===a[3]&&o[4]===a[4]&&o[5]===a[5]&&o[6]===a[6]&&o[7]===a[7]&&o[8]===a[8]:Math.abs(o[0]-a[0])<t&&Math.abs(o[1]-a[1])<t&&Math.abs(o[2]-a[2])<t&&Math.abs(o[3]-a[3])<t&&Math.abs(o[4]-a[4])<t&&Math.abs(o[5]-a[5])<t&&Math.abs(o[6]-a[6])<t&&Math.abs(o[7]-a[7])<t&&Math.abs(o[8]-a[8])<t}getClassName(){return"FlowGraphMatrix3D"}toString(){return`FlowGraphMatrix3D(${this._m.join(", ")})`}}},90868:(e,t,o)=>{o.d(t,{P:()=>n});var a=o(56552);class n{constructor(e){this.value=this._toInt(e)}_toInt(e){return 0|e}add(e){return new n(this.value+e.value)}subtract(e){return new n(this.value-e.value)}multiply(e){return new n(Math.imul(this.value,e.value))}divide(e){return new n(this.value/e.value)}getClassName(){return n.ClassName}equals(e){return this.value===e.value}static FromValue(e){return new n(e)}toString(){return this.value.toString()}}n.ClassName="FlowGraphInteger",(0,a.Y5)("FlowGraphInteger",n)}}]);