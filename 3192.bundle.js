"use strict";(self.webpackChunkeverything_viewer=self.webpackChunkeverything_viewer||[]).push([[1249,3192,5961],{5961:(e,s,t)=>{t.r(s),t.d(s,{IblCdfGeneratorSceneComponent:()=>n});var i=t(48802),a=t(16945),r=t(89974);Object.defineProperty(i.Z.prototype,"iblCdfGenerator",{get:function(){return this._iblCdfGenerator},set:function(e){e&&(this._iblCdfGenerator=e)},enumerable:!0,configurable:!0}),i.Z.prototype.enableIblCdfGenerator=function(){return this._iblCdfGenerator?this._iblCdfGenerator:(this._iblCdfGenerator=new r.IblCdfGenerator(this),this._iblCdfGenerator.isSupported?(this.environmentTexture&&(this._iblCdfGenerator.iblSource=this.environmentTexture),this._iblCdfGenerator):(this._iblCdfGenerator=null,null))},i.Z.prototype.disableIblCdfGenerator=function(){this._iblCdfGenerator&&(this._iblCdfGenerator.dispose(),this._iblCdfGenerator=null)};class n{constructor(e){this.name=a.v.NAME_IBLCDFGENERATOR,this._newIblObserver=null,this.scene=e}register(){this._updateIblSource(),this._newIblObserver=this.scene.onEnvironmentTextureChangedObservable.add(this._updateIblSource.bind(this))}rebuild(){}dispose(){this.scene.onEnvironmentTextureChangedObservable.remove(this._newIblObserver)}_updateIblSource(){this.scene.iblCdfGenerator&&this.scene.environmentTexture&&(this.scene.iblCdfGenerator.iblSource=this.scene.environmentTexture)}}r.IblCdfGenerator._SceneComponentInitialization=e=>{let s=e._getComponent(a.v.NAME_IBLCDFGENERATOR);s||(s=new n(e),e._addComponent(s))}},7242:(e,s,t)=>{t.d(s,{m:()=>o});var i=t(75524),a=t(998),r=t(79259),n=t(82678);class o{get name(){return this._name}get cameras(){return this._cameras}get engine(){return this._engine}constructor(e,s){this._engine=e,this.uniqueId=n.K.UniqueId,this._name=s,this._renderEffects={},this._renderEffectsForIsolatedPass=new Array,this._cameras=[]}getClassName(){return"PostProcessRenderPipeline"}get isSupported(){for(const e in this._renderEffects)if(Object.prototype.hasOwnProperty.call(this._renderEffects,e)&&!this._renderEffects[e].isSupported)return!1;return!0}addEffect(e){this._renderEffects[e._name]=e}_rebuild(){}_enableEffect(e,s){const t=this._renderEffects[e];t&&t._enable(a.S0.MakeArray(s||this._cameras))}_disableEffect(e,s){const t=this._renderEffects[e];t&&t._disable(a.S0.MakeArray(s||this._cameras))}_attachCameras(e,s){const t=a.S0.MakeArray(e||this._cameras);if(!t)return;const i=[];let r;for(r=0;r<t.length;r++){const e=t[r];e&&(-1===this._cameras.indexOf(e)?this._cameras.push(e):s&&i.push(r))}for(r=0;r<i.length;r++)t.splice(i[r],1);for(const e in this._renderEffects)Object.prototype.hasOwnProperty.call(this._renderEffects,e)&&this._renderEffects[e]._attachCameras(t)}_detachCameras(e){const s=a.S0.MakeArray(e||this._cameras);if(s){for(const e in this._renderEffects)Object.prototype.hasOwnProperty.call(this._renderEffects,e)&&this._renderEffects[e]._detachCameras(s);for(let e=0;e<s.length;e++)this._cameras.splice(this._cameras.indexOf(s[e]),1)}}_update(){for(const e in this._renderEffects)Object.prototype.hasOwnProperty.call(this._renderEffects,e)&&this._renderEffects[e]._update();for(let e=0;e<this._cameras.length;e++){if(!this._cameras[e])continue;const s=this._cameras[e].name;this._renderEffectsForIsolatedPass[s]&&this._renderEffectsForIsolatedPass[s]._update()}}_reset(){this._renderEffects={},this._renderEffectsForIsolatedPass=new Array}_enableMSAAOnFirstPostProcess(e){if(!this._engine._features.supportMSAA)return!1;const s=Object.keys(this._renderEffects);if(s.length>0){const t=this._renderEffects[s[0]].getPostProcesses();t&&(t[0].samples=e)}return!0}_adaptPostProcessesToViewPort(){const e=Object.keys(this._renderEffects);for(const s of e){const e=this._renderEffects[s].getPostProcesses();if(e)for(const s of e)s.adaptScaleToCurrentViewport=!0}}setPrePassRenderer(e){return!1}dispose(){}}(0,i.Cg)([(0,r.lK)()],o.prototype,"_name",void 0)},31249:(e,s,t)=>{t.r(s),t.d(s,{GeometryBufferRendererSceneComponent:()=>n});var i=t(48802),a=t(16945),r=t(41342);Object.defineProperty(i.Z.prototype,"geometryBufferRenderer",{get:function(){return this._geometryBufferRenderer},set:function(e){e&&e.isSupported&&(this._geometryBufferRenderer=e)},enumerable:!0,configurable:!0}),i.Z.prototype.enableGeometryBufferRenderer=function(e=1,s=15,t){return this._geometryBufferRenderer||(this._geometryBufferRenderer=new r.I(this,e,s,t),this._geometryBufferRenderer.isSupported||(this._geometryBufferRenderer=null)),this._geometryBufferRenderer},i.Z.prototype.disableGeometryBufferRenderer=function(){this._geometryBufferRenderer&&(this._geometryBufferRenderer.dispose(),this._geometryBufferRenderer=null)};class n{constructor(e){this.name=a.v.NAME_GEOMETRYBUFFERRENDERER,this.scene=e}register(){this.scene._gatherRenderTargetsStage.registerStep(a.v.STEP_GATHERRENDERTARGETS_GEOMETRYBUFFERRENDERER,this,this._gatherRenderTargets)}rebuild(){}dispose(){}_gatherRenderTargets(e){this.scene._geometryBufferRenderer&&e.push(this.scene._geometryBufferRenderer.getGBuffer())}}r.I._SceneComponentInitialization=e=>{let s=e._getComponent(a.v.NAME_GEOMETRYBUFFERRENDERER);s||(s=new n(e),e._addComponent(s))}},53645:(e,s,t)=>{t.d(s,{l:()=>a});var i=t(998);class a{constructor(e,s,t,i=!0){this._name=s,this._singleInstance=i,this._getPostProcesses=t,this._cameras={},this._indicesForCamera={},this._postProcesses={}}get isSupported(){for(const e in this._postProcesses)if(Object.prototype.hasOwnProperty.call(this._postProcesses,e)){const s=this._postProcesses[e];for(let e=0;e<s.length;e++)if(!s[e].isSupported)return!1}return!0}_update(){}_attachCameras(e){let s;const t=i.S0.MakeArray(e||this._cameras);if(t)for(let e=0;e<t.length;e++){const i=t[e];if(!i)continue;const a=i.name;if(s=this._singleInstance?0:a,!this._postProcesses[s]){const e=this._getPostProcesses();e&&(this._postProcesses[s]=Array.isArray(e)?e:[e])}this._indicesForCamera[a]||(this._indicesForCamera[a]=[]);const r=this._postProcesses[s];for(const e of r){const s=i.attachPostProcess(e);this._indicesForCamera[a].push(s)}this._cameras[a]||(this._cameras[a]=i)}}_detachCameras(e){const s=i.S0.MakeArray(e||this._cameras);if(s)for(let e=0;e<s.length;e++){const t=s[e],i=t.name,a=this._postProcesses[this._singleInstance?0:i];if(a)for(const e of a)t.detachPostProcess(e);this._cameras[i]&&(this._cameras[i]=null),delete this._indicesForCamera[i]}}_enable(e){const s=i.S0.MakeArray(e||this._cameras);if(s)for(let e=0;e<s.length;e++){const t=s[e],i=t.name,a=this._singleInstance?0:i;for(let r=0;r<this._indicesForCamera[i].length;r++){const n=this._indicesForCamera[i][r],o=t._postProcesses[n];null==o&&s[e].attachPostProcess(this._postProcesses[a][r],n)}}}_disable(e){const s=i.S0.MakeArray(e||this._cameras);if(s)for(let e=0;e<s.length;e++){const t=s[e],i=t.name,a=this._postProcesses[this._singleInstance?0:i];for(const e of a)t.detachPostProcess(e)}}getPostProcesses(e){return this._singleInstance?this._postProcesses[0]:e?this._postProcesses[e.name]:null}}},93192:(e,s,t)=>{t.r(s),t.d(s,{IblShadowsRenderPipeline:()=>G});var i=t(6315),a=t(79923),r=t(82781),n=t(51137),o=t(18800),h=t(10917),l=t(4962),d=t(75474),u=t(26041),_=t(99848),c=t(77891),g=t(51584),x=t(84255);class f{getVoxelGrid(){return this._triPlanarVoxelization?this._voxelGridRT:this._voxelGridZaxis}getDebugPassPP(){return this._voxelDebugPass||this._createDebugPass(),this._voxelDebugPass}get triPlanarVoxelization(){return this._triPlanarVoxelization}set triPlanarVoxelization(e){this._triPlanarVoxelization!==e&&(this._triPlanarVoxelization=e,this._disposeVoxelTextures(),this._createTextures())}setWorldScaleMatrix(e){this._invWorldScaleMatrix=e}isVoxelizationInProgress(){return this._voxelizationInProgress}get voxelResolutionExp(){return this._voxelResolutionExp}set voxelResolutionExp(e){this._voxelResolutionExp===e&&this._voxelGridZaxis||(this._voxelResolutionExp=Math.round(Math.min(Math.max(e,3),9)),this._voxelResolution=Math.pow(2,this._voxelResolutionExp),this._disposeVoxelTextures(),this._createTextures())}set voxelDebugAxis(e){this._voxelDebugAxis=e}get voxelDebugAxis(){return this._voxelDebugAxis}setDebugDisplayParams(e,s,t,i){this._debugSizeParams.set(e,s,t,i)}setDebugMipNumber(e){this._debugMipNumber=e}get debugPassName(){return this._debugPassName}get voxelDebugEnabled(){return this._voxelDebugEnabled}set voxelDebugEnabled(e){this._voxelDebugEnabled!==e&&(this._voxelDebugEnabled=e,e&&(this._voxelSlabDebugRT=new d.RenderTargetTexture("voxelSlabDebug",{width:this._engine.getRenderWidth(),height:this._engine.getRenderHeight()},this._scene,{generateDepthBuffer:!0,generateMipMaps:!1,type:0,format:5,samplingMode:1}),this._voxelSlabDebugRT.noPrePassRenderer=!0),this._voxelSlabDebugRT&&this._removeVoxelRTs([this._voxelSlabDebugRT]),this._voxelDebugEnabled?(this._addRTsForRender([this._voxelSlabDebugRT],this._includedMeshes,this._voxelDebugAxis,1,!0),this._setDebugBindingsBound=this._setDebugBindings.bind(this),this._scene.onBeforeRenderObservable.add(this._setDebugBindingsBound)):this._scene.onBeforeRenderObservable.removeCallback(this._setDebugBindingsBound))}_createDebugPass(){const e=this._engine.isWebGPU;if(!this._voxelDebugPass){const s={width:this._engine.getRenderWidth(),height:this._engine.getRenderHeight(),textureFormat:5,textureType:0,samplingMode:1,uniforms:["sizeParams","mipNumber"],samplers:["voxelTexture","voxelSlabTexture"],engine:this._engine,reusable:!1,shaderLanguage:e?1:0,extraInitializations:(e,s)=>{this._isVoxelGrid3D?e?s.push(t.e(4237).then(t.bind(t,84237))):s.push(t.e(6214).then(t.bind(t,96214))):e?s.push(t.e(7537).then(t.bind(t,17537))):s.push(t.e(8188).then(t.bind(t,88188)))}};this._voxelDebugPass=new c.w(this.debugPassName,this._isVoxelGrid3D?"iblVoxelGrid3dDebug":"iblVoxelGrid2dArrayDebug",s),this._voxelDebugPass.onApplyObservable.add(e=>{0===this._voxelDebugAxis?e.setTexture("voxelTexture",this._voxelGridXaxis):1===this._voxelDebugAxis?e.setTexture("voxelTexture",this._voxelGridYaxis):2===this._voxelDebugAxis?e.setTexture("voxelTexture",this._voxelGridZaxis):e.setTexture("voxelTexture",this.getVoxelGrid()),e.setTexture("voxelSlabTexture",this._voxelSlabDebugRT),e.setVector4("sizeParams",this._debugSizeParams),e.setFloat("mipNumber",this._debugMipNumber)})}}constructor(e,s,i=6,r=!0){this._voxelMrtsXaxis=[],this._voxelMrtsYaxis=[],this._voxelMrtsZaxis=[],this._isVoxelGrid3D=!0,this.onVoxelizationCompleteObservable=new _.cP,this._renderTargets=[],this._triPlanarVoxelization=!0,this._voxelizationInProgress=!1,this._invWorldScaleMatrix=a.uq.Identity(),this._voxelResolution=64,this._voxelResolutionExp=6,this._mipArray=[],this._voxelDebugEnabled=!1,this._voxelDebugAxis=-1,this._debugSizeParams=new a.IU(0,0,0,0),this._includedMeshes=[],this._debugMipNumber=0,this._debugPassName="Voxelization Debug Pass",this._scene=e,this._engine=e.getEngine(),this._triPlanarVoxelization=r,this._engine.getCaps().drawBuffersExtension||n.V.Error("Can't do voxel rendering without the draw buffers extension.");const o=this._engine.isWebGPU;this._maxDrawBuffers=this._engine.getCaps().maxDrawBuffers||0,this._copyMipEffectRenderer=new x.J(this._engine),this._copyMipEffectWrapper=new x.$({engine:this._engine,fragmentShader:"copyTexture3DLayerToTexture",useShaderStore:!0,uniformNames:["layerNum"],samplerNames:["textureSampler"],shaderLanguage:o?1:0,extraInitializationsAsync:async()=>{o?await t.e(5176).then(t.bind(t,95176)):await t.e(7383).then(t.bind(t,47383))}}),this.voxelResolutionExp=i}_generateMipMaps(){const e=Math.ceil(Math.log2(this._voxelResolution));for(let s=1;s<e+1;s++)this._generateMipMap(s)}_generateMipMap(e){const s=this._mipArray[e-1];s&&(s.setTexture("srcMip",1===e?this.getVoxelGrid():this._mipArray[e-2]),s.render())}_copyMipMaps(){const e=Math.ceil(Math.log2(this._voxelResolution));for(let s=1;s<e+1;s++)this._copyMipMap(s)}_copyMipMap(e){const s=this._mipArray[e-1];if(!s)return;const t=this.getVoxelGrid();let i;if(i=t instanceof d.RenderTargetTexture&&t.renderTarget?t.renderTarget:t._rtWrapper,i){this._copyMipEffectRenderer.saveStates();const t=s.getSize().width;for(let a=0;a<t;a++)this._engine.bindFramebuffer(i,0,t,t,!0,e,a),this._copyMipEffectRenderer.applyEffectWrapper(this._copyMipEffectWrapper),this._copyMipEffectWrapper.effect.setTexture("textureSampler",s),this._copyMipEffectWrapper.effect.setInt("layerNum",a),this._copyMipEffectRenderer.draw(),this._engine.unBindFramebuffer(i,!0);this._copyMipEffectRenderer.restoreStates()}}_computeNumberOfSlabs(){return Math.ceil(this._voxelResolution/this._maxDrawBuffers)}_createTextures(){const e=this._engine.isWebGPU,s={width:this._voxelResolution,height:this._voxelResolution,layers:this._isVoxelGrid3D?void 0:this._voxelResolution,depth:this._isVoxelGrid3D?this._voxelResolution:void 0},i={generateDepthBuffer:!1,generateMipMaps:!1,type:0,format:6,samplingMode:1},a=this._computeNumberOfSlabs(),n={generateDepthBuffer:!1,generateMipMaps:!0,type:0,format:6,samplingMode:4,shaderLanguage:e?1:0,extraInitializationsAsync:async()=>{e?await t.e(2199).then(t.bind(t,92199)):await t.e(8162).then(t.bind(t,18162))}};this._triPlanarVoxelization?(this._voxelGridXaxis=new d.RenderTargetTexture("voxelGridXaxis",s,this._scene,i),this._voxelGridYaxis=new d.RenderTargetTexture("voxelGridYaxis",s,this._scene,i),this._voxelGridZaxis=new d.RenderTargetTexture("voxelGridZaxis",s,this._scene,i),this._voxelMrtsXaxis=this._createVoxelMRTs("x_axis_",this._voxelGridXaxis,a),this._voxelMrtsYaxis=this._createVoxelMRTs("y_axis_",this._voxelGridYaxis,a),this._voxelMrtsZaxis=this._createVoxelMRTs("z_axis_",this._voxelGridZaxis,a),this._voxelGridRT=new g.p("combinedVoxelGrid",s,"iblCombineVoxelGrids",this._scene,n,!1),this._scene.proceduralTextures.splice(this._scene.proceduralTextures.indexOf(this._voxelGridRT),1),this._voxelGridRT.setFloat("layer",0),this._voxelGridRT.setTexture("voxelXaxisSampler",this._voxelGridXaxis),this._voxelGridRT.setTexture("voxelYaxisSampler",this._voxelGridYaxis),this._voxelGridRT.setTexture("voxelZaxisSampler",this._voxelGridZaxis),this._voxelGridRT.autoClear=!1,this._voxelGridRT.wrapU=r.g.CLAMP_ADDRESSMODE,this._voxelGridRT.wrapV=r.g.CLAMP_ADDRESSMODE):(this._voxelGridZaxis=new d.RenderTargetTexture("voxelGridZaxis",s,this._scene,n),this._voxelMrtsZaxis=this._createVoxelMRTs("z_axis_",this._voxelGridZaxis,a));const o={generateDepthBuffer:!1,generateMipMaps:!1,type:0,format:6,samplingMode:1,shaderLanguage:e?1:0,extraInitializationsAsync:async()=>{e?await t.e(3584).then(t.bind(t,23584)):await t.e(6043).then(t.bind(t,46043))}};this._mipArray=new Array(Math.ceil(Math.log2(this._voxelResolution)));for(let e=1;e<=this._mipArray.length;e++){const s=this._voxelResolution>>e,t={width:s,height:s,depth:s};this._mipArray[e-1]=new g.p("voxelMip"+e,t,"iblGenerateVoxelMip",this._scene,o,!1),this._scene.proceduralTextures.splice(this._scene.proceduralTextures.indexOf(this._mipArray[e-1]),1);const i=this._mipArray[e-1];i.autoClear=!1,i.wrapU=r.g.CLAMP_ADDRESSMODE,i.wrapV=r.g.CLAMP_ADDRESSMODE,i.setTexture("srcMip",e>1?this._mipArray[e-2]:this.getVoxelGrid()),i.setInt("layerNum",0)}this._createVoxelMaterials()}_createVoxelMRTs(e,s,t){s.wrapU=r.g.CLAMP_ADDRESSMODE,s.wrapV=r.g.CLAMP_ADDRESSMODE,s.noPrePassRenderer=!0;const i=[],a=new Array(this._maxDrawBuffers).fill(this._isVoxelGrid3D?32879:35866);for(let r=0;r<t;r++){let t=new Array(this._maxDrawBuffers).fill(0);t=t.map((e,s)=>r*this._maxDrawBuffers+s);let n=new Array(this._maxDrawBuffers).fill("");n=n.map((s,t)=>"voxel_grid_"+e+(r*this._maxDrawBuffers+t));const o=new l.H("mrt_"+e+r,{width:this._voxelResolution,height:this._voxelResolution,depth:this._isVoxelGrid3D?this._voxelResolution:void 0},this._maxDrawBuffers,this._scene,{types:new Array(this._maxDrawBuffers).fill(0),samplingModes:new Array(this._maxDrawBuffers).fill(3),generateMipMaps:!1,targetTypes:a,formats:new Array(this._maxDrawBuffers).fill(6),faceIndex:new Array(this._maxDrawBuffers).fill(0),layerIndex:t,layerCounts:new Array(this._maxDrawBuffers).fill(this._voxelResolution),generateDepthBuffer:!1,generateStencilBuffer:!1},n);o.clearColor=new u.ov(0,0,0,1),o.noPrePassRenderer=!0;for(let e=0;e<this._maxDrawBuffers;e++)o.setInternalTexture(s.getInternalTexture(),e);i.push(o)}return i}_disposeVoxelTextures(){this._stopVoxelization();for(let e=0;e<this._voxelMrtsZaxis.length;e++)this._triPlanarVoxelization&&(this._voxelMrtsXaxis[e].dispose(!0),this._voxelMrtsYaxis[e].dispose(!0)),this._voxelMrtsZaxis[e].dispose(!0);this._triPlanarVoxelization&&(this._voxelGridXaxis?.dispose(),this._voxelGridYaxis?.dispose(),this._voxelGridRT?.dispose()),this._voxelGridZaxis?.dispose();for(const e of this._mipArray)e.dispose();this._voxelMaterial?.dispose(),this._voxelSlabDebugMaterial?.dispose(),this._mipArray=[],this._voxelMrtsXaxis=[],this._voxelMrtsYaxis=[],this._voxelMrtsZaxis=[]}_createVoxelMaterials(){const e=this._engine.isWebGPU;this._voxelMaterial=new h.ShaderMaterial("voxelization",this._scene,"iblVoxelGrid",{uniforms:["world","viewMatrix","invWorldScale","nearPlane","farPlane","stepSize"],defines:["MAX_DRAW_BUFFERS "+this._maxDrawBuffers],shaderLanguage:e?1:0,extraInitializationsAsync:async()=>{e?await Promise.all([t.e(9107).then(t.bind(t,39107)),t.e(3965).then(t.bind(t,43965))]):await Promise.all([t.e(3414).then(t.bind(t,3414)),t.e(8444).then(t.bind(t,8444))])}}),this._voxelMaterial.cullBackFaces=!1,this._voxelMaterial.backFaceCulling=!1,this._voxelMaterial.depthFunction=o.Engine.ALWAYS,this._voxelSlabDebugMaterial=new h.ShaderMaterial("voxelSlabDebug",this._scene,"iblVoxelSlabDebug",{uniforms:["world","viewMatrix","cameraViewMatrix","projection","invWorldScale","nearPlane","farPlane","stepSize"],defines:["MAX_DRAW_BUFFERS "+this._maxDrawBuffers],shaderLanguage:e?1:0,extraInitializationsAsync:async()=>{e?await Promise.all([t.e(1138).then(t.bind(t,1138)),t.e(6472).then(t.bind(t,26472))]):await Promise.all([t.e(5257).then(t.bind(t,85257)),t.e(1587).then(t.bind(t,93968))])}})}_setDebugBindings(){this._voxelSlabDebugMaterial.setMatrix("projection",this._scene.activeCamera.getProjectionMatrix()),this._voxelSlabDebugMaterial.setMatrix("cameraViewMatrix",this._scene.activeCamera.getViewMatrix())}isReady(){let e=this.getVoxelGrid().isReady();for(let s=0;s<this._mipArray.length;s++){const t=this._mipArray[s].isReady();e&&(e=t)}return!(!e||this._voxelizationInProgress)}_stopVoxelization(){this._removeVoxelRTs(this._voxelMrtsXaxis),this._removeVoxelRTs(this._voxelMrtsYaxis),this._removeVoxelRTs(this._voxelMrtsZaxis)}_removeVoxelRTs(e){const s=this._renderTargets.findIndex(s=>s===e[0]);if(s>=0)this._renderTargets.splice(s,e.length);else{const s=this._scene.customRenderTargets.findIndex(s=>s===e[0]);s>=0&&this._scene.customRenderTargets.splice(s,e.length)}}updateVoxelGrid(e){this._stopVoxelization(),this._includedMeshes=e,this._voxelizationInProgress=!0,this._triPlanarVoxelization?(this._addRTsForRender(this._voxelMrtsXaxis,e,0),this._addRTsForRender(this._voxelMrtsYaxis,e,1),this._addRTsForRender(this._voxelMrtsZaxis,e,2)):this._addRTsForRender(this._voxelMrtsZaxis,e,2),this._voxelDebugEnabled&&this._addRTsForRender([this._voxelSlabDebugRT],e,this._voxelDebugAxis,1,!0),this._renderVoxelGridBound=this._renderVoxelGrid.bind(this),this._scene.onAfterRenderObservable.add(this._renderVoxelGridBound)}_renderVoxelGrid(){if(this._voxelizationInProgress){let e=this.getVoxelGrid().isReady();for(let s=0;s<this._mipArray.length;s++){const t=this._mipArray[s].isReady();e&&(e=t)}for(let s=0;s<this._renderTargets.length;s++){const t=this._renderTargets[s].isReadyForRendering();e&&(e=t)}if(e){for(const e of this._renderTargets)e.render();this._stopVoxelization(),this._triPlanarVoxelization&&this._voxelGridRT.render(),this._generateMipMaps(),this._copyMipEffectWrapper.effect.whenCompiledAsync().then(()=>{this._copyMipMaps(),this._scene.onAfterRenderObservable.removeCallback(this._renderVoxelGridBound),this._voxelizationInProgress=!1,this.onVoxelizationCompleteObservable.notifyObservers()})}}}_addRTsForRender(e,s,t,i=0,r=!1){const n=1/this._computeNumberOfSlabs();let o;o=0===i?this._voxelMaterial:this._voxelSlabDebugMaterial;for(let i=0;i<e.length;i++){const r=e[i];r.renderList=[];const h=i*n,l=(i+1)*n,d=n/this._maxDrawBuffers,u=new a.Pq(0,0,0);let _=new a.Pq(0,0,1);0===t?_=new a.Pq(1,0,0):1===t&&(_=new a.Pq(0,1,0));let c=new a.Pq(0,1,0);if(1===t&&(c=new a.Pq(1,0,0)),r.onBeforeRenderObservable.add(()=>{o.setMatrix("viewMatrix",a.uq.LookAtLH(u,_,c)),o.setMatrix("invWorldScale",this._invWorldScaleMatrix),o.setFloat("nearPlane",h),o.setFloat("farPlane",l),o.setFloat("stepSize",d)}),0===s.length)return;for(const e of s)if(e){e.subMeshes&&e.subMeshes.length>0&&(r.renderList?.push(e),r.setMaterialForRendering(e,o));const s=e.getChildMeshes();for(const e of s)e.subMeshes&&e.subMeshes.length>0&&(r.renderList?.push(e),r.setMaterialForRendering(e,o))}}if(r)for(const s of e)-1===this._scene.customRenderTargets.indexOf(s)&&this._scene.customRenderTargets.push(s);else this._renderTargets=this._renderTargets.concat(e)}resize(){this._voxelSlabDebugRT?.resize({width:this._scene.getEngine().getRenderWidth(),height:this._scene.getEngine().getRenderHeight()})}dispose(){this._disposeVoxelTextures(),this._voxelSlabDebugRT&&(this._removeVoxelRTs([this._voxelSlabDebugRT]),this._voxelSlabDebugRT.dispose()),this._voxelDebugPass&&this._voxelDebugPass.dispose()}}var p=t(41342);class b{get voxelShadowOpacity(){return this._voxelShadowOpacity}set voxelShadowOpacity(e){this._voxelShadowOpacity=e}get ssShadowOpacity(){return this._ssShadowOpacity}set ssShadowOpacity(e){this._ssShadowOpacity=e}get sssSamples(){return this._sssSamples}set sssSamples(e){this._sssSamples=e}get sssStride(){return this._sssStride}set sssStride(e){this._sssStride=e}get sssMaxDist(){return this._sssMaxDist}set sssMaxDist(e){this._sssMaxDist=e}get sssThickness(){return this._sssThickness}set sssThickness(e){this._sssThickness=e}get voxelNormalBias(){return this._voxelNormalBias}set voxelNormalBias(e){this._voxelNormalBias=e}get voxelDirectionBias(){return this._voxelDirectionBias}set voxelDirectionBias(e){this._voxelDirectionBias=e}get sampleDirections(){return this._sampleDirections}set sampleDirections(e){this._sampleDirections=e}get envRotation(){return this._envRotation}set envRotation(e){this._envRotation=e}getOutputTexture(){return this._outputTexture}getDebugPassPP(){return this._debugPassPP||this._createDebugPass(),this._debugPassPP}get debugPassName(){return this._debugPassName}setWorldScaleMatrix(e){this._invWorldScaleMatrix=e}set coloredShadows(e){this._coloredShadows=e}get coloredShadows(){return this._coloredShadows}setDebugDisplayParams(e,s,t,i){this._debugSizeParams.set(e,s,t,i)}_createDebugPass(){const e=this._engine.isWebGPU;if(!this._debugPassPP){const s={width:this._engine.getRenderWidth(),height:this._engine.getRenderHeight(),uniforms:["sizeParams"],samplers:["debugSampler"],engine:this._engine,reusable:!0,shaderLanguage:e?1:0,extraInitializations:(e,s)=>{e?s.push(t.e(2730).then(t.bind(t,2730))):s.push(t.e(2495).then(t.bind(t,22495)))}};this._debugPassPP=new c.w(this.debugPassName,"iblShadowDebug",s),this._debugPassPP.autoClear=!1,this._debugPassPP.onApplyObservable.add(e=>{e.setTexture("debugSampler",this._outputTexture),e.setVector4("sizeParams",this._debugSizeParams)})}}constructor(e,s){this._voxelShadowOpacity=1,this._sssSamples=16,this._sssStride=8,this._sssMaxDist=.05,this._sssThickness=.5,this._ssShadowOpacity=1,this._cameraInvView=a.uq.Identity(),this._cameraInvProj=a.uq.Identity(),this._invWorldScaleMatrix=a.uq.Identity(),this._frameId=0,this._sampleDirections=4,this._shadowParameters=new a.IU(0,0,0,0),this._sssParameters=new a.IU(0,0,0,0),this._opacityParameters=new a.IU(0,0,0,0),this._voxelBiasParameters=new a.IU(0,0,0,0),this._voxelNormalBias=1.4,this._voxelDirectionBias=1.75,this.enabled=!0,this.debugEnabled=!1,this._debugPassName="Voxel Tracing Debug Pass",this._envRotation=0,this._coloredShadows=!1,this._debugVoxelMarchEnabled=!1,this._debugSizeParams=new a.IU(0,0,0,0),this._renderWhenGBufferReady=null,this._scene=e,this._engine=e.getEngine(),this._renderPipeline=s,this._createTextures()}_createTextures(){const e=this._createDefines(),s=this._engine.isWebGPU,i={type:0,format:5,samplingMode:1,generateDepthBuffer:!1,shaderLanguage:s?1:0,extraInitializationsAsync:async()=>{s?await Promise.all([t.e(9461).then(t.bind(t,9461))]):await Promise.all([t.e(6990).then(t.bind(t,16990))])}};this._outputTexture=new g.p("voxelTracingPass",{width:this._engine.getRenderWidth(),height:this._engine.getRenderHeight()},"iblShadowVoxelTracing",this._scene,i),this._outputTexture.refreshRate=-1,this._outputTexture.autoClear=!1,this._outputTexture.defines=e,this._setBindings(this._scene.activeCamera),this._renderWhenGBufferReady=this._render.bind(this),this._renderPipeline.onVoxelizationCompleteObservable.addOnce(()=>{this._scene.geometryBufferRenderer.getGBuffer().onAfterRenderObservable.add(this._renderWhenGBufferReady)})}_createDefines(){let e="";return this._scene.useRightHandedSystem&&(e+="#define RIGHT_HANDED\n"),this._debugVoxelMarchEnabled&&(e+="#define VOXEL_MARCH_DIAGNOSTIC_INFO_OPTION 1u\n"),this._coloredShadows&&(e+="#define COLOR_SHADOWS 1u\n"),e}_setBindings(e){this._outputTexture.defines=this._createDefines(),this._outputTexture.setMatrix("viewMtx",e.getViewMatrix()),this._outputTexture.setMatrix("projMtx",e.getProjectionMatrix()),e.getProjectionMatrix().invertToRef(this._cameraInvProj),e.getViewMatrix().invertToRef(this._cameraInvView),this._outputTexture.setMatrix("invProjMtx",this._cameraInvProj),this._outputTexture.setMatrix("invViewMtx",this._cameraInvView),this._outputTexture.setMatrix("wsNormalizationMtx",this._invWorldScaleMatrix),this._frameId++;let s=0;this._scene.environmentTexture&&(s=this._scene.environmentTexture.rotationY??0),s=this._scene.useRightHandedSystem?-(s+.5*Math.PI):s-.5*Math.PI,s%=2*Math.PI,this._shadowParameters.set(this._sampleDirections,this._frameId,1,s),this._outputTexture.setVector4("shadowParameters",this._shadowParameters);const t=this._renderPipeline._getVoxelGridTexture(),i=Math.floor(Math.log2(t.getSize().width));this._voxelBiasParameters.set(this._voxelNormalBias,this._voxelDirectionBias,i,0),this._outputTexture.setVector4("voxelBiasParameters",this._voxelBiasParameters),this._sssParameters.set(this._sssSamples,this._sssStride,this._sssMaxDist,this._sssThickness),this._outputTexture.setVector4("sssParameters",this._sssParameters),this._opacityParameters.set(this._voxelShadowOpacity,this._ssShadowOpacity,0,0),this._outputTexture.setVector4("shadowOpacity",this._opacityParameters),this._outputTexture.setTexture("voxelGridSampler",t),this._outputTexture.setTexture("blueNoiseSampler",this._renderPipeline._getNoiseTexture());const a=this._scene.iblCdfGenerator;if(!a)return n.V.Warn("IBLShadowsVoxelTracingPass: Can't bind for render because iblCdfGenerator is not enabled."),!1;this._outputTexture.setTexture("icdfSampler",a.getIcdfTexture()),this._coloredShadows&&this._scene.environmentTexture&&this._outputTexture.setTexture("iblSampler",this._scene.environmentTexture);const r=this._scene.geometryBufferRenderer;if(!r)return n.V.Warn("IBLShadowsVoxelTracingPass: Can't bind for render because GeometryBufferRenderer is not enabled."),!1;const o=r.getTextureIndex(p.I.SCREENSPACE_DEPTH_TEXTURE_TYPE);this._outputTexture.setTexture("depthSampler",r.getGBuffer().textures[o]);const h=r.getTextureIndex(p.I.NORMAL_TEXTURE_TYPE);return this._outputTexture.setTexture("worldNormalSampler",r.getGBuffer().textures[h]),!0}_render(){this.enabled&&this._outputTexture.isReady()&&this._outputTexture.getEffect()?.isReady()&&this._setBindings(this._scene.activeCamera)&&this._outputTexture.render()}resize(e=1){const s={width:Math.max(1,Math.floor(this._engine.getRenderWidth()*e)),height:Math.max(1,Math.floor(this._engine.getRenderHeight()*e))};this._outputTexture.getSize().width===s.width&&this._outputTexture.getSize().height===s.height||this._outputTexture.resize(s,!1)}isReady(){return this._outputTexture.isReady()&&!(this._debugPassPP&&!this._debugPassPP.isReady())&&this._scene.iblCdfGenerator&&this._scene.iblCdfGenerator.getIcdfTexture().isReady()&&this._renderPipeline._getVoxelGridTexture().isReady()}dispose(){if(this._scene.geometryBufferRenderer&&this._renderWhenGBufferReady){this._scene.geometryBufferRenderer.getGBuffer().onAfterRenderObservable.removeCallback(this._renderWhenGBufferReady)}this._outputTexture.dispose(),this._debugPassPP&&this._debugPassPP.dispose()}}class m{getOutputTexture(){return this._outputTexture}getDebugPassPP(){return this._debugPassPP||this._createDebugPass(),this._debugPassPP}get debugPassName(){return this._debugPassName}setWorldScale(e){this._worldScale=e}setDebugDisplayParams(e,s,t,i){this._debugSizeParams.set(e,s,t,i)}_createDebugPass(){if(!this._debugPassPP){const e=this._engine.isWebGPU,s={width:this._engine.getRenderWidth(),height:this._engine.getRenderHeight(),textureFormat:5,textureType:0,samplingMode:1,uniforms:["sizeParams"],samplers:["debugSampler"],engine:this._engine,reusable:!1,shaderLanguage:e?1:0,extraInitializations:(e,s)=>{e?s.push(t.e(2730).then(t.bind(t,2730))):s.push(t.e(2495).then(t.bind(t,22495)))}};this._debugPassPP=new c.w(this.debugPassName,"iblShadowDebug",s),this._debugPassPP.autoClear=!1,this._debugPassPP.onApplyObservable.add(e=>{e.setTexture("debugSampler",this._outputTexture),e.setVector4("sizeParams",this._debugSizeParams)})}}constructor(e,s){this._worldScale=1,this._blurParameters=new a.IU(0,0,0,0),this.enabled=!0,this._debugPassName="Spatial Blur Debug Pass",this.debugEnabled=!1,this._debugSizeParams=new a.IU(0,0,0,0),this._renderWhenGBufferReady=null,this._scene=e,this._engine=e.getEngine(),this._renderPipeline=s,this._createTextures()}_createTextures(){const e=this._engine.isWebGPU,s={type:0,format:5,samplingMode:1,generateDepthBuffer:!1,generateMipMaps:!1,shaderLanguage:e?1:0,extraInitializationsAsync:async()=>{e?await Promise.all([t.e(8772).then(t.bind(t,68772))]):await Promise.all([t.e(8605).then(t.bind(t,30986))])}};this._outputTexture=new g.p("spatialBlurPass",{width:this._engine.getRenderWidth(),height:this._engine.getRenderHeight()},"iblShadowSpatialBlur",this._scene,s,!1,!1,0),this._outputTexture.refreshRate=-1,this._outputTexture.autoClear=!1,this._setBindings(),this._renderWhenGBufferReady=this._render.bind(this),this._renderPipeline.onVoxelizationCompleteObservable.addOnce(()=>{this._scene.geometryBufferRenderer.getGBuffer().onAfterRenderObservable.add(this._renderWhenGBufferReady)})}_setBindings(){this._outputTexture.setTexture("voxelTracingSampler",this._renderPipeline._getVoxelTracingTexture());this._blurParameters.set(1,this._worldScale,0,0),this._outputTexture.setVector4("blurParameters",this._blurParameters);const e=this._scene.geometryBufferRenderer;if(!e)return!1;const s=e.getTextureIndex(p.I.SCREENSPACE_DEPTH_TEXTURE_TYPE);this._outputTexture.setTexture("depthSampler",e.getGBuffer().textures[s]);const t=e.getTextureIndex(p.I.NORMAL_TEXTURE_TYPE);return this._outputTexture.setTexture("worldNormalSampler",e.getGBuffer().textures[t]),!0}_render(){this.enabled&&this._outputTexture.isReady()&&this._outputTexture.getEffect()?.isReady()&&this._setBindings()&&this._outputTexture.render()}resize(e=1){const s={width:Math.max(1,Math.floor(this._engine.getRenderWidth()*e)),height:Math.max(1,Math.floor(this._engine.getRenderHeight()*e))};this._outputTexture.getSize().width===s.width&&this._outputTexture.getSize().height===s.height||this._outputTexture.resize(s,!1)}isReady(){return this._outputTexture.isReady()&&!(this._debugPassPP&&!this._debugPassPP.isReady())}dispose(){if(this._scene.geometryBufferRenderer&&this._renderWhenGBufferReady){this._scene.geometryBufferRenderer.getGBuffer().onAfterRenderObservable.removeCallback(this._renderWhenGBufferReady)}this._outputTexture.dispose(),this._debugPassPP&&this._debugPassPP.dispose()}}class P{getOutputTexture(){return this._outputTexture}getDebugPassPP(){return this._debugPassPP||this._createDebugPass(),this._debugPassPP}get debugPassName(){return this._debugPassName}get remanence(){return this._remanence}set remanence(e){this._remanence=e}get reset(){return this._reset}set reset(e){this._reset=e}set isMoving(e){this._isMoving=e}setDebugDisplayParams(e,s,t,i){this._debugSizeParams.set(e,s,t,i)}_createDebugPass(){if(!this._debugPassPP){const e=this._engine.isWebGPU,s={width:this._engine.getRenderWidth(),height:this._engine.getRenderHeight(),textureFormat:5,textureType:0,samplingMode:1,uniforms:["sizeParams"],samplers:["debugSampler"],engine:this._engine,reusable:!1,shaderLanguage:e?1:0,extraInitializations:(e,s)=>{e?s.push(t.e(2730).then(t.bind(t,2730))):s.push(t.e(2495).then(t.bind(t,22495)))}};this._debugPassPP=new c.w(this.debugPassName,"iblShadowDebug",s),this._debugPassPP.autoClear=!1,this._debugPassPP.onApplyObservable.add(e=>{e.setTexture("debugSampler",this._outputTexture),e.setVector4("sizeParams",this._debugSizeParams)})}}constructor(e,s){this._accumulationParams=new a.IU(0,0,0,0),this.debugEnabled=!1,this.enabled=!0,this.onReadyObservable=new _.cP,this._debugPassName="Shadow Accumulation Debug Pass",this._remanence=.9,this._reset=!0,this._isMoving=!1,this._debugSizeParams=new a.IU(0,0,0,0),this._renderWhenGBufferReady=null,this._scene=e,this._engine=e.getEngine(),this._renderPipeline=s,this._createTextures()}_createTextures(){const e=this._engine.isWebGPU,s={type:2,format:5,samplingMode:1,generateDepthBuffer:!1,generateMipMaps:!1,shaderLanguage:e?1:0,extraInitializationsAsync:async()=>{e?await Promise.all([t.e(7122).then(t.bind(t,27122))]):await Promise.all([t.e(3470).then(t.bind(t,61089))])}};this._outputTexture=new g.p("shadowAccumulationPass",{width:this._engine.getRenderWidth(),height:this._engine.getRenderHeight()},"iblShadowAccumulation",this._scene,s),this._outputTexture.refreshRate=1,this._outputTexture.autoClear=!1,this._outputTexture.onGeneratedObservable.addOnce(()=>{this.onReadyObservable.notifyObservers()}),this._setOutputTextureBindings(),this._renderWhenGBufferReady=this._render.bind(this),this._renderPipeline.onVoxelizationCompleteObservable.addOnce(()=>{this._scene.geometryBufferRenderer.getGBuffer().onAfterRenderObservable.add(this._renderWhenGBufferReady)});const i={type:2,format:5,samplingMode:1,generateDepthBuffer:!1,generateMipMaps:!1,shaderLanguage:e?1:0,extraInitializationsAsync:async()=>{e?await Promise.all([t.e(9965).then(t.bind(t,99965))]):await Promise.all([t.e(9820).then(t.bind(t,79820))])}};this._oldAccumulationCopy=new g.p("oldAccumulationRT",{width:this._engine.getRenderWidth(),height:this._engine.getRenderHeight()},"pass",this._scene,i,!1),this._oldAccumulationCopy.autoClear=!1,this._oldAccumulationCopy.refreshRate=1,this._oldAccumulationCopy.onBeforeGenerationObservable.add(this._setAccumulationCopyBindings.bind(this)),this._setAccumulationCopyBindings();const a={type:2,format:5,samplingMode:1,generateDepthBuffer:!1,generateMipMaps:!1,shaderLanguage:e?1:0,extraInitializationsAsync:async()=>{e?await Promise.all([t.e(9965).then(t.bind(t,99965))]):await Promise.all([t.e(9820).then(t.bind(t,79820))])}};this._oldPositionCopy=new g.p("oldLocalPositionRT",{width:this._engine.getRenderWidth(),height:this._engine.getRenderHeight()},"pass",this._scene,a,!1),this._updatePositionCopy(),this._oldPositionCopy.autoClear=!1,this._oldPositionCopy.refreshRate=1,this._oldPositionCopy.onBeforeGenerationObservable.add(this._updatePositionCopy.bind(this))}_setOutputTextureBindings(){const e=this._isMoving?this.remanence:.99;this._accumulationParams.set(e,this.reset?1:0,this._renderPipeline.voxelGridSize,0),this._outputTexture.setTexture("spatialBlurSampler",this._renderPipeline._getSpatialBlurTexture()),this._outputTexture.setVector4("accumulationParameters",this._accumulationParams),this._outputTexture.setTexture("oldAccumulationSampler",this._oldAccumulationCopy?this._oldAccumulationCopy:this._renderPipeline._dummyTexture2d),this._outputTexture.setTexture("prevPositionSampler",this._oldPositionCopy?this._oldPositionCopy:this._renderPipeline._dummyTexture2d);const s=this._scene.geometryBufferRenderer;if(!s)return!1;const t=s.getTextureIndex(p.I.VELOCITY_LINEAR_TEXTURE_TYPE);this._outputTexture.setTexture("motionSampler",s.getGBuffer().textures[t]);const i=s.getTextureIndex(p.I.POSITION_TEXTURE_TYPE);return this._outputTexture.setTexture("positionSampler",s.getGBuffer().textures[i]),this.reset=!1,this._isMoving=!1,!0}_updatePositionCopy(){const e=this._scene.geometryBufferRenderer,s=e.getTextureIndex(p.I.POSITION_TEXTURE_TYPE);this._oldPositionCopy.setTexture("textureSampler",e.getGBuffer().textures[s])}_setAccumulationCopyBindings(){this._oldAccumulationCopy.setTexture("textureSampler",this._outputTexture)}_render(){this.enabled&&this._outputTexture.isReady()&&this._outputTexture.getEffect()?.isReady()&&this._setOutputTextureBindings()&&this._outputTexture.render()}resize(e=1){const s={width:Math.max(1,Math.floor(this._engine.getRenderWidth()*e)),height:Math.max(1,Math.floor(this._engine.getRenderHeight()*e))};this._outputTexture.getSize().width===s.width&&this._outputTexture.getSize().height===s.height||(this._outputTexture.resize(s,!1),this._oldAccumulationCopy.resize(s,!1),this._oldPositionCopy.resize({width:this._engine.getRenderWidth(),height:this._engine.getRenderHeight()},!1),this.reset=!0)}_disposeTextures(){this._oldAccumulationCopy.dispose(),this._oldPositionCopy.dispose(),this._outputTexture.dispose()}isReady(){return this._oldAccumulationCopy&&this._oldAccumulationCopy.isReady()&&this._oldPositionCopy&&this._oldPositionCopy.isReady()&&this._outputTexture.isReady()&&!(this._debugPassPP&&!this._debugPassPP.isReady())}dispose(){if(this._scene.geometryBufferRenderer&&this._renderWhenGBufferReady){this._scene.geometryBufferRenderer.getGBuffer().onAfterRenderObservable.removeCallback(this._renderWhenGBufferReady)}this._disposeTextures(),this._debugPassPP&&this._debugPassPP.dispose(),this.onReadyObservable.clear()}}var v=t(7242),T=t(53645),R=t(96041);class w extends r.g{get width(){return this._texture?this._texture.width:0}get height(){return this._texture?this._texture.height:0}get depth(){return this._texture?this._texture.depth:0}constructor(e,s,t,i,a,n,o=!0,h=!1,l=r.g.TRILINEAR_SAMPLINGMODE,d=0,u){super(null,n,!o,h),this.format=a,this._texture=n.getEngine().createRawTexture3D(e,s,t,i,a,o,h,l,null,d,u),this.is3D=!0}update(e){this._texture&&this._getEngine().updateRawTexture3D(this._texture,e,this._texture.format,this._texture.invertY,null,this._texture.type)}}var S=t(75524),y=t(79526),E=t(82277),D=t(17595),M=t(79259),O=t(56552),C=t(227);class B extends y.M{constructor(){super(...arguments),this.RENDER_WITH_IBL_SHADOWS=!1,this.COLORED_IBL_SHADOWS=!1}}class I extends E.y{get isColored(){return this._isColored}set isColored(e){this._isColored!==e&&(this._isColored=e,this._markAllSubMeshesAsTexturesDirty())}_markAllSubMeshesAsTexturesDirty(){this._enable(this._isEnabled),this._internalMarkAllSubMeshesAsTexturesDirty()}isCompatible(){return!0}constructor(e){super(e,I.Name,310,new B),this.shadowOpacity=1,this._isEnabled=!1,this._isColored=!1,this.isEnabled=!1,this._internalMarkAllSubMeshesAsTexturesDirty=e._dirtyCallbacks[1]}prepareDefines(e){e.RENDER_WITH_IBL_SHADOWS=this._isEnabled,e.COLORED_IBL_SHADOWS=this.isColored}getClassName(){return"IBLShadowsPluginMaterial"}getUniforms(){return{ubo:[{name:"renderTargetSize",size:2,type:"vec2"},{name:"shadowOpacity",size:1,type:"float"}],fragment:"#ifdef RENDER_WITH_IBL_SHADOWS\n                    uniform vec2 renderTargetSize;\n                    uniform float shadowOpacity;\n                #endif"}}getSamplers(e){e.push("iblShadowsTexture")}bindForSubMesh(e){this._isEnabled&&(e.bindTexture("iblShadowsTexture",this.iblShadowsTexture),e.updateFloat2("renderTargetSize",this._material.getScene().getEngine().getRenderWidth(),this._material.getScene().getEngine().getRenderHeight()),e.updateFloat("shadowOpacity",this.shadowOpacity))}getCustomCode(e,s){let t;return 1===s?(t={CUSTOM_FRAGMENT_DEFINITIONS:"\n                #ifdef RENDER_WITH_IBL_SHADOWS\n                    var iblShadowsTextureSampler: sampler;\n                    var iblShadowsTexture: texture_2d<f32>;\n\n                    #ifdef COLORED_IBL_SHADOWS\n                        fn computeIndirectShadow() -> vec3f {\n                            var uv = fragmentInputs.position.xy / uniforms.renderTargetSize;\n                            var shadowValue: vec3f = textureSample(iblShadowsTexture, iblShadowsTextureSampler, uv).rgb;\n                            return mix(shadowValue, vec3f(1.0), 1.0 - uniforms.shadowOpacity);\n                        }\n                    #else\n                        fn computeIndirectShadow() -> vec2f {\n                            var uv = fragmentInputs.position.xy / uniforms.renderTargetSize;\n                            var shadowValue: vec2f = textureSample(iblShadowsTexture, iblShadowsTextureSampler, uv).rg;\n                            return mix(shadowValue, vec2f(1.0), 1.0 - uniforms.shadowOpacity);\n                        }\n                    #endif\n                #endif\n            "},this._material instanceof D.d?t.CUSTOM_FRAGMENT_BEFORE_FINALCOLORCOMPOSITION="\n                #ifdef RENDER_WITH_IBL_SHADOWS\n                    #ifndef UNLIT\n                        #ifdef REFLECTION\n                            #ifdef COLORED_IBL_SHADOWS\n                                var shadowValue: vec3f = computeIndirectShadow();\n                                finalIrradiance *= shadowValue;\n                                finalRadianceScaled *= mix(vec3f(1.0), shadowValue, roughness);\n                            #else\n                                var shadowValue: vec2f = computeIndirectShadow();\n                                finalIrradiance *= vec3f(shadowValue.x);\n                                finalRadianceScaled *= vec3f(mix(pow(shadowValue.y, 4.0), shadowValue.x, roughness));\n                            #endif\n                        #endif\n                    #else\n                        finalDiffuse *= computeIndirectShadow().x;\n                    #endif\n                #endif\n            ":this._material instanceof C.OpenPBRMaterial?t.CUSTOM_FRAGMENT_BEFORE_IBLLAYERCOMPOSITION="\n                #ifdef RENDER_WITH_IBL_SHADOWS\n                    #ifndef UNLIT\n                        #ifdef REFLECTION\n                            #ifdef COLORED_IBL_SHADOWS\n                                var shadowValue: vec3f = computeIndirectShadow();\n                                slab_diffuse_ibl *= shadowValue;\n                                slab_glossy_ibl *= mix(vec3f(1.0), shadowValue, specularAlphaG);\n                            #else\n                                var shadowValue: vec2f = computeIndirectShadow();\n                                slab_diffuse_ibl *= vec3f(shadowValue.x);\n                                slab_glossy_ibl *= vec3f(mix(pow(shadowValue.y, 4.0), shadowValue.x, specularAlphaG));\n                            #endif\n                        #endif\n                    #else\n                        slab_diffuse_ibl *= computeIndirectShadow().x;\n                    #endif\n                #endif\n            ":t.CUSTOM_FRAGMENT_BEFORE_FRAGCOLOR="\n                #ifdef RENDER_WITH_IBL_SHADOWS\n                    #ifdef COLORED_IBL_SHADOWS\n                        var shadowValue: vec3f = computeIndirectShadow();\n                        color *= toGammaSpace(vec4f(shadowValue, 1.0f));\n                    #else\n                        var shadowValue: vec2f = computeIndirectShadow();\n                        color *= toGammaSpace(vec4f(shadowValue.x, shadowValue.x, shadowValue.x, 1.0f));\n                    #endif\n                #endif\n            "):(t={CUSTOM_FRAGMENT_DEFINITIONS:"\n                #ifdef RENDER_WITH_IBL_SHADOWS\n                    uniform sampler2D iblShadowsTexture;\n                #ifdef COLORED_IBL_SHADOWS\n                    vec3 computeIndirectShadow() {\n                        vec2 uv = gl_FragCoord.xy / renderTargetSize;\n                        vec3 shadowValue = texture2D(iblShadowsTexture, uv).rgb;\n                        return mix(shadowValue.rgb, vec3(1.0), 1.0 - shadowOpacity);\n                    }\n                #else\n                    vec2 computeIndirectShadow() {\n                        vec2 uv = gl_FragCoord.xy / renderTargetSize;\n                        vec2 shadowValue = texture2D(iblShadowsTexture, uv).rg;\n                        return mix(shadowValue.rg, vec2(1.0), 1.0 - shadowOpacity);\n                    }\n                #endif\n                #endif\n            "},this._material instanceof D.d?t.CUSTOM_FRAGMENT_BEFORE_FINALCOLORCOMPOSITION="\n                #ifdef RENDER_WITH_IBL_SHADOWS\n                    #ifndef UNLIT\n                        #ifdef REFLECTION\n                            #ifdef COLORED_IBL_SHADOWS\n                                vec3 shadowValue = computeIndirectShadow();\n                                finalIrradiance.rgb *= shadowValue.rgb;\n                                finalRadianceScaled *= mix(vec3(1.0), shadowValue.rgb, roughness);\n                            #else\n                                vec2 shadowValue = computeIndirectShadow();\n                                finalIrradiance *= shadowValue.x;\n                                finalRadianceScaled *= mix(pow(shadowValue.y, 4.0), shadowValue.x, roughness);\n                            #endif\n                        #endif\n                    #else\n                        finalDiffuse *= computeIndirectShadow().x;\n                    #endif\n                #endif\n            ":this._material instanceof C.OpenPBRMaterial?t.CUSTOM_FRAGMENT_BEFORE_IBLLAYERCOMPOSITION="\n                #ifdef RENDER_WITH_IBL_SHADOWS\n                    #ifndef UNLIT\n                        #ifdef REFLECTION\n                            #ifdef COLORED_IBL_SHADOWS\n                                vec3 shadowValue = computeIndirectShadow();\n                                slab_diffuse_ibl.rgb *= shadowValue.rgb;\n                                slab_glossy_ibl *= mix(vec3(1.0), shadowValue.rgb, specularAlphaG);\n                            #else\n                                vec2 shadowValue = computeIndirectShadow();\n                                slab_diffuse_ibl *= shadowValue.x;\n                                slab_glossy_ibl *= mix(pow(shadowValue.y, 4.0), shadowValue.x, specularAlphaG);\n                            #endif\n                        #endif\n                    #else\n                        slab_diffuse_ibl *= computeIndirectShadow().x;\n                    #endif\n                #endif\n            ":t.CUSTOM_FRAGMENT_BEFORE_FRAGCOLOR="\n                #ifdef RENDER_WITH_IBL_SHADOWS\n                    #ifdef COLORED_IBL_SHADOWS\n                        vec3 shadowValue = computeIndirectShadow();\n                        color.rgb *= toGammaSpace(shadowValue.rgb);\n                    #else\n                        vec2 shadowValue = computeIndirectShadow();\n                        color.rgb *= toGammaSpace(shadowValue.x);\n                    #endif\n                #endif\n            "),"vertex"===e?null:t}}I.Name="IBLShadowsPluginMaterial",(0,S.Cg)([(0,M.lK)()],I.prototype,"shadowOpacity",void 0),(0,S.Cg)([(0,M.lK)(),(0,M.$z)("_markAllSubMeshesAsTexturesDirty")],I.prototype,"isEnabled",void 0),(0,O.Y5)("BABYLON.IBLShadowsPluginMaterial",I);var A=t(2093);t(31249),t(5961);class G extends v.m{resetAccumulation(){this._accumulationPass.reset=!0}get shadowOpacity(){return this._shadowOpacity}set shadowOpacity(e){this._shadowOpacity=e,this._setPluginParameters()}get coloredShadows(){return this._coloredShadows}set coloredShadows(e){this._coloredShadows=e,this._voxelTracingPass.coloredShadows=e,this._setPluginParameters()}get shadowRenderSizeFactor(){return this._renderSizeFactor}set shadowRenderSizeFactor(e){this._renderSizeFactor=Math.max(Math.min(e,1),0),this._voxelTracingPass.resize(e),this._spatialBlurPass.resize(e),this._accumulationPass.resize(e),this._setPluginParameters()}get voxelShadowOpacity(){return this._voxelTracingPass?.voxelShadowOpacity}set voxelShadowOpacity(e){this._voxelTracingPass&&(this._voxelTracingPass.voxelShadowOpacity=e)}get ssShadowOpacity(){return this._voxelTracingPass?.ssShadowOpacity}set ssShadowOpacity(e){this._voxelTracingPass&&(this._voxelTracingPass.ssShadowOpacity=e)}get ssShadowSampleCount(){return this._voxelTracingPass?.sssSamples}set ssShadowSampleCount(e){this._voxelTracingPass&&(this._voxelTracingPass.sssSamples=e)}get ssShadowStride(){return this._voxelTracingPass?.sssStride}set ssShadowStride(e){this._voxelTracingPass&&(this._voxelTracingPass.sssStride=e)}get ssShadowDistanceScale(){return this._sssMaxDistScale}set ssShadowDistanceScale(e){this._sssMaxDistScale=e,this._updateSsShadowParams()}get ssShadowThicknessScale(){return this._sssThicknessScale}set ssShadowThicknessScale(e){this._sssThicknessScale=e,this._updateSsShadowParams()}_getVoxelGridTexture(){const e=this._voxelRenderer?.getVoxelGrid();return e&&e.isReady()?e:this._dummyTexture3d}_getNoiseTexture(){const e=this._noiseTexture;return e&&e.isReady()?e:this._dummyTexture2d}_getVoxelTracingTexture(){const e=this._voxelTracingPass?.getOutputTexture();return e&&e.isReady()?e:this._dummyTexture2d}_getSpatialBlurTexture(){const e=this._spatialBlurPass.getOutputTexture();return e&&e.isReady()?e:this._dummyTexture2d}_getAccumulatedTexture(){const e=this._accumulationPass?.getOutputTexture();return e&&e.isReady()?e:this._dummyTexture2d}get gbufferDebugEnabled(){return this._gbufferDebugEnabled}set gbufferDebugEnabled(e){!e||this.allowDebugPasses?(this._gbufferDebugEnabled=e,e?this._enableEffect(this._getGBufferDebugPass().name,this.cameras):this._disableEffect(this._getGBufferDebugPass().name,this.cameras)):n.V.Warn("Can't enable G-Buffer debug view without setting allowDebugPasses to true.")}get cdfDebugEnabled(){return!!this.scene.iblCdfGenerator&&this.scene.iblCdfGenerator.debugEnabled}set cdfDebugEnabled(e){this.scene.iblCdfGenerator&&(!e||this.allowDebugPasses?e!==this.scene.iblCdfGenerator.debugEnabled&&(this.scene.iblCdfGenerator.debugEnabled=e,e?this._enableEffect(this.scene.iblCdfGenerator.debugPassName,this.cameras):this._disableEffect(this.scene.iblCdfGenerator.debugPassName,this.cameras)):n.V.Warn("Can't enable importance sampling debug view without setting allowDebugPasses to true."))}get voxelDebugEnabled(){return this._voxelRenderer?.voxelDebugEnabled}set voxelDebugEnabled(e){this._voxelRenderer&&(!e||this.allowDebugPasses?(this._voxelRenderer.voxelDebugEnabled=e,e?this._enableEffect(this._voxelRenderer.debugPassName,this.cameras):this._disableEffect(this._voxelRenderer.debugPassName,this.cameras)):n.V.Warn("Can't enable voxel debug view without setting allowDebugPasses to true."))}get voxelDebugAxis(){return this._voxelRenderer?.voxelDebugAxis}set voxelDebugAxis(e){this._voxelRenderer&&(this._voxelRenderer.voxelDebugAxis=e)}set voxelDebugDisplayMip(e){this._voxelRenderer&&this._voxelRenderer.setDebugMipNumber(e)}get voxelTracingDebugEnabled(){return this._voxelTracingPass?.debugEnabled}set voxelTracingDebugEnabled(e){this._voxelTracingPass&&(!e||this.allowDebugPasses?e!==this._voxelTracingPass.debugEnabled&&(this._voxelTracingPass.debugEnabled=e,e?this._enableEffect(this._voxelTracingPass.debugPassName,this.cameras):this._disableEffect(this._voxelTracingPass.debugPassName,this.cameras)):n.V.Warn("Can't enable voxel tracing debug view without setting allowDebugPasses to true."))}get spatialBlurPassDebugEnabled(){return this._spatialBlurPass.debugEnabled}set spatialBlurPassDebugEnabled(e){this._spatialBlurPass&&(!e||this.allowDebugPasses?e!==this._spatialBlurPass.debugEnabled&&(this._spatialBlurPass.debugEnabled=e,e?this._enableEffect(this._spatialBlurPass.debugPassName,this.cameras):this._disableEffect(this._spatialBlurPass.debugPassName,this.cameras)):n.V.Warn("Can't enable spatial blur debug view without setting allowDebugPasses to true."))}get accumulationPassDebugEnabled(){return this._accumulationPass?.debugEnabled}set accumulationPassDebugEnabled(e){this._accumulationPass&&(!e||this.allowDebugPasses?e!==this._accumulationPass.debugEnabled&&(this._accumulationPass.debugEnabled=e,e?this._enableEffect(this._accumulationPass.debugPassName,this.cameras):this._disableEffect(this._accumulationPass.debugPassName,this.cameras)):n.V.Warn("Can't enable accumulation pass debug view without setting allowDebugPasses to true."))}addShadowCastingMesh(e){if(Array.isArray(e))for(const s of e)s&&-1===this._shadowCastingMeshes.indexOf(s)&&this._shadowCastingMeshes.push(s);else e&&-1===this._shadowCastingMeshes.indexOf(e)&&this._shadowCastingMeshes.push(e)}removeShadowCastingMesh(e){if(Array.isArray(e))for(const s of e){const e=this._shadowCastingMeshes.indexOf(s);-1!==e&&this._shadowCastingMeshes.splice(e,1)}else{const s=this._shadowCastingMeshes.indexOf(e);-1!==s&&this._shadowCastingMeshes.splice(s,1)}}clearShadowCastingMeshes(){this._shadowCastingMeshes.length=0}get resolutionExp(){return this._voxelRenderer.voxelResolutionExp}set resolutionExp(e){e!==this._voxelRenderer.voxelResolutionExp&&(this._voxelRenderer.isVoxelizationInProgress()?n.V.Warn("Can't change the resolution of the voxel grid while voxelization is in progress."):(this._voxelRenderer.voxelResolutionExp=Math.max(1,Math.min(e,8)),this._accumulationPass.reset=!0))}get sampleDirections(){return this._voxelTracingPass?.sampleDirections}set sampleDirections(e){this._voxelTracingPass&&(this._voxelTracingPass.sampleDirections=e)}get shadowRemanence(){return this._accumulationPass?.remanence}set shadowRemanence(e){this._accumulationPass&&(this._accumulationPass.remanence=e)}get envRotation(){return this._voxelTracingPass?.envRotation}set envRotation(e){this._voxelTracingPass&&(this._voxelTracingPass.envRotation=e,this._accumulationPass.reset=!0)}get allowDebugPasses(){return this._allowDebugPasses}set allowDebugPasses(e){this._allowDebugPasses!==e&&(this._allowDebugPasses=e,e&&this.scene.iblCdfGenerator?this.scene.iblCdfGenerator.isReady()?this._createDebugPasses():this.scene.iblCdfGenerator.onGeneratedObservable.addOnce(()=>{this._createDebugPasses()}):this._disposeDebugPasses())}static get IsSupported(){const e=i.q.LastCreatedEngine;return!!e&&e._features.supportIBLShadows}toggleShadow(e){this._enabled=e,this._voxelTracingPass.enabled=e,this._spatialBlurPass.enabled=e,this._accumulationPass.enabled=e;for(const s of this._materialsWithRenderPlugin)if(s.pluginManager){s.pluginManager.getPlugin(I.Name).isEnabled=e}this._setPluginParameters()}updateVoxelization(){0!==this._shadowCastingMeshes.length?(this._voxelRenderer.updateVoxelGrid(this._shadowCastingMeshes),this._voxelRenderer.onVoxelizationCompleteObservable.addOnce(()=>{this.onVoxelizationCompleteObservable.notifyObservers()}),this._updateSsShadowParams()):n.V.Warn("IBL Shadows: updateVoxelization called with no shadow-casting meshes to voxelize.")}updateSceneBounds(){const e={min:new a.Pq(Number.MAX_VALUE,Number.MAX_VALUE,Number.MAX_VALUE),max:new a.Pq(-Number.MAX_VALUE,-Number.MAX_VALUE,-Number.MAX_VALUE)};for(const s of this._shadowCastingMeshes){const t=s.getHierarchyBoundingVectors(!0);e.min=a.Pq.Minimize(e.min,t.min),e.max=a.Pq.Maximize(e.max,t.max)}const s=e.max.subtract(e.min);if(this.voxelGridSize=Math.max(s.x,s.y,s.z),0===this._shadowCastingMeshes.length||!isFinite(this.voxelGridSize)||0===this.voxelGridSize)return n.V.Warn("IBL Shadows: Scene size is invalid. Can't update bounds."),void(this.voxelGridSize=1);const t=this.voxelGridSize/2,i=e.max.add(e.min).multiplyByFloats(-.5,-.5,-.5),r=a.uq.Compose(new a.Pq(1/t,1/t,1/t),new a.PT,new a.Pq(0,0,0));a.uq.Compose(new a.Pq(1,1,1),new a.PT,i).multiplyToRef(r,r),this._voxelTracingPass.setWorldScaleMatrix(r),this._voxelRenderer.setWorldScaleMatrix(r),this._spatialBlurPass.setWorldScale(2*t),this._updateSsShadowParams()}constructor(e,s,t={},i){super(s.getEngine(),e),this._allowDebugPasses=!1,this._debugPasses=[],this._shadowCastingMeshes=[],this._shadowOpacity=.8,this._enabled=!0,this._coloredShadows=!1,this._materialsWithRenderPlugin=[],this.onShadowTextureReadyObservable=new _.cP,this.onNewIblReadyObservable=new _.cP,this.onVoxelizationCompleteObservable=new _.cP,this.voxelGridSize=1,this._renderSizeFactor=1,this._gbufferDebugEnabled=!1,this._gBufferDebugSizeParams=new a.IU(0,0,0,0),this.scene=s,this._cameras=i||[s.activeCamera];const h=new Uint8Array([0,0,0,255]);this._dummyTexture2d=new R.I(h,1,1,o.Engine.TEXTUREFORMAT_RGBA,s,!1),this._dummyTexture3d=new w(h,1,1,1,o.Engine.TEXTUREFORMAT_RGBA,s,!1);const l={};l[p.I.SCREENSPACE_DEPTH_TEXTURE_TYPE]={textureFormat:6,textureType:1},l[p.I.VELOCITY_LINEAR_TEXTURE_TYPE]={textureFormat:7,textureType:2},l[p.I.POSITION_TEXTURE_TYPE]={textureFormat:5,textureType:2},l[p.I.NORMAL_TEXTURE_TYPE]={textureFormat:5,textureType:2};const d=s.enableGeometryBufferRenderer(void 0,14,l);d?(this._geometryBufferRenderer=d,this._geometryBufferRenderer.enableScreenspaceDepth=!0,this._geometryBufferRenderer.enableVelocityLinear=!0,this._geometryBufferRenderer.enablePosition=!0,this._geometryBufferRenderer.enableNormal=!0,this._geometryBufferRenderer.generateNormalsInWorldSpace=!0,this.scene.enableIblCdfGenerator(),this.shadowOpacity=t.shadowOpacity||.8,this._voxelRenderer=new f(this.scene,this,t?t.resolutionExp:6,void 0===t.triPlanarVoxelization||t.triPlanarVoxelization),this._voxelTracingPass=new b(this.scene,this),this._spatialBlurPass=new m(this.scene,this),this._accumulationPass=new P(this.scene,this),this._accumulationPass.onReadyObservable.addOnce(()=>{this.onShadowTextureReadyObservable.notifyObservers()}),this.sampleDirections=t.sampleDirections||2,this.voxelShadowOpacity=t.voxelShadowOpacity??1,this.envRotation=t.envRotation??0,this.shadowRenderSizeFactor=t.shadowRenderSizeFactor||1,this.ssShadowOpacity=void 0===t.ssShadowsEnabled||t.ssShadowsEnabled?1:0,this.ssShadowDistanceScale=t.ssShadowDistanceScale||1.25,this.ssShadowSampleCount=t.ssShadowSampleCount||16,this.ssShadowStride=t.ssShadowStride||8,this.ssShadowThicknessScale=t.ssShadowThicknessScale||1,this.shadowRemanence=t.shadowRemanence??.75,this._noiseTexture=new r.g("https://assets.babylonjs.com/textures/blue_noise/blue_noise_rgb.png",this.scene,!1,!0,1),s.postProcessRenderPipelineManager.addPipeline(this),this.scene.onActiveCameraChanged.add(this._listenForCameraChanges.bind(this)),this.scene.onBeforeRenderObservable.add(this._updateBeforeRender.bind(this)),this._listenForCameraChanges(),this.scene.getEngine().onResizeObservable.add(this._handleResize.bind(this)),this.scene.iblCdfGenerator&&this.scene.iblCdfGenerator.onGeneratedObservable.add(()=>{this._setPluginParameters(),this.onNewIblReadyObservable.notifyObservers()})):n.V.Error("Geometry buffer renderer is required for IBL shadows to work.")}_handleResize(){this._voxelRenderer.resize(),this._voxelTracingPass.resize(this.shadowRenderSizeFactor),this._spatialBlurPass.resize(this.shadowRenderSizeFactor),this._accumulationPass.resize(this.shadowRenderSizeFactor),this._setPluginParameters()}_getGBufferDebugPass(){if(this._gbufferDebugPass)return this._gbufferDebugPass;const e=this.engine.isWebGPU,s={width:this.scene.getEngine().getRenderWidth(),height:this.scene.getEngine().getRenderHeight(),samplingMode:1,engine:this.scene.getEngine(),textureType:0,textureFormat:5,uniforms:["sizeParams"],samplers:["depthSampler","normalSampler","positionSampler","velocitySampler"],reusable:!1,shaderLanguage:e?1:0,extraInitializations:(e,s)=>{e?s.push(t.e(9533).then(t.bind(t,29533))):s.push(t.e(5634).then(t.bind(t,95634)))}};return this._gbufferDebugPass=new c.w("iblShadowGBufferDebug","iblShadowGBufferDebug",s),this.engine.isWebGPU&&(this._gbufferDebugPass.samples=this.engine.currentSampleCount??1),this._gbufferDebugPass.autoClear=!1,this._gbufferDebugPass.onApplyObservable.add(e=>{const s=this._geometryBufferRenderer.getTextureIndex(p.I.SCREENSPACE_DEPTH_TEXTURE_TYPE);e.setTexture("depthSampler",this._geometryBufferRenderer.getGBuffer().textures[s]);const t=this._geometryBufferRenderer.getTextureIndex(p.I.NORMAL_TEXTURE_TYPE);e.setTexture("normalSampler",this._geometryBufferRenderer.getGBuffer().textures[t]);const i=this._geometryBufferRenderer.getTextureIndex(p.I.POSITION_TEXTURE_TYPE);e.setTexture("positionSampler",this._geometryBufferRenderer.getGBuffer().textures[i]);const a=this._geometryBufferRenderer.getTextureIndex(p.I.VELOCITY_LINEAR_TEXTURE_TYPE);e.setTexture("velocitySampler",this._geometryBufferRenderer.getGBuffer().textures[a]),e.setVector4("sizeParams",this._gBufferDebugSizeParams),this.scene.activeCamera&&e.setFloat("maxDepth",this.scene.activeCamera.maxZ)}),this._gbufferDebugPass}_createDebugPasses(){this.scene.iblCdfGenerator?this._debugPasses=[{pass:this.scene.iblCdfGenerator.getDebugPassPP(),enabled:this.cdfDebugEnabled}]:this._debugPasses=[],this._debugPasses.push({pass:this._voxelRenderer.getDebugPassPP(),enabled:this.voxelDebugEnabled},{pass:this._voxelTracingPass.getDebugPassPP(),enabled:this.voxelTracingDebugEnabled},{pass:this._spatialBlurPass.getDebugPassPP(),enabled:this.spatialBlurPassDebugEnabled},{pass:this._accumulationPass.getDebugPassPP(),enabled:this.accumulationPassDebugEnabled},{pass:this._getGBufferDebugPass(),enabled:this.gbufferDebugEnabled});for(let e=0;e<this._debugPasses.length;e++)this._debugPasses[e].pass&&this.addEffect(new T.l(this.scene.getEngine(),this._debugPasses[e].pass.name,()=>this._debugPasses[e].pass,!0));const e=this.cameras.slice();this.scene.postProcessRenderPipelineManager.detachCamerasFromRenderPipeline(this.name,this.cameras),this.scene.postProcessRenderPipelineManager.attachCamerasToRenderPipeline(this.name,e);for(let e=0;e<this._debugPasses.length;e++)this._debugPasses[e].pass&&(this._debugPasses[e].enabled?this._enableEffect(this._debugPasses[e].pass.name,this.cameras):this._disableEffect(this._debugPasses[e].pass.name,this.cameras))}_disposeEffectPasses(){this.scene.postProcessRenderPipelineManager.detachCamerasFromRenderPipeline(this.name,this.cameras),this._disposeDebugPasses(),this._reset()}_disposeDebugPasses(){for(let e=0;e<this._debugPasses.length;e++)this._disableEffect(this._debugPasses[e].pass.name,this.cameras),this._debugPasses[e].pass.dispose();this._debugPasses=[]}_updateDebugPasses(){let e=0;this._gbufferDebugEnabled&&e++,this.cdfDebugEnabled&&e++,this.voxelDebugEnabled&&e++,this.voxelTracingDebugEnabled&&e++,this.spatialBlurPassDebugEnabled&&e++,this.accumulationPassDebugEnabled&&e++;const s=Math.ceil(Math.sqrt(e)),t=Math.ceil(e/s),i=1/t,a=1/s;let r=0,n=0;this.gbufferDebugEnabled&&(this._gBufferDebugSizeParams.set(r,n,t,s),r-=i,r<=-1&&(r=0,n-=a)),this.cdfDebugEnabled&&this.scene.iblCdfGenerator&&(this.scene.iblCdfGenerator.setDebugDisplayParams(r,n,t,s),r-=i,r<=-1&&(r=0,n-=a)),this.voxelDebugEnabled&&(this._voxelRenderer.setDebugDisplayParams(r,n,t,s),r-=i,r<=-1&&(r=0,n-=a)),this.voxelTracingDebugEnabled&&(this._voxelTracingPass.setDebugDisplayParams(r,n,t,s),r-=i,r<=-1&&(r=0,n-=a)),this.spatialBlurPassDebugEnabled&&(this._spatialBlurPass.setDebugDisplayParams(r,n,t,s),r-=i,r<=-1&&(r=0,n-=a)),this.accumulationPassDebugEnabled&&(this._accumulationPass.setDebugDisplayParams(r,n,t,s),r-=i,r<=-1&&(r=0,n-=a))}_updateSsShadowParams(){this._voxelTracingPass.sssMaxDist=this._sssMaxDistScale*this.voxelGridSize/(1<<this.resolutionExp),this._voxelTracingPass.sssThickness=.005*this._sssThicknessScale*this.voxelGridSize}addShadowReceivingMaterial(e){if(e)if(Array.isArray(e))for(const s of e)this._addShadowSupportToMaterial(s);else this._addShadowSupportToMaterial(e);else for(const e of this.scene.materials)this._addShadowSupportToMaterial(e)}removeShadowReceivingMaterial(e){if(Array.isArray(e))for(const s of e){const e=this._materialsWithRenderPlugin.indexOf(s);if(-1!==e){this._materialsWithRenderPlugin.splice(e,1);const t=s.pluginManager?.getPlugin(I.Name);t.isEnabled=!1}}else{const s=this._materialsWithRenderPlugin.indexOf(e);if(-1!==s){this._materialsWithRenderPlugin.splice(s,1);e.pluginManager.getPlugin(I.Name).isEnabled=!1}}}clearShadowReceivingMaterials(){for(const e of this._materialsWithRenderPlugin){const s=e.pluginManager?.getPlugin(I.Name);s&&(s.isEnabled=!1)}this._materialsWithRenderPlugin.length=0}_addShadowSupportToMaterial(e){if(!(e instanceof D.d||e instanceof A.F||e instanceof C.OpenPBRMaterial))return;let s=e.pluginManager?.getPlugin(I.Name);s||(s=new I(e)),-1===this._materialsWithRenderPlugin.indexOf(e)&&(this._enabled&&(s.iblShadowsTexture=this._getAccumulatedTexture().getInternalTexture(),s.shadowOpacity=this.shadowOpacity),s.isEnabled=this._enabled,s.isColored=this._coloredShadows,this._materialsWithRenderPlugin.push(e))}_setPluginParameters(){if(this._enabled)for(const e of this._materialsWithRenderPlugin)if(e.pluginManager){const s=e.pluginManager.getPlugin(I.Name);s.iblShadowsTexture=this._getAccumulatedTexture().getInternalTexture(),s.shadowOpacity=this.shadowOpacity,s.isColored=this._coloredShadows}}_updateBeforeRender(){this._updateDebugPasses()}_listenForCameraChanges(){this.scene.activeCamera?.onViewMatrixChangedObservable.add(()=>{this._accumulationPass.isMoving=!0})}isReady(){return this._noiseTexture.isReady()&&this._voxelRenderer.isReady()&&this.scene.iblCdfGenerator&&this.scene.iblCdfGenerator.isReady()&&(!this._voxelTracingPass||this._voxelTracingPass.isReady())&&(!this._spatialBlurPass||this._spatialBlurPass.isReady())&&(!this._accumulationPass||this._accumulationPass.isReady())}getClassName(){return"IBLShadowsRenderPipeline"}dispose(){const e=this._materialsWithRenderPlugin.splice(0);for(const s of e)this.removeShadowReceivingMaterial(s);this._disposeEffectPasses(),this._noiseTexture.dispose(),this._voxelRenderer.dispose(),this._voxelTracingPass.dispose(),this._spatialBlurPass.dispose(),this._accumulationPass.dispose(),this._dummyTexture2d.dispose(),this._dummyTexture3d.dispose(),this.onNewIblReadyObservable.clear(),this.onShadowTextureReadyObservable.clear(),this.onVoxelizationCompleteObservable.clear(),super.dispose()}}}}]);