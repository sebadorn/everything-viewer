"use strict";(self.webpackChunkeverything_viewer=self.webpackChunkeverything_viewer||[]).push([[4256],{60531:(e,a,r)=>{r.d(a,{DICOMParser:()=>o});var t=r(62845),i=r(92507);class o extends t.V{static numInstances=0;constructor(e){super(e,!!e.dir),this.file=e.dir||e.file,e.fileList&&(this.entries=e.fileList),this._fileManagerIds=[],o.numInstances++}async _loadFromDicomdirFile(e){const a=await e.arrayBuffer(),t=(await Promise.all([r.e(5915),r.e(4995)]).then(r.t.bind(r,35915,23))).parseDicom(new Uint8Array(a),{TransferSyntaxUID:"1.2.840.10008.1.2"}).elements.x00041220;return t&&Array.isArray(t.items)||console.error("[DICOMParser._parseHandlerDir] Record is either not set or has no entries.",t),t}async _parseHandlerDir(){const e=this.entries,a=e.find(e=>e.isFile&&"dicomdir"===e.name.toLowerCase());return a?new Promise((e,r)=>{a.file(async a=>{const r=await this._loadFromDicomdirFile(a);e(r)},e=>{console.error("[DICOMParser._parseHandlerDir]",e),r(e)})}):e}async addAndLoadFile(e){const a=this.wadouri.fileManager.add(e);return this._fileManagerIds.push(a),await this.wadouri.loadImage(a).promise}destroy(){if(1===o.numInstances){console.log("[DICOMParser.destroy] Purging cornerstone caches.");try{0===i.NIFTIParser.numInstances&&this.cache.purgeCache(),this.wadouri.dataSetCacheManager.purge(),this.wadouri.fileManager.purge()}catch(e){console.error("[DICOMParser.destroy]",e)}}o.numInstances--}static getModalityName(e){if(!e)return e;e=String(e).toUpperCase();let a=o.MODALITY_MAP[e];return a&&(a+=` [${e}]`),a||e}static getPregnancyStatus(e){if(isNaN(Number(e)))return e;return["not pregnant","possibly pregnant","definitely pregnant","unknown"][(e=Number(e))+1]||e}getFilepathsFromRecord(e){const a=[];return e.items.forEach(e=>{let r=e.dataSet.string("x00041500");r&&(r=r.replace(/\\/g,"/"),a.push(r))}),a}loadDICOMDIRFiles(e,a){const r=[];if(Array.isArray(e)){const t=i=>{if(i>=e.length)return void a(null,r);e[i].file(async e=>{const a=await this.addAndLoadFile(e);r.push(a),t(i+1)})};t(0)}else{const t=this.getFilepathsFromRecord(e),i=e=>{if(e>=t.length)return void a(null,r);const o=t[e];this.file.getFile(o,{},a=>{a.file(async a=>{const t=await this.addAndLoadFile(a);r.push(t),i(e+1)})},a=>{console.error(`[DICOMParser.loadDICOMDIRFiles] getFile "${o}": `+a.message),i(e+1)})};i(0)}}async parse(){const e=await Promise.all([r.e(764),r.e(2388),r.e(3537),r.e(8483)]).then(r.bind(r,63537)),a=await Promise.all([r.e(764),r.e(1612),r.e(2388),r.e(5915),r.e(8728),r.e(8146)]).then(r.bind(r,88728));if(e.init(),a.init(),this.cache=e.cache,this.wadouri=a.wadouri,this.isDir)return await this._parseHandlerDir();if("dicomdir"===this.file.name.toLowerCase()){const e=await this._loadFromDicomdirFile(this.file);return this.getFilepathsFromRecord(e)}return await this.addAndLoadFile(this.file)}}o.MODALITY_MAP={AR:"Autorefraction",AS:"Angioscopy",ASMT:"Content Assessment Results",AU:"Audio",BDUS:"Bone Densitometry (ultrasound)",BI:"Biomagnetic imaging",BMD:"Bone Densitometry (X-Ray)",CD:"Color flow Doppler",CF:"Cinefluorography",CP:"Colposcopy",CR:"Computed Radiography",CS:"Cystoscopy",CT:"Computed Tomography",DD:"Duplex Doppler",DF:"Digital fluoroscopy",DG:"Diaphanography",DM:"Digital microscopy",DOC:"Document",DS:"Digital Subtraction Angiography",DX:"Digital Radiography",EC:"Echocardiography",ECG:"Electrocardiography",EPS:"Cardiac Electrophysiology",ES:"Endoscopy",FA:"Fluorescein angiography",FID:"Fiducials",FS:"Fundoscopy",GM:"General Microscopy",HC:"Hard Copy",HD:"Hemodynamic Waveform",IO:"Intra-Oral Radiography",IOL:"Intraocular Lens Data",IVOCT:"Intravascular Optical Coherence Tomography",IVUS:"Intravascular Ultrasound",KER:"Keratometry",KO:"Key Object Selection",LEN:"Lensometry",LP:"Laparoscopy",LS:"Laser surface scan",MA:"Magnetic resonance angiography",MG:"Mammography",MR:"Magnetic Resonance",MS:"Magnetic resonance spectroscopy",NM:"Nuclear Medicine",OAM:"Ophthalmic Axial Measurements",OCT:"Optical Coherence Tomography (non-Ophthalmic)",OP:"Ophthalmic Photography",OPM:"Ophthalmic Mapping",OPR:"Ophthalmic Refraction",OPT:"Ophthalmic Tomography",OPV:"Ophthalmic Visual Field",OSS:"Optical Surface Scan",OT:"Other",PLAN:"Plan",PR:"Presentation State",PT:"Positron emission tomography (PET)",PX:"Panoramic X-Ray",REG:"Registration",RESP:"Respiratory Waveform",RF:"Radio Fluoroscopy",RG:"Radiographic imaging (conventional film/screen)",RTDOSE:"Radiotherapy Dose",RTIMAGE:"Radiotherapy Image",RTPLAN:"Radiotherapy Plan",RTRECORD:"RT Treatment Record",RTSTRUCT:"Radiotherapy Structure Set",RWV:"Real World Value Map",SEG:"Segmentation",SM:"Slide Microscopy",SMR:"Stereometric Relationship",SR:"SR Document",SRF:"Subjective Refraction",ST:"Single-photon emission computed tomography (SPECT)",STAIN:"Automated Slide Stainer",TG:"Thermography",US:"Ultrasound",VA:"Visual Acuity",VF:"Videofluorography",XA:"X-Ray Angiography",XC:"External-camera Photography"}},92507:(e,a,r)=>{r.d(a,{NIFTIParser:()=>o});var t=r(62845),i=r(60531);class o extends t.V{static numInstances=0;constructor(e){super(e,!!e.dir),this.file=e.dir||e.file,o.numInstances++}destroy(){if(URL.revokeObjectURL(this._objectURL),o.numInstances+i.DICOMParser.numInstances===1){console.log("[NIFTIParser.destroy] Purging cornerstone caches.");try{this.cache.purgeCache()}catch(e){console.error("[NIFTIParser.destroy]",e)}}o.numInstances--}async parse(){const e=await Promise.all([r.e(764),r.e(2388),r.e(3537),r.e(8483)]).then(r.bind(r,63537)),a=await Promise.all([r.e(764),r.e(5693)]).then(r.bind(r,59753));return e.init(),a.init(),e.imageLoader.registerImageLoader("nifti",a.cornerstoneNiftiImageLoader),this.cache=e.cache,this._objectURL=URL.createObjectURL(this.file),await a.createNiftiImageIdsAndCacheMetadata({url:this._objectURL})}}}}]);