"use strict";(self.webpackChunkeverything_viewer=self.webpackChunkeverything_viewer||[]).push([[1342,3486],{4962:(e,t,n)=>{n.d(t,{H:()=>a});var i=n(82781),r=n(75474);n(13486);class a extends r.RenderTargetTexture{get isSupported(){return this._engine?.getCaps().drawBuffersExtension??!1}get textures(){return this._textures}get count(){return this._count}get depthTexture(){return this._textures[this._textures.length-1]}set wrapU(e){if(this._textures)for(let t=0;t<this._textures.length;t++)this._textures[t].wrapU=e}set wrapV(e){if(this._textures)for(let t=0;t<this._textures.length;t++)this._textures[t].wrapV=e}constructor(e,t,n,i,r,a){const s=!(!r||!r.generateMipMaps)&&r.generateMipMaps,o=!(!r||!r.generateDepthTexture)&&r.generateDepthTexture,l=r&&r.depthTextureFormat?r.depthTextureFormat:15,u=!r||void 0===r.doNotChangeAspectRatio||r.doNotChangeAspectRatio,d=!(!r||!r.drawOnlyOnFirstAttachmentByDefault)&&r.drawOnlyOnFirstAttachmentByDefault;if(super(e,t,i,s,u,void 0,void 0,void 0,void 0,void 0,void 0,void 0,!0),!this.isSupported)return void this.dispose();this._textureNames=a;const f=[],c=[],h=[],T=[],m=[],p=[],_=[],E=[];this._initTypes(n,f,c,h,T,m,p,_,E,r);const v=!r||void 0===r.generateDepthBuffer||r.generateDepthBuffer,g=!(!r||void 0===r.generateStencilBuffer)&&r.generateStencilBuffer,x=r&&r.samples?r.samples:1;this._multiRenderTargetOptions={samplingModes:c,generateMipMaps:s,generateDepthBuffer:v,generateStencilBuffer:g,generateDepthTexture:o,depthTextureFormat:l,types:f,textureCount:n,useSRGBBuffers:h,samples:x,formats:T,targetTypes:m,faceIndex:p,layerIndex:_,layerCounts:E,labels:a,label:e},this._count=n,this._drawOnlyOnFirstAttachmentByDefault=d,n>0&&(this._createInternalTextures(),this._createTextures(a))}_initTypes(e,t,n,r,a,s,o,l,u,d){for(let f=0;f<e;f++)d&&d.types&&void 0!==d.types[f]?t.push(d.types[f]):t.push(d&&d.defaultType?d.defaultType:0),d&&d.samplingModes&&void 0!==d.samplingModes[f]?n.push(d.samplingModes[f]):n.push(i.g.BILINEAR_SAMPLINGMODE),d&&d.useSRGBBuffers&&void 0!==d.useSRGBBuffers[f]?r.push(d.useSRGBBuffers[f]):r.push(!1),d&&d.formats&&void 0!==d.formats[f]?a.push(d.formats[f]):a.push(5),d&&d.targetTypes&&void 0!==d.targetTypes[f]?s.push(d.targetTypes[f]):s.push(3553),d&&d.faceIndex&&void 0!==d.faceIndex[f]?o.push(d.faceIndex[f]):o.push(0),d&&d.layerIndex&&void 0!==d.layerIndex[f]?l.push(d.layerIndex[f]):l.push(0),d&&d.layerCounts&&void 0!==d.layerCounts[f]?u.push(d.layerCounts[f]):u.push(1)}_createInternaTextureIndexMapping(){const e={},t=[];if(!this._renderTarget)return t;const n=this._renderTarget.textures;for(let i=0;i<n.length;i++){const r=n[i];if(!r)continue;const a=e[r.uniqueId];void 0!==a?t[i]=a:e[r.uniqueId]=i}return t}_rebuild(e=!1,t=!1,n){if(this._count<1||e)return;const i=this._createInternaTextureIndexMapping();this.releaseInternalTextures(),this._createInternalTextures(),t&&(this._releaseTextures(),this._createTextures(n));const r=this._renderTarget.textures;for(let e=0;e<r.length;e++){const t=this._textures[e];void 0!==i[e]&&this._renderTarget.setTexture(r[i[e]],e),t._texture=r[e],t._texture&&(t._noMipmap=!t._texture.useMipMaps,t._useSRGBBuffer=t._texture._useSRGBBuffer)}1!==this.samples&&this._renderTarget.setSamples(this.samples,!this._drawOnlyOnFirstAttachmentByDefault,!0)}_createInternalTextures(){this._renderTarget=this._getEngine().createMultipleRenderTarget(this._size,this._multiRenderTargetOptions,!this._drawOnlyOnFirstAttachmentByDefault),this._texture=this._renderTarget.texture}_releaseTextures(){if(this._textures)for(let e=0;e<this._textures.length;e++)this._textures[e]._texture=null,this._textures[e].dispose()}_createTextures(e){const t=this._renderTarget.textures;this._textures=[];for(let n=0;n<t.length;n++){const r=new i.g(null,this.getScene());e?.[n]&&(r.name=e[n]),r._texture=t[n],r._texture&&(r._noMipmap=!r._texture.useMipMaps,r._useSRGBBuffer=r._texture._useSRGBBuffer),this._textures.push(r)}}setInternalTexture(e,t,n=!0){if(this.renderTarget&&(0===t&&(this._texture=e),this.renderTarget.setTexture(e,t,n),this.textures[t]||(this.textures[t]=new i.g(null,this.getScene()),this.textures[t].name=this._textureNames?.[t]??this.textures[t].name),this.textures[t]._texture=e,this.textures[t]._noMipmap=!e.useMipMaps,this.textures[t]._useSRGBBuffer=e._useSRGBBuffer,this._count=this.renderTarget.textures?this.renderTarget.textures.length:0,this._multiRenderTargetOptions.types&&(this._multiRenderTargetOptions.types[t]=e.type),this._multiRenderTargetOptions.samplingModes&&(this._multiRenderTargetOptions.samplingModes[t]=e.samplingMode),this._multiRenderTargetOptions.useSRGBBuffers&&(this._multiRenderTargetOptions.useSRGBBuffers[t]=e._useSRGBBuffer),this._multiRenderTargetOptions.targetTypes&&-1!==this._multiRenderTargetOptions.targetTypes[t])){let n=0;n=e.is2DArray?35866:e.isCube?34067:e.is3D?32879:3553,this._multiRenderTargetOptions.targetTypes[t]=n}}setLayerAndFaceIndex(e,t=-1,n=-1){this.textures[e]&&this.renderTarget&&(this._multiRenderTargetOptions.layerIndex&&(this._multiRenderTargetOptions.layerIndex[e]=t),this._multiRenderTargetOptions.faceIndex&&(this._multiRenderTargetOptions.faceIndex[e]=n),this.renderTarget.setLayerAndFaceIndex(e,t,n))}setLayerAndFaceIndices(e,t){this.renderTarget&&(this._multiRenderTargetOptions.layerIndex=e,this._multiRenderTargetOptions.faceIndex=t,this.renderTarget.setLayerAndFaceIndices(e,t))}get samples(){return this._samples}set samples(e){this._renderTarget?this._samples=this._renderTarget.setSamples(e):this._samples=e}resize(e){this._processSizeParameter(e),this._rebuild(!1,void 0,this._textureNames)}updateCount(e,t,n){this._multiRenderTargetOptions.textureCount=e,this._count=e;const i=[],r=[],a=[],s=[],o=[],l=[],u=[],d=[];this._textureNames=n,this._initTypes(e,i,r,a,s,o,l,u,d,t),this._multiRenderTargetOptions.types=i,this._multiRenderTargetOptions.samplingModes=r,this._multiRenderTargetOptions.useSRGBBuffers=a,this._multiRenderTargetOptions.formats=s,this._multiRenderTargetOptions.targetTypes=o,this._multiRenderTargetOptions.faceIndex=l,this._multiRenderTargetOptions.layerIndex=u,this._multiRenderTargetOptions.layerCounts=d,this._multiRenderTargetOptions.labels=n,this._rebuild(!1,!0,n)}_unbindFrameBuffer(e,t){this._renderTarget&&e.unBindMultiColorAttachmentFramebuffer(this._renderTarget,this.isCube,()=>{this.onAfterRenderObservable.notifyObservers(t)})}dispose(e=!1){this._releaseTextures(),e?this._texture=null:this.releaseInternalTextures(),super.dispose()}releaseInternalTextures(){const e=this._renderTarget?.textures;if(e){for(let t=e.length-1;t>=0;t--)this._textures[t]._texture=null;this._renderTarget?.dispose(),this._renderTarget=null}}}},6739:(e,t,n)=>{n.r(t),n.d(t,{geometryVertexShader:()=>d});var i=n(69610);n(69707),n(18959),n(27999),n(90738),n(1218);const r="geometryVertexDeclaration",a="uniform mat4 viewProjection;uniform mat4 view;";i.l.IncludesShadersStore[r]||(i.l.IncludesShadersStore[r]=a);n(28764);const s="geometryUboDeclaration",o="#include<sceneUboDeclaration>\n";i.l.IncludesShadersStore[s]||(i.l.IncludesShadersStore[s]=o);n(71636),n(48451),n(15060),n(3298),n(3361),n(65523),n(47314),n(19440);const l="geometryVertexShader",u="precision highp float;\n#include<bonesDeclaration>\n#include<bakedVertexAnimationDeclaration>\n#include<morphTargetsVertexGlobalDeclaration>\n#include<morphTargetsVertexDeclaration>[0..maxSimultaneousMorphTargets]\n#include<instancesDeclaration>\n#include<__decl__geometryVertex>\n#include<clipPlaneVertexDeclaration>\nattribute vec3 position;attribute vec3 normal;\n#ifdef NEED_UV\nvarying vec2 vUV;\n#ifdef ALPHATEST\nuniform mat4 diffuseMatrix;\n#endif\n#ifdef BUMP\nuniform mat4 bumpMatrix;varying vec2 vBumpUV;\n#endif\n#ifdef REFLECTIVITY\nuniform mat4 reflectivityMatrix;uniform mat4 albedoMatrix;varying vec2 vReflectivityUV;varying vec2 vAlbedoUV;\n#endif\n#ifdef METALLIC_TEXTURE\nvarying vec2 vMetallicUV;uniform mat4 metallicMatrix;\n#endif\n#ifdef ROUGHNESS_TEXTURE\nvarying vec2 vRoughnessUV;uniform mat4 roughnessMatrix;\n#endif\n#ifdef UV1\nattribute vec2 uv;\n#endif\n#ifdef UV2\nattribute vec2 uv2;\n#endif\n#endif\n#ifdef BUMP\nvarying mat4 vWorldView;\n#endif\n#ifdef BUMP\nvarying vec3 vNormalW;\n#else\nvarying vec3 vNormalV;\n#endif\nvarying vec4 vViewPos;\n#if defined(POSITION) || defined(BUMP)\nvarying vec3 vPositionW;\n#endif\n#if defined(VELOCITY) || defined(VELOCITY_LINEAR)\nuniform mat4 previousViewProjection;varying vec4 vCurrentPosition;varying vec4 vPreviousPosition;\n#endif\n#define CUSTOM_VERTEX_DEFINITIONS\nvoid main(void)\n{vec3 positionUpdated=position;vec3 normalUpdated=normal;\n#ifdef UV1\nvec2 uvUpdated=uv;\n#endif\n#ifdef UV2\nvec2 uv2Updated=uv2;\n#endif\n#include<morphTargetsVertexGlobal>\n#include<morphTargetsVertex>[0..maxSimultaneousMorphTargets]\n#include<instancesVertex>\n#if (defined(VELOCITY) || defined(VELOCITY_LINEAR)) && !defined(BONES_VELOCITY_ENABLED)\nvCurrentPosition=viewProjection*finalWorld*vec4(positionUpdated,1.0);vPreviousPosition=previousViewProjection*finalPreviousWorld*vec4(positionUpdated,1.0);\n#endif\n#include<bonesVertex>\n#include<bakedVertexAnimation>\nvec4 worldPos=vec4(finalWorld*vec4(positionUpdated,1.0));\n#ifdef BUMP\nvWorldView=view*finalWorld;mat3 normalWorld=mat3(finalWorld);vNormalW=normalize(normalWorld*normalUpdated);\n#else\n#ifdef NORMAL_WORLDSPACE\nvNormalV=normalize(vec3(finalWorld*vec4(normalUpdated,0.0)));\n#else\nvNormalV=normalize(vec3((view*finalWorld)*vec4(normalUpdated,0.0)));\n#endif\n#endif\nvViewPos=view*worldPos;\n#if (defined(VELOCITY) || defined(VELOCITY_LINEAR)) && defined(BONES_VELOCITY_ENABLED)\nvCurrentPosition=viewProjection*finalWorld*vec4(positionUpdated,1.0);\n#if NUM_BONE_INFLUENCERS>0\nmat4 previousInfluence;previousInfluence=mPreviousBones[int(matricesIndices[0])]*matricesWeights[0];\n#if NUM_BONE_INFLUENCERS>1\npreviousInfluence+=mPreviousBones[int(matricesIndices[1])]*matricesWeights[1];\n#endif\n#if NUM_BONE_INFLUENCERS>2\npreviousInfluence+=mPreviousBones[int(matricesIndices[2])]*matricesWeights[2];\n#endif\n#if NUM_BONE_INFLUENCERS>3\npreviousInfluence+=mPreviousBones[int(matricesIndices[3])]*matricesWeights[3];\n#endif\n#if NUM_BONE_INFLUENCERS>4\npreviousInfluence+=mPreviousBones[int(matricesIndicesExtra[0])]*matricesWeightsExtra[0];\n#endif\n#if NUM_BONE_INFLUENCERS>5\npreviousInfluence+=mPreviousBones[int(matricesIndicesExtra[1])]*matricesWeightsExtra[1];\n#endif\n#if NUM_BONE_INFLUENCERS>6\npreviousInfluence+=mPreviousBones[int(matricesIndicesExtra[2])]*matricesWeightsExtra[2];\n#endif\n#if NUM_BONE_INFLUENCERS>7\npreviousInfluence+=mPreviousBones[int(matricesIndicesExtra[3])]*matricesWeightsExtra[3];\n#endif\nvPreviousPosition=previousViewProjection*finalPreviousWorld*previousInfluence*vec4(positionUpdated,1.0);\n#else\nvPreviousPosition=previousViewProjection*finalPreviousWorld*vec4(positionUpdated,1.0);\n#endif\n#endif\n#if defined(POSITION) || defined(BUMP)\nvPositionW=worldPos.xyz/worldPos.w;\n#endif\ngl_Position=viewProjection*finalWorld*vec4(positionUpdated,1.0);\n#include<clipPlaneVertex>\n#ifdef NEED_UV\n#ifdef UV1\n#if defined(ALPHATEST) && defined(ALPHATEST_UV1)\nvUV=vec2(diffuseMatrix*vec4(uvUpdated,1.0,0.0));\n#else\nvUV=uvUpdated;\n#endif\n#ifdef BUMP_UV1\nvBumpUV=vec2(bumpMatrix*vec4(uvUpdated,1.0,0.0));\n#endif\n#ifdef REFLECTIVITY_UV1\nvReflectivityUV=vec2(reflectivityMatrix*vec4(uvUpdated,1.0,0.0));\n#else\n#ifdef METALLIC_UV1\nvMetallicUV=vec2(metallicMatrix*vec4(uvUpdated,1.0,0.0));\n#endif\n#ifdef ROUGHNESS_UV1\nvRoughnessUV=vec2(roughnessMatrix*vec4(uvUpdated,1.0,0.0));\n#endif\n#endif\n#ifdef ALBEDO_UV1\nvAlbedoUV=vec2(albedoMatrix*vec4(uvUpdated,1.0,0.0));\n#endif\n#endif\n#ifdef UV2\n#if defined(ALPHATEST) && defined(ALPHATEST_UV2)\nvUV=vec2(diffuseMatrix*vec4(uv2Updated,1.0,0.0));\n#else\nvUV=uv2Updated;\n#endif\n#ifdef BUMP_UV2\nvBumpUV=vec2(bumpMatrix*vec4(uv2Updated,1.0,0.0));\n#endif\n#ifdef REFLECTIVITY_UV2\nvReflectivityUV=vec2(reflectivityMatrix*vec4(uv2Updated,1.0,0.0));\n#else\n#ifdef METALLIC_UV2\nvMetallicUV=vec2(metallicMatrix*vec4(uv2Updated,1.0,0.0));\n#endif\n#ifdef ROUGHNESS_UV2\nvRoughnessUV=vec2(roughnessMatrix*vec4(uv2Updated,1.0,0.0));\n#endif\n#endif\n#ifdef ALBEDO_UV2\nvAlbedoUV=vec2(albedoMatrix*vec4(uv2Updated,1.0,0.0));\n#endif\n#endif\n#endif\n#include<bumpVertex>\n}\n";i.l.ShadersStore[l]||(i.l.ShadersStore[l]=u);const d={name:l,shader:u}},8269:(e,t,n)=>{var i=n(69610);n(63022);const r="bumpFragmentFunctions",a="#if defined(BUMP)\n#include<samplerFragmentDeclaration>(_DEFINENAME_,BUMP,_VARYINGNAME_,Bump,_SAMPLERNAME_,bump)\n#endif\n#if defined(DETAIL)\n#include<samplerFragmentDeclaration>(_DEFINENAME_,DETAIL,_VARYINGNAME_,Detail,_SAMPLERNAME_,detail)\n#endif\n#if defined(BUMP) && defined(PARALLAX)\nconst float minSamples=4.;const float maxSamples=15.;const int iMaxSamples=15;vec2 parallaxOcclusion(vec3 vViewDirCoT,vec3 vNormalCoT,vec2 texCoord,float parallaxScale) {float parallaxLimit=length(vViewDirCoT.xy)/vViewDirCoT.z;parallaxLimit*=parallaxScale;vec2 vOffsetDir=normalize(vViewDirCoT.xy);vec2 vMaxOffset=vOffsetDir*parallaxLimit;float numSamples=maxSamples+(dot(vViewDirCoT,vNormalCoT)*(minSamples-maxSamples));float stepSize=1.0/numSamples;float currRayHeight=1.0;vec2 vCurrOffset=vec2(0,0);vec2 vLastOffset=vec2(0,0);float lastSampledHeight=1.0;float currSampledHeight=1.0;bool keepWorking=true;for (int i=0; i<iMaxSamples; i++)\n{currSampledHeight=texture2D(bumpSampler,texCoord+vCurrOffset).w;if (!keepWorking)\n{}\nelse if (currSampledHeight>currRayHeight)\n{float delta1=currSampledHeight-currRayHeight;float delta2=(currRayHeight+stepSize)-lastSampledHeight;float ratio=delta1/(delta1+delta2);vCurrOffset=(ratio)* vLastOffset+(1.0-ratio)*vCurrOffset;keepWorking=false;}\nelse\n{currRayHeight-=stepSize;vLastOffset=vCurrOffset;\n#ifdef PARALLAX_RHS\nvCurrOffset-=stepSize*vMaxOffset;\n#else\nvCurrOffset+=stepSize*vMaxOffset;\n#endif\nlastSampledHeight=currSampledHeight;}}\nreturn vCurrOffset;}\nvec2 parallaxOffset(vec3 viewDir,float heightScale)\n{float height=texture2D(bumpSampler,vBumpUV).w;vec2 texCoordOffset=heightScale*viewDir.xy*height;\n#ifdef PARALLAX_RHS\nreturn texCoordOffset;\n#else\nreturn -texCoordOffset;\n#endif\n}\n#endif\n";i.l.IncludesShadersStore[r]||(i.l.IncludesShadersStore[r]=a)},13486:(e,t,n)=>{n.r(t);var i=n(90854),r=n(51137),a=n(77008);a.ThinEngine.prototype.restoreSingleAttachment=function(){const e=this._gl;this.bindAttachments([e.BACK])},a.ThinEngine.prototype.restoreSingleAttachmentForRenderTarget=function(){const e=this._gl;this.bindAttachments([e.COLOR_ATTACHMENT0])},a.ThinEngine.prototype.buildTextureLayout=function(e,t=!1){const n=this._gl,i=[];if(t)i.push(n.BACK);else for(let t=0;t<e.length;t++)e[t]?i.push(n["COLOR_ATTACHMENT"+t]):i.push(n.NONE);return i},a.ThinEngine.prototype.bindAttachments=function(e){this._gl.drawBuffers(e)},a.ThinEngine.prototype.unBindMultiColorAttachmentFramebuffer=function(e,t=!1,n){this._currentRenderTarget=null,e.disableAutomaticMSAAResolve||this.resolveMultiFramebuffer(e),t||this.generateMipMapsMultiFramebuffer(e),n&&(e._MSAAFramebuffer&&this._bindUnboundFramebuffer(e._framebuffer),n()),this._bindUnboundFramebuffer(null)},a.ThinEngine.prototype.createMultipleRenderTarget=function(e,t,n=!0){let a,s=!1,o=!0,l=!1,u=!1,d=1,f=1;let c=[],h=[],T=[],m=[],p=[],_=[],E=[],v=[],g=[],x=!1;const R=this._createHardwareRenderTargetWrapper(!0,!1,e);void 0!==t&&(s=void 0!==t.generateMipMaps&&t.generateMipMaps,o=void 0===t.generateDepthBuffer||t.generateDepthBuffer,l=void 0!==t.generateStencilBuffer&&t.generateStencilBuffer,u=void 0!==t.generateDepthTexture&&t.generateDepthTexture,d=t.textureCount??1,f=t.samples??f,c=t.types||c,h=t.samplingModes||h,T=t.useSRGBBuffers||T,m=t.formats||m,p=t.targetTypes||p,_=t.faceIndex||_,E=t.layerIndex||E,v=t.layerCounts||v,g=t.labels||g,x=t.dontCreateTextures??!1,this.webGLVersion>1&&(13===t.depthTextureFormat||17===t.depthTextureFormat||16===t.depthTextureFormat||14===t.depthTextureFormat||18===t.depthTextureFormat)&&(a=t.depthTextureFormat)),void 0===a&&(a=l?13:14);const b=this._gl,S=this._currentFramebuffer,M=b.createFramebuffer();this._bindUnboundFramebuffer(M);const I=e.width??e,A=e.height??e,N=[],L=[],O=this.webGLVersion>1&&(13===a||17===a||18===a);R.label=t?.label??"MultiRenderTargetWrapper",R._framebuffer=M,R._generateDepthBuffer=u||o,R._generateStencilBuffer=u?O:l,R._depthStencilBuffer=this._setupFramebufferDepthAttachments(R._generateStencilBuffer,R._generateDepthBuffer,I,A,1,a),R._attachments=L;for(let e=0;e<d;e++){let t=h[e]||3,n=c[e]||0,a=T[e]||false;const o=m[e]||5,l=p[e]||3553,u=v[e]??1;(1!==n||this._caps.textureFloatLinearFiltering)&&(2!==n||this._caps.textureHalfFloatLinearFiltering)||(t=1);const d=this._getSamplingParameters(t,s);1!==n||this._caps.textureFloat||(n=0,r.V.Warn("Float textures are not supported. Render target forced to TEXTURETYPE_UNSIGNED_BYTE type")),a=a&&this._caps.supportSRGBBuffers&&(this.webGLVersion>1||this.isWebGPU);const f=this.webGLVersion>1,_=b[f?"COLOR_ATTACHMENT"+e:"COLOR_ATTACHMENT"+e+"_WEBGL"];if(L.push(_),-1===l||x)continue;const E=new i.h(this,6);N[e]=E,b.activeTexture(b["TEXTURE"+e]),b.bindTexture(l,E._hardwareTexture.underlyingResource),b.texParameteri(l,b.TEXTURE_MAG_FILTER,d.mag),b.texParameteri(l,b.TEXTURE_MIN_FILTER,d.min),b.texParameteri(l,b.TEXTURE_WRAP_S,b.CLAMP_TO_EDGE),b.texParameteri(l,b.TEXTURE_WRAP_T,b.CLAMP_TO_EDGE);const S=this._getRGBABufferInternalSizedFormat(n,o,a),M=this._getInternalFormat(o),O=this._getWebGLTextureType(n);if(!f||35866!==l&&32879!==l)if(34067===l){for(let e=0;e<6;e++)b.texImage2D(b.TEXTURE_CUBE_MAP_POSITIVE_X+e,0,S,I,A,0,M,O,null);E.isCube=!0}else b.texImage2D(b.TEXTURE_2D,0,S,I,A,0,M,O,null);else 35866===l?E.is2DArray=!0:E.is3D=!0,E.baseDepth=E.depth=u,b.texImage3D(l,0,S,I,A,u,0,M,O,null);s&&b.generateMipmap(l),this._bindTextureDirectly(l,null),E.baseWidth=I,E.baseHeight=A,E.width=I,E.height=A,E.isReady=!0,E.samples=1,E.generateMipMaps=s,E.samplingMode=t,E.type=n,E._useSRGBBuffer=a,E.format=o,E.label=g[e]??R.label+"-Texture"+e,this._internalTexturesCache.push(E)}if(u&&this._caps.depthTextureExtension&&!x){const e=new i.h(this,14);let t=5,n=b.DEPTH_COMPONENT16,r=b.DEPTH_COMPONENT,o=b.UNSIGNED_SHORT,l=b.DEPTH_ATTACHMENT;this.webGLVersion<2?n=b.DEPTH_COMPONENT:14===a?(t=1,o=b.FLOAT,n=b.DEPTH_COMPONENT32F):18===a?(t=0,o=b.FLOAT_32_UNSIGNED_INT_24_8_REV,n=b.DEPTH32F_STENCIL8,r=b.DEPTH_STENCIL,l=b.DEPTH_STENCIL_ATTACHMENT):16===a?(t=0,o=b.UNSIGNED_INT,n=b.DEPTH_COMPONENT24,l=b.DEPTH_ATTACHMENT):13!==a&&17!==a||(t=12,o=b.UNSIGNED_INT_24_8,n=b.DEPTH24_STENCIL8,r=b.DEPTH_STENCIL,l=b.DEPTH_STENCIL_ATTACHMENT),this._bindTextureDirectly(b.TEXTURE_2D,e,!0),b.texParameteri(b.TEXTURE_2D,b.TEXTURE_MAG_FILTER,b.NEAREST),b.texParameteri(b.TEXTURE_2D,b.TEXTURE_MIN_FILTER,b.NEAREST),b.texParameteri(b.TEXTURE_2D,b.TEXTURE_WRAP_S,b.CLAMP_TO_EDGE),b.texParameteri(b.TEXTURE_2D,b.TEXTURE_WRAP_T,b.CLAMP_TO_EDGE),b.texImage2D(b.TEXTURE_2D,0,n,I,A,0,r,o,null),b.framebufferTexture2D(b.FRAMEBUFFER,l,b.TEXTURE_2D,e._hardwareTexture.underlyingResource,0),this._bindTextureDirectly(b.TEXTURE_2D,null),R._depthStencilTexture=e,R._depthStencilTextureWithStencil=O,e.baseWidth=I,e.baseHeight=A,e.width=I,e.height=A,e.isReady=!0,e.samples=1,e.generateMipMaps=s,e.samplingMode=1,e.format=a,e.type=t,e.label=R.label+"-DepthStencil",N[d]=e,this._internalTexturesCache.push(e)}if(R.setTextures(N),n&&b.drawBuffers(L),this._bindUnboundFramebuffer(S),R.setLayerAndFaceIndices(E,_),this.resetTextureCache(),x){if(f>1){const e=b.createFramebuffer();if(!e)throw new Error("Unable to create multi sampled framebuffer");R._samples=f,R._MSAAFramebuffer=e,d>0&&n&&(this._bindUnboundFramebuffer(e),b.drawBuffers(L),this._bindUnboundFramebuffer(S))}}else this.updateMultipleRenderTargetTextureSampleCount(R,f,n);return R},a.ThinEngine.prototype.updateMultipleRenderTargetTextureSampleCount=function(e,t,n=!0){if(this.webGLVersion<2||!e)return 1;if(e.samples===t)return t;const i=this._gl;t=Math.min(t,this.getCaps().maxMSAASamples),e._depthStencilBuffer&&(i.deleteRenderbuffer(e._depthStencilBuffer),e._depthStencilBuffer=null),e._MSAAFramebuffer&&(i.deleteFramebuffer(e._MSAAFramebuffer),e._MSAAFramebuffer=null);const r=e._attachments.length;for(let t=0;t<r;t++){const n=e.textures[t]._hardwareTexture;n?.releaseMSAARenderBuffers()}if(t>1&&"function"==typeof i.renderbufferStorageMultisample){const a=i.createFramebuffer();if(!a)throw new Error("Unable to create multi sampled framebuffer");e._MSAAFramebuffer=a,this._bindUnboundFramebuffer(a);const s=[];for(let n=0;n<r;n++){const r=e.textures[n],a=r._hardwareTexture,o=i[this.webGLVersion>1?"COLOR_ATTACHMENT"+n:"COLOR_ATTACHMENT"+n+"_WEBGL"],l=this._createRenderBuffer(r.width,r.height,t,-1,this._getRGBABufferInternalSizedFormat(r.type,r.format,r._useSRGBBuffer),o);if(!l)throw new Error("Unable to create multi sampled framebuffer");a.addMSAARenderBuffer(l),r.samples=t,s.push(o)}n&&i.drawBuffers(s)}else this._bindUnboundFramebuffer(e._framebuffer);const a=e._depthStencilTexture?e._depthStencilTexture.format:void 0;return e._depthStencilBuffer=this._setupFramebufferDepthAttachments(e._generateStencilBuffer,e._generateDepthBuffer,e.width,e.height,t,a),this._bindUnboundFramebuffer(null),e._samples=t,t},a.ThinEngine.prototype.generateMipMapsMultiFramebuffer=function(e){const t=e,n=this._gl;if(t.isMulti)for(let e=0;e<t._attachments.length;e++){const i=t.textures[e];!i?.generateMipMaps||i?.isCube||i?.is3D||(this._bindTextureDirectly(n.TEXTURE_2D,i,!0),n.generateMipmap(n.TEXTURE_2D),this._bindTextureDirectly(n.TEXTURE_2D,null))}},a.ThinEngine.prototype.resolveMultiFramebuffer=function(e){const t=e,n=this._gl;if(!t._MSAAFramebuffer||!t.isMulti)return;let i=t.resolveMSAAColors?n.COLOR_BUFFER_BIT:0;i|=t._generateDepthBuffer&&t.resolveMSAADepth?n.DEPTH_BUFFER_BIT:0,i|=t._generateStencilBuffer&&t.resolveMSAAStencil?n.STENCIL_BUFFER_BIT:0;const r=t._attachments,a=r.length;n.bindFramebuffer(n.READ_FRAMEBUFFER,t._MSAAFramebuffer),n.bindFramebuffer(n.DRAW_FRAMEBUFFER,t._framebuffer);for(let e=0;e<a;e++){const s=t.textures[e];for(let e=0;e<a;e++)r[e]=n.NONE;r[e]=n[this.webGLVersion>1?"COLOR_ATTACHMENT"+e:"COLOR_ATTACHMENT"+e+"_WEBGL"],n.readBuffer(r[e]),n.drawBuffers(r),n.blitFramebuffer(0,0,s.width,s.height,0,0,s.width,s.height,i,n.NEAREST)}for(let e=0;e<a;e++)r[e]=n[this.webGLVersion>1?"COLOR_ATTACHMENT"+e:"COLOR_ATTACHMENT"+e+"_WEBGL"];n.drawBuffers(r),n.bindFramebuffer(this._gl.FRAMEBUFFER,t._MSAAFramebuffer)}},17494:(e,t,n)=>{var i=n(69610);const r="bumpFragmentMainFunctions",a="#if defined(BUMP) || defined(CLEARCOAT_BUMP) || defined(ANISOTROPIC) || defined(DETAIL)\n#if defined(TANGENT) && defined(NORMAL) \nvarying mat3 vTBN;\n#endif\n#ifdef OBJECTSPACE_NORMALMAP\nuniform mat4 normalMatrix;\n#if defined(WEBGL2) || defined(WEBGPU)\nmat4 toNormalMatrix(mat4 wMatrix)\n{mat4 ret=inverse(wMatrix);ret=transpose(ret);ret[0][3]=0.;ret[1][3]=0.;ret[2][3]=0.;ret[3]=vec4(0.,0.,0.,1.);return ret;}\n#else\nmat4 toNormalMatrix(mat4 m)\n{float\na00=m[0][0],a01=m[0][1],a02=m[0][2],a03=m[0][3],\na10=m[1][0],a11=m[1][1],a12=m[1][2],a13=m[1][3],\na20=m[2][0],a21=m[2][1],a22=m[2][2],a23=m[2][3],\na30=m[3][0],a31=m[3][1],a32=m[3][2],a33=m[3][3],\nb00=a00*a11-a01*a10,\nb01=a00*a12-a02*a10,\nb02=a00*a13-a03*a10,\nb03=a01*a12-a02*a11,\nb04=a01*a13-a03*a11,\nb05=a02*a13-a03*a12,\nb06=a20*a31-a21*a30,\nb07=a20*a32-a22*a30,\nb08=a20*a33-a23*a30,\nb09=a21*a32-a22*a31,\nb10=a21*a33-a23*a31,\nb11=a22*a33-a23*a32,\ndet=b00*b11-b01*b10+b02*b09+b03*b08-b04*b07+b05*b06;mat4 mi=mat4(\na11*b11-a12*b10+a13*b09,\na02*b10-a01*b11-a03*b09,\na31*b05-a32*b04+a33*b03,\na22*b04-a21*b05-a23*b03,\na12*b08-a10*b11-a13*b07,\na00*b11-a02*b08+a03*b07,\na32*b02-a30*b05-a33*b01,\na20*b05-a22*b02+a23*b01,\na10*b10-a11*b08+a13*b06,\na01*b08-a00*b10-a03*b06,\na30*b04-a31*b02+a33*b00,\na21*b02-a20*b04-a23*b00,\na11*b07-a10*b09-a12*b06,\na00*b09-a01*b07+a02*b06,\na31*b01-a30*b03-a32*b00,\na20*b03-a21*b01+a22*b00)/det;return mat4(mi[0][0],mi[1][0],mi[2][0],mi[3][0],\nmi[0][1],mi[1][1],mi[2][1],mi[3][1],\nmi[0][2],mi[1][2],mi[2][2],mi[3][2],\nmi[0][3],mi[1][3],mi[2][3],mi[3][3]);}\n#endif\n#endif\nvec3 perturbNormalBase(mat3 cotangentFrame,vec3 normal,float scale)\n{\n#ifdef NORMALXYSCALE\nnormal=normalize(normal*vec3(scale,scale,1.0));\n#endif\nreturn normalize(cotangentFrame*normal);}\nvec3 perturbNormal(mat3 cotangentFrame,vec3 textureSample,float scale)\n{return perturbNormalBase(cotangentFrame,textureSample*2.0-1.0,scale);}\nmat3 cotangent_frame(vec3 normal,vec3 p,vec2 uv,vec2 tangentSpaceParams)\n{vec3 dp1=dFdx(p);vec3 dp2=dFdy(p);vec2 duv1=dFdx(uv);vec2 duv2=dFdy(uv);vec3 dp2perp=cross(dp2,normal);vec3 dp1perp=cross(normal,dp1);vec3 tangent=dp2perp*duv1.x+dp1perp*duv2.x;vec3 bitangent=dp2perp*duv1.y+dp1perp*duv2.y;tangent*=tangentSpaceParams.x;bitangent*=tangentSpaceParams.y;float det=max(dot(tangent,tangent),dot(bitangent,bitangent));float invmax=det==0.0 ? 0.0 : inversesqrt(det);return mat3(tangent*invmax,bitangent*invmax,normal);}\n#endif\n";i.l.IncludesShadersStore[r]||(i.l.IncludesShadersStore[r]=a)},19440:(e,t,n)=>{var i=n(69610);const r="bumpVertex",a="#if defined(BUMP) || defined(PARALLAX) || defined(CLEARCOAT_BUMP) || defined(ANISOTROPIC)\n#if defined(TANGENT) && defined(NORMAL)\nvec3 tbnNormal=normalize(normalUpdated);vec3 tbnTangent=normalize(tangentUpdated.xyz);vec3 tbnBitangent=cross(tbnNormal,tbnTangent)*tangentUpdated.w;vTBN=mat3(finalWorld)*mat3(tbnTangent,tbnBitangent,tbnNormal);\n#endif\n#endif\n";i.l.IncludesShadersStore[r]||(i.l.IncludesShadersStore[r]=a)},27018:(e,t,n)=>{var i=n(69610);const r="bumpFragment",a="vec2 uvOffset=vec2(0.0,0.0);\n#if defined(BUMP) || defined(PARALLAX) || defined(DETAIL)\n#ifdef NORMALXYSCALE\nfloat normalScale=1.0;\n#elif defined(BUMP)\nfloat normalScale=vBumpInfos.y;\n#else\nfloat normalScale=1.0;\n#endif\n#if defined(TANGENT) && defined(NORMAL)\nmat3 TBN=vTBN;\n#elif defined(BUMP)\nvec2 TBNUV=gl_FrontFacing ? vBumpUV : -vBumpUV;mat3 TBN=cotangent_frame(normalW*normalScale,vPositionW,TBNUV,vTangentSpaceParams);\n#else\nvec2 TBNUV=gl_FrontFacing ? vDetailUV : -vDetailUV;mat3 TBN=cotangent_frame(normalW*normalScale,vPositionW,TBNUV,vec2(1.,1.));\n#endif\n#elif defined(ANISOTROPIC)\n#if defined(TANGENT) && defined(NORMAL)\nmat3 TBN=vTBN;\n#else\nvec2 TBNUV=gl_FrontFacing ? vMainUV1 : -vMainUV1;mat3 TBN=cotangent_frame(normalW,vPositionW,TBNUV,vec2(1.,1.));\n#endif\n#endif\n#ifdef PARALLAX\nmat3 invTBN=transposeMat3(TBN);\n#ifdef PARALLAXOCCLUSION\nuvOffset=parallaxOcclusion(invTBN*-viewDirectionW,invTBN*normalW,vBumpUV,vBumpInfos.z);\n#else\nuvOffset=parallaxOffset(invTBN*viewDirectionW,vBumpInfos.z);\n#endif\n#endif\n#ifdef DETAIL\nvec4 detailColor=texture2D(detailSampler,vDetailUV+uvOffset);vec2 detailNormalRG=detailColor.wy*2.0-1.0;float detailNormalB=sqrt(1.-saturate(dot(detailNormalRG,detailNormalRG)));vec3 detailNormal=vec3(detailNormalRG,detailNormalB);\n#endif\n#ifdef BUMP\n#ifdef OBJECTSPACE_NORMALMAP\n#define CUSTOM_FRAGMENT_BUMP_FRAGMENT\nnormalW=normalize(texture2D(bumpSampler,vBumpUV).xyz *2.0-1.0);normalW=normalize(mat3(normalMatrix)*normalW);\n#elif !defined(DETAIL)\nnormalW=perturbNormal(TBN,texture2D(bumpSampler,vBumpUV+uvOffset).xyz,vBumpInfos.y);\n#else\nvec3 bumpNormal=texture2D(bumpSampler,vBumpUV+uvOffset).xyz*2.0-1.0;\n#if DETAIL_NORMALBLENDMETHOD==0 \ndetailNormal.xy*=vDetailInfos.z;vec3 blendedNormal=normalize(vec3(bumpNormal.xy+detailNormal.xy,bumpNormal.z*detailNormal.z));\n#elif DETAIL_NORMALBLENDMETHOD==1 \ndetailNormal.xy*=vDetailInfos.z;bumpNormal+=vec3(0.0,0.0,1.0);detailNormal*=vec3(-1.0,-1.0,1.0);vec3 blendedNormal=bumpNormal*dot(bumpNormal,detailNormal)/bumpNormal.z-detailNormal;\n#endif\nnormalW=perturbNormalBase(TBN,blendedNormal,vBumpInfos.y);\n#endif\n#elif defined(DETAIL)\ndetailNormal.xy*=vDetailInfos.z;normalW=perturbNormalBase(TBN,detailNormal,vDetailInfos.z);\n#endif\n";i.l.IncludesShadersStore[r]||(i.l.IncludesShadersStore[r]=a)},28764:(e,t,n)=>{var i=n(69610);const r="sceneUboDeclaration",a="layout(std140,column_major) uniform;uniform Scene {mat4 viewProjection;\n#ifdef MULTIVIEW\nmat4 viewProjectionR;\n#endif \nmat4 view;mat4 projection;vec4 vEyePosition;};\n";i.l.IncludesShadersStore[r]||(i.l.IncludesShadersStore[r]=a)},41342:(e,t,n)=>{n.d(t,{I:()=>T});var i=n(79923),r=n(95616),a=n(82781),s=n(4962),o=n(26041),l=n(45503),u=n(28986),d=(n(75007),n(6739),n(10633)),f=n(30492),c=n(80467);n(13486);const h=["world","mBones","viewProjection","diffuseMatrix","view","previousWorld","previousViewProjection","mPreviousBones","bumpMatrix","reflectivityMatrix","albedoMatrix","reflectivityColor","albedoColor","metallic","glossiness","vTangentSpaceParams","vBumpInfos","morphTargetInfluences","morphTargetCount","morphTargetTextureInfo","morphTargetTextureIndices","boneTextureWidth"];(0,f.Ll)(h);class T{get normalsAreUnsigned(){return this._normalsAreUnsigned}_linkPrePassRenderer(e){this._linkedWithPrePass=!0,this._prePassRenderer=e,this._multiRenderTarget&&(this._multiRenderTarget.onClearObservable.clear(),this._multiRenderTarget.onClearObservable.add(()=>{}))}_unlinkPrePassRenderer(){this._linkedWithPrePass=!1,this._createRenderTargets()}_resetLayout(){this._enableDepth=!0,this._enableNormal=!0,this._enablePosition=!1,this._enableReflectivity=!1,this._enableVelocity=!1,this._enableVelocityLinear=!1,this._enableScreenspaceDepth=!1,this._attachmentsFromPrePass=[]}_forceTextureType(e,t){e===T.POSITION_TEXTURE_TYPE?(this._positionIndex=t,this._enablePosition=!0):e===T.VELOCITY_TEXTURE_TYPE?(this._velocityIndex=t,this._enableVelocity=!0):e===T.VELOCITY_LINEAR_TEXTURE_TYPE?(this._velocityLinearIndex=t,this._enableVelocityLinear=!0):e===T.REFLECTIVITY_TEXTURE_TYPE?(this._reflectivityIndex=t,this._enableReflectivity=!0):e===T.DEPTH_TEXTURE_TYPE?(this._depthIndex=t,this._enableDepth=!0):e===T.NORMAL_TEXTURE_TYPE?(this._normalIndex=t,this._enableNormal=!0):e===T.SCREENSPACE_DEPTH_TEXTURE_TYPE&&(this._screenspaceDepthIndex=t,this._enableScreenspaceDepth=!0)}_setAttachments(e){this._attachmentsFromPrePass=e}_linkInternalTexture(e){this._multiRenderTarget.setInternalTexture(e,0,!1)}get renderList(){return this._multiRenderTarget.renderList}set renderList(e){this._multiRenderTarget.renderList=e}get isSupported(){return this._multiRenderTarget.isSupported}getTextureIndex(e){switch(e){case T.POSITION_TEXTURE_TYPE:return this._positionIndex;case T.VELOCITY_TEXTURE_TYPE:return this._velocityIndex;case T.VELOCITY_LINEAR_TEXTURE_TYPE:return this._velocityLinearIndex;case T.REFLECTIVITY_TEXTURE_TYPE:return this._reflectivityIndex;case T.DEPTH_TEXTURE_TYPE:return this._depthIndex;case T.NORMAL_TEXTURE_TYPE:return this._normalIndex;case T.SCREENSPACE_DEPTH_TEXTURE_TYPE:return this._screenspaceDepthIndex;default:return-1}}get enableDepth(){return this._enableDepth}set enableDepth(e){this._enableDepth=e,this._linkedWithPrePass||(this.dispose(),this._createRenderTargets())}get enableNormal(){return this._enableNormal}set enableNormal(e){this._enableNormal=e,this._linkedWithPrePass||(this.dispose(),this._createRenderTargets())}get enablePosition(){return this._enablePosition}set enablePosition(e){this._enablePosition=e,this._linkedWithPrePass||(this.dispose(),this._createRenderTargets())}get enableVelocity(){return this._enableVelocity}set enableVelocity(e){this._enableVelocity=e,e||(this._previousTransformationMatrices={}),this._linkedWithPrePass||(this.dispose(),this._createRenderTargets()),this._scene.needsPreviousWorldMatrices=e}get enableVelocityLinear(){return this._enableVelocityLinear}set enableVelocityLinear(e){this._enableVelocityLinear=e,this._linkedWithPrePass||(this.dispose(),this._createRenderTargets())}get enableReflectivity(){return this._enableReflectivity}set enableReflectivity(e){this._enableReflectivity=e,this._linkedWithPrePass||(this.dispose(),this._createRenderTargets())}get enableScreenspaceDepth(){return this._enableScreenspaceDepth}set enableScreenspaceDepth(e){this._enableScreenspaceDepth=e,this._linkedWithPrePass||(this.dispose(),this._createRenderTargets())}get scene(){return this._scene}get ratio(){return"object"==typeof this._ratioOrDimensions?1:this._ratioOrDimensions}get shaderLanguage(){return this._shaderLanguage}constructor(e,t=1,n=15,i){this._previousTransformationMatrices={},this._previousBonesTransformationMatrices={},this.excludedSkinnedMeshesFromVelocity=[],this.renderTransparentMeshes=!0,this.generateNormalsInWorldSpace=!1,this._normalsAreUnsigned=!1,this._resizeObserver=null,this._enableDepth=!0,this._enableNormal=!0,this._enablePosition=!1,this._enableVelocity=!1,this._enableVelocityLinear=!1,this._enableReflectivity=!1,this._enableScreenspaceDepth=!1,this._clearColor=new o.ov(0,0,0,0),this._clearDepthColor=new o.ov(0,0,0,1),this._positionIndex=-1,this._velocityIndex=-1,this._velocityLinearIndex=-1,this._reflectivityIndex=-1,this._depthIndex=-1,this._normalIndex=-1,this._screenspaceDepthIndex=-1,this._linkedWithPrePass=!1,this.useSpecificClearForDepthTexture=!1,this._shaderLanguage=0,this._shadersLoaded=!1,this._scene=e,this._ratioOrDimensions=t,this._useUbo=e.getEngine().supportsUniformBuffers,this._depthFormat=n,this._textureTypesAndFormats=i||{},this._initShaderSourceAsync(),T._SceneComponentInitialization(this._scene),this._createRenderTargets()}async _initShaderSourceAsync(){this._scene.getEngine().isWebGPU&&!T.ForceGLSL?(this._shaderLanguage=1,await Promise.all([n.e(2564).then(n.bind(n,2564)),n.e(8574).then(n.bind(n,38574))])):await Promise.all([Promise.resolve().then(n.bind(n,6739)),Promise.resolve().then(n.bind(n,75007))]),this._shadersLoaded=!0}isReady(e,t){if(!this._shadersLoaded)return!1;const n=e.getMaterial();if(n&&n.disableDepthWrite)return!1;const i=[],a=[r.R.PositionKind,r.R.NormalKind],s=e.getMesh();let o=!1,l=!1;if(n){let e=!1;if(n.needAlphaTestingForMesh(s)&&n.getAlphaTestTexture()&&(i.push("#define ALPHATEST"),i.push(`#define ALPHATEST_UV${n.getAlphaTestTexture().coordinatesIndex+1}`),e=!0),(n.bumpTexture||n.normalTexture||n.geometryNormalTexture)&&d.h.BumpTextureEnabled){const t=n.bumpTexture||n.normalTexture||n.geometryNormalTexture;i.push("#define BUMP"),i.push(`#define BUMP_UV${t.coordinatesIndex+1}`),e=!0}if(this._enableReflectivity){let t=!1;if("PBRMetallicRoughnessMaterial"===n.getClassName())n.metallicRoughnessTexture&&(i.push("#define ORMTEXTURE"),i.push(`#define REFLECTIVITY_UV${n.metallicRoughnessTexture.coordinatesIndex+1}`),i.push("#define METALLICWORKFLOW"),e=!0,t=!0),null!=n.metallic&&(i.push("#define METALLIC"),i.push("#define METALLICWORKFLOW"),t=!0),null!=n.roughness&&(i.push("#define ROUGHNESS"),i.push("#define METALLICWORKFLOW"),t=!0),t&&(n.baseTexture&&(i.push("#define ALBEDOTEXTURE"),i.push(`#define ALBEDO_UV${n.baseTexture.coordinatesIndex+1}`),n.baseTexture.gammaSpace&&i.push("#define GAMMAALBEDO"),e=!0),n.baseColor&&i.push("#define ALBEDOCOLOR"));else if("PBRSpecularGlossinessMaterial"===n.getClassName())n.specularGlossinessTexture?(i.push("#define SPECULARGLOSSINESSTEXTURE"),i.push(`#define REFLECTIVITY_UV${n.specularGlossinessTexture.coordinatesIndex+1}`),e=!0,n.specularGlossinessTexture.gammaSpace&&i.push("#define GAMMAREFLECTIVITYTEXTURE")):n.specularColor&&i.push("#define REFLECTIVITYCOLOR"),null!=n.glossiness&&i.push("#define GLOSSINESS");else if("PBRMaterial"===n.getClassName())n.metallicTexture&&(i.push("#define ORMTEXTURE"),i.push(`#define REFLECTIVITY_UV${n.metallicTexture.coordinatesIndex+1}`),i.push("#define METALLICWORKFLOW"),e=!0,t=!0),null!=n.metallic&&(i.push("#define METALLIC"),i.push("#define METALLICWORKFLOW"),t=!0),null!=n.roughness&&(i.push("#define ROUGHNESS"),i.push("#define METALLICWORKFLOW"),t=!0),t?(n.albedoTexture&&(i.push("#define ALBEDOTEXTURE"),i.push(`#define ALBEDO_UV${n.albedoTexture.coordinatesIndex+1}`),n.albedoTexture.gammaSpace&&i.push("#define GAMMAALBEDO"),e=!0),n.albedoColor&&i.push("#define ALBEDOCOLOR")):(n.reflectivityTexture?(i.push("#define SPECULARGLOSSINESSTEXTURE"),i.push(`#define REFLECTIVITY_UV${n.reflectivityTexture.coordinatesIndex+1}`),n.reflectivityTexture.gammaSpace&&i.push("#define GAMMAREFLECTIVITYTEXTURE"),e=!0):n.reflectivityColor&&i.push("#define REFLECTIVITYCOLOR"),null!=n.microSurface&&i.push("#define GLOSSINESS"));else if("StandardMaterial"===n.getClassName())n.specularTexture&&(i.push("#define REFLECTIVITYTEXTURE"),i.push(`#define REFLECTIVITY_UV${n.specularTexture.coordinatesIndex+1}`),n.specularTexture.gammaSpace&&i.push("#define GAMMAREFLECTIVITYTEXTURE"),e=!0),n.specularColor&&i.push("#define REFLECTIVITYCOLOR");else if("OpenPBRMaterial"===n.getClassName()){const r=n;i.push("#define METALLICWORKFLOW"),t=!0,i.push("#define METALLIC"),i.push("#define ROUGHNESS"),r._useRoughnessFromMetallicTextureGreen&&r.baseMetalnessTexture?(i.push("#define ORMTEXTURE"),i.push(`#define REFLECTIVITY_UV${r.baseMetalnessTexture.coordinatesIndex+1}`),e=!0):r.baseMetalnessTexture?(i.push("#define METALLIC_TEXTURE"),i.push(`#define METALLIC_UV${r.baseMetalnessTexture.coordinatesIndex+1}`),e=!0):r.specularRoughnessTexture&&(i.push("#define ROUGHNESS_TEXTURE"),i.push(`#define ROUGHNESS_UV${r.specularRoughnessTexture.coordinatesIndex+1}`),e=!0),r.baseColorTexture&&(i.push("#define ALBEDOTEXTURE"),i.push(`#define ALBEDO_UV${r.baseColorTexture.coordinatesIndex+1}`),r.baseColorTexture.gammaSpace&&i.push("#define GAMMAALBEDO"),e=!0),r.baseColor&&i.push("#define ALBEDOCOLOR")}}e&&(i.push("#define NEED_UV"),s.isVerticesDataPresent(r.R.UVKind)&&(a.push(r.R.UVKind),i.push("#define UV1"),o=!0),s.isVerticesDataPresent(r.R.UV2Kind)&&(a.push(r.R.UV2Kind),i.push("#define UV2"),l=!0))}this._enableDepth&&(i.push("#define DEPTH"),i.push("#define DEPTH_INDEX "+this._depthIndex)),this._enableNormal&&(i.push("#define NORMAL"),i.push("#define NORMAL_INDEX "+this._normalIndex)),this._enablePosition&&(i.push("#define POSITION"),i.push("#define POSITION_INDEX "+this._positionIndex)),this._enableVelocity&&(i.push("#define VELOCITY"),i.push("#define VELOCITY_INDEX "+this._velocityIndex),-1===this.excludedSkinnedMeshesFromVelocity.indexOf(s)&&i.push("#define BONES_VELOCITY_ENABLED")),this._enableVelocityLinear&&(i.push("#define VELOCITY_LINEAR"),i.push("#define VELOCITY_LINEAR_INDEX "+this._velocityLinearIndex),-1===this.excludedSkinnedMeshesFromVelocity.indexOf(s)&&i.push("#define BONES_VELOCITY_ENABLED")),this._enableReflectivity&&(i.push("#define REFLECTIVITY"),i.push("#define REFLECTIVITY_INDEX "+this._reflectivityIndex)),this._enableScreenspaceDepth&&-1!==this._screenspaceDepthIndex&&(i.push("#define SCREENSPACE_DEPTH_INDEX "+this._screenspaceDepthIndex),i.push("#define SCREENSPACE_DEPTH")),this.generateNormalsInWorldSpace&&i.push("#define NORMAL_WORLDSPACE"),this._normalsAreUnsigned&&i.push("#define ENCODE_NORMAL"),s.useBones&&s.computeBonesUsingShaders&&s.skeleton?(a.push(r.R.MatricesIndicesKind),a.push(r.R.MatricesWeightsKind),s.numBoneInfluencers>4&&(a.push(r.R.MatricesIndicesExtraKind),a.push(r.R.MatricesWeightsExtraKind)),i.push("#define NUM_BONE_INFLUENCERS "+s.numBoneInfluencers),i.push("#define BONETEXTURE "+s.skeleton.isUsingTextureForMatrices),i.push("#define BonesPerMesh "+(s.skeleton.bones.length+1))):(i.push("#define NUM_BONE_INFLUENCERS 0"),i.push("#define BONETEXTURE false"),i.push("#define BonesPerMesh 0"));const u=s.morphTargetManager?(0,c.Dk)(s.morphTargetManager,i,a,s,!0,!0,!1,o,l,!1):0;t&&(i.push("#define INSTANCES"),(0,c.te)(a,this._enableVelocity||this._enableVelocityLinear),e.getRenderingMesh().hasThinInstances&&i.push("#define THIN_INSTANCES")),this._linkedWithPrePass?i.push("#define SCENE_MRT_COUNT "+this._attachmentsFromPrePass.length):i.push("#define SCENE_MRT_COUNT "+this._multiRenderTarget.textures.length),(0,f.r4)(n,this._scene,i);const T=this._scene.getEngine(),m=e._getDrawWrapper(void 0,!0),p=m.defines,_=i.join("\n");return p!==_&&m.setEffect(T.createEffect("geometry",{attributes:a,uniformsNames:h,samplers:["diffuseSampler","bumpSampler","reflectivitySampler","albedoSampler","morphTargets","boneSampler"],defines:_,onCompiled:null,fallbacks:null,onError:null,uniformBuffersNames:["Scene"],indexParameters:{buffersCount:this._multiRenderTarget.textures.length-1,maxSimultaneousMorphTargets:u},shaderLanguage:this.shaderLanguage},T),_),m.effect.isReady()}getGBuffer(){return this._multiRenderTarget}get samples(){return this._multiRenderTarget.samples}set samples(e){this._multiRenderTarget.samples=e}dispose(){if(this._resizeObserver){this._scene.getEngine().onResizeObservable.remove(this._resizeObserver),this._resizeObserver=null}this.getGBuffer().dispose()}_assignRenderTargetIndices(){const e=[],t=[];let n=0;return this._enableDepth&&(this._depthIndex=n,n++,e.push("gBuffer_Depth"),t.push(this._textureTypesAndFormats[T.DEPTH_TEXTURE_TYPE])),this._enableNormal&&(this._normalIndex=n,n++,e.push("gBuffer_Normal"),t.push(this._textureTypesAndFormats[T.NORMAL_TEXTURE_TYPE])),this._enablePosition&&(this._positionIndex=n,n++,e.push("gBuffer_Position"),t.push(this._textureTypesAndFormats[T.POSITION_TEXTURE_TYPE])),this._enableVelocity&&(this._velocityIndex=n,n++,e.push("gBuffer_Velocity"),t.push(this._textureTypesAndFormats[T.VELOCITY_TEXTURE_TYPE])),this._enableVelocityLinear&&(this._velocityLinearIndex=n,n++,e.push("gBuffer_VelocityLinear"),t.push(this._textureTypesAndFormats[T.VELOCITY_LINEAR_TEXTURE_TYPE])),this._enableReflectivity&&(this._reflectivityIndex=n,n++,e.push("gBuffer_Reflectivity"),t.push(this._textureTypesAndFormats[T.REFLECTIVITY_TEXTURE_TYPE])),this._enableScreenspaceDepth&&(this._screenspaceDepthIndex=n,n++,e.push("gBuffer_ScreenspaceDepth"),t.push(this._textureTypesAndFormats[T.SCREENSPACE_DEPTH_TEXTURE_TYPE])),[n,e,t]}_createRenderTargets(){const e=this._scene.getEngine(),[t,n,r]=this._assignRenderTargetIndices();let o=0;e._caps.textureFloat&&e._caps.textureFloatLinearFiltering?o=1:e._caps.textureHalfFloat&&e._caps.textureHalfFloatLinearFiltering&&(o=2);const l=void 0!==this._ratioOrDimensions.width?this._ratioOrDimensions:{width:e.getRenderWidth()*this._ratioOrDimensions,height:e.getRenderHeight()*this._ratioOrDimensions},h=[],m=[];for(const e of r)e?(h.push(e.textureType),m.push(e.textureFormat)):(h.push(o),m.push(5));if(this._normalsAreUnsigned=11===h[T.NORMAL_TEXTURE_TYPE]||13===h[T.NORMAL_TEXTURE_TYPE],this._multiRenderTarget=new s.H("gBuffer",l,t,this._scene,{generateMipMaps:!1,generateDepthTexture:!0,types:h,formats:m,depthTextureFormat:this._depthFormat},n.concat("gBuffer_DepthBuffer")),!this.isSupported)return;this._multiRenderTarget.wrapU=a.g.CLAMP_ADDRESSMODE,this._multiRenderTarget.wrapV=a.g.CLAMP_ADDRESSMODE,this._multiRenderTarget.refreshRate=1,this._multiRenderTarget.renderParticles=!1,this._multiRenderTarget.renderList=null;const p=[!0],_=[!1],E=[!0];for(let e=1;e<t;++e)p.push(!0),E.push(!1),_.push(!0);const v=e.buildTextureLayout(p),g=e.buildTextureLayout(_),x=e.buildTextureLayout(E);this._multiRenderTarget.onClearObservable.add(e=>{e.bindAttachments(this.useSpecificClearForDepthTexture?g:v),e.clear(this._clearColor,!0,!0,!0),this.useSpecificClearForDepthTexture&&(e.bindAttachments(x),e.clear(this._clearDepthColor,!0,!0,!0)),e.bindAttachments(v)}),this._resizeObserver=e.onResizeObservable.add(()=>{if(this._multiRenderTarget){const t=void 0!==this._ratioOrDimensions.width?this._ratioOrDimensions:{width:e.getRenderWidth()*this._ratioOrDimensions,height:e.getRenderHeight()*this._ratioOrDimensions};this._multiRenderTarget.resize(t)}});const R=e=>{const t=e.getRenderingMesh(),n=e.getEffectiveMesh(),r=this._scene,a=r.getEngine(),s=e.getMaterial();if(!s)return;if(n._internalAbstractMeshDataInfo._isActiveIntermediate=!1,(this._enableVelocity||this._enableVelocityLinear)&&!this._previousTransformationMatrices[n.uniqueId]&&(this._previousTransformationMatrices[n.uniqueId]={world:i.uq.Identity(),viewProjection:r.getTransformMatrix()},t.skeleton)){const e=t.skeleton.getTransformMatrices(t);this._previousBonesTransformationMatrices[t.uniqueId]=this._copyBonesTransformationMatrices(e,new Float32Array(e.length))}const o=t._getInstancesRenderList(e._id,!!e.getReplacementMesh());if(o.mustReturn)return;const l=a.getCaps().instancedArrays&&(null!==o.visibleInstances[e._id]||t.hasThinInstances),h=n.getWorldMatrix();if(this.isReady(e,l)){const i=e._getDrawWrapper();if(!i)return;const T=i.effect;let m;a.enableEffect(i),l||t._bind(e,T,s.fillMode),this._useUbo?((0,c._8)(T,this._scene.getSceneUniformBuffer()),this._scene.finalizeSceneUbo()):(T.setMatrix("viewProjection",r.getTransformMatrix()),T.setMatrix("view",r.getViewMatrix()));if(t._instanceDataStorage.isFrozen||!s.backFaceCulling&&null===s.sideOrientation)m=t._effectiveSideOrientation;else{const e=n._getWorldMatrixDeterminant();m=s._getEffectiveOrientation(t),e<0&&(m=m===u.i.ClockWiseSideOrientation?u.i.CounterClockWiseSideOrientation:u.i.ClockWiseSideOrientation)}if(s._preBind(i,m),s.needAlphaTestingForMesh(n)){const e=s.getAlphaTestTexture();e&&(T.setTexture("diffuseSampler",e),T.setMatrix("diffuseMatrix",e.getTextureMatrix()))}if((s.bumpTexture||s.normalTexture||s.geometryNormalTexture)&&r.getEngine().getCaps().standardDerivatives&&d.h.BumpTextureEnabled){const e=s.bumpTexture||s.normalTexture||s.geometryNormalTexture;T.setFloat3("vBumpInfos",e.coordinatesIndex,1/e.level,s.parallaxScaleBias),T.setMatrix("bumpMatrix",e.getTextureMatrix()),T.setTexture("bumpSampler",e),T.setFloat2("vTangentSpaceParams",s.invertNormalMapX?-1:1,s.invertNormalMapY?-1:1)}if(this._enableReflectivity)if("PBRMetallicRoughnessMaterial"===s.getClassName())null!==s.metallicRoughnessTexture&&(T.setTexture("reflectivitySampler",s.metallicRoughnessTexture),T.setMatrix("reflectivityMatrix",s.metallicRoughnessTexture.getTextureMatrix())),null!==s.metallic&&T.setFloat("metallic",s.metallic),null!==s.roughness&&T.setFloat("glossiness",1-s.roughness),null!==s.baseTexture&&(T.setTexture("albedoSampler",s.baseTexture),T.setMatrix("albedoMatrix",s.baseTexture.getTextureMatrix())),null!==s.baseColor&&T.setColor3("albedoColor",s.baseColor);else if("PBRSpecularGlossinessMaterial"===s.getClassName())null!==s.specularGlossinessTexture?(T.setTexture("reflectivitySampler",s.specularGlossinessTexture),T.setMatrix("reflectivityMatrix",s.specularGlossinessTexture.getTextureMatrix())):null!==s.specularColor&&T.setColor3("reflectivityColor",s.specularColor),null!==s.glossiness&&T.setFloat("glossiness",s.glossiness);else if("PBRMaterial"===s.getClassName())null!==s.metallicTexture&&(T.setTexture("reflectivitySampler",s.metallicTexture),T.setMatrix("reflectivityMatrix",s.metallicTexture.getTextureMatrix())),null!==s.metallic&&T.setFloat("metallic",s.metallic),null!==s.roughness&&T.setFloat("glossiness",1-s.roughness),null!==s.roughness||null!==s.metallic||null!==s.metallicTexture?(null!==s.albedoTexture&&(T.setTexture("albedoSampler",s.albedoTexture),T.setMatrix("albedoMatrix",s.albedoTexture.getTextureMatrix())),null!==s.albedoColor&&T.setColor3("albedoColor",s.albedoColor)):(null!==s.reflectivityTexture?(T.setTexture("reflectivitySampler",s.reflectivityTexture),T.setMatrix("reflectivityMatrix",s.reflectivityTexture.getTextureMatrix())):null!==s.reflectivityColor&&T.setColor3("reflectivityColor",s.reflectivityColor),null!==s.microSurface&&T.setFloat("glossiness",s.microSurface));else if("StandardMaterial"===s.getClassName())null!==s.specularTexture&&(T.setTexture("reflectivitySampler",s.specularTexture),T.setMatrix("reflectivityMatrix",s.specularTexture.getTextureMatrix())),null!==s.specularColor&&T.setColor3("reflectivityColor",s.specularColor);else if("OpenPBRMaterial"===s.getClassName()){const e=s;e._useRoughnessFromMetallicTextureGreen&&e.baseMetalnessTexture?(T.setTexture("reflectivitySampler",e.baseMetalnessTexture),T.setMatrix("reflectivityMatrix",e.baseMetalnessTexture.getTextureMatrix())):e.baseMetalnessTexture?(T.setTexture("metallicSampler",e.baseMetalnessTexture),T.setMatrix("metallicMatrix",e.baseMetalnessTexture.getTextureMatrix())):e.specularRoughnessTexture&&(T.setTexture("roughnessSampler",e.specularRoughnessTexture),T.setMatrix("roughnessMatrix",e.specularRoughnessTexture.getTextureMatrix())),T.setFloat("metallic",e.baseMetalness),T.setFloat("glossiness",1-e.specularRoughness),null!==e.baseColorTexture&&(T.setTexture("albedoSampler",e.baseColorTexture),T.setMatrix("albedoMatrix",e.baseColorTexture.getTextureMatrix())),null!==e.baseColor&&T.setColor3("albedoColor",e.baseColor)}if((0,f.ij)(T,s,this._scene),t.useBones&&t.computeBonesUsingShaders&&t.skeleton){const e=t.skeleton;if(e.isUsingTextureForMatrices&&T.getUniformIndex("boneTextureWidth")>-1){const n=e.getTransformMatrixTexture(t);T.setTexture("boneSampler",n),T.setFloat("boneTextureWidth",4*(e.bones.length+1))}else T.setMatrices("mBones",t.skeleton.getTransformMatrices(t));(this._enableVelocity||this._enableVelocityLinear)&&T.setMatrices("mPreviousBones",this._previousBonesTransformationMatrices[t.uniqueId])}(0,c.nR)(t,T),t.morphTargetManager&&t.morphTargetManager.isUsingTextureForTargets&&t.morphTargetManager._bind(T),(this._enableVelocity||this._enableVelocityLinear)&&(T.setMatrix("previousWorld",this._previousTransformationMatrices[n.uniqueId].world),T.setMatrix("previousViewProjection",this._previousTransformationMatrices[n.uniqueId].viewProjection)),l&&t.hasThinInstances&&T.setMatrix("world",h),t._processRendering(n,e,T,s.fillMode,o,l,(e,t)=>{e||T.setMatrix("world",t)})}(this._enableVelocity||this._enableVelocityLinear)&&(this._previousTransformationMatrices[n.uniqueId].world=h.clone(),this._previousTransformationMatrices[n.uniqueId].viewProjection=this._scene.getTransformMatrix().clone(),t.skeleton&&this._copyBonesTransformationMatrices(t.skeleton.getTransformMatrices(t),this._previousBonesTransformationMatrices[n.uniqueId]))};this._multiRenderTarget.customIsReadyFunction=(t,n,i)=>{if((i||0===n)&&t.subMeshes)for(let n=0;n<t.subMeshes.length;++n){const i=t.subMeshes[n],r=i.getMaterial(),a=i.getRenderingMesh();if(!r)continue;const s=a._getInstancesRenderList(i._id,!!i.getReplacementMesh()),o=e.getCaps().instancedArrays&&(null!==s.visibleInstances[i._id]||a.hasThinInstances);if(!this.isReady(i,o))return!1}return!0},this._multiRenderTarget.customRenderFunction=(t,n,i,r)=>{let a;if(this._linkedWithPrePass){if(!this._prePassRenderer.enabled)return;this._scene.getEngine().bindAttachments(this._attachmentsFromPrePass)}if(r.length){for(e.setColorWrite(!1),a=0;a<r.length;a++)R(r.data[a]);e.setColorWrite(!0)}for(a=0;a<t.length;a++)R(t.data[a]);for(e.setDepthWrite(!1),a=0;a<n.length;a++)R(n.data[a]);if(this.renderTransparentMeshes)for(a=0;a<i.length;a++)R(i.data[a]);e.setDepthWrite(!0)}}_copyBonesTransformationMatrices(e,t){for(let n=0;n<e.length;n++)t[n]=e[n];return t}}T.ForceGLSL=!1,T.DEPTH_TEXTURE_TYPE=0,T.NORMAL_TEXTURE_TYPE=1,T.POSITION_TEXTURE_TYPE=2,T.VELOCITY_TEXTURE_TYPE=3,T.REFLECTIVITY_TEXTURE_TYPE=4,T.SCREENSPACE_DEPTH_TEXTURE_TYPE=5,T.VELOCITY_LINEAR_TEXTURE_TYPE=6,T._SceneComponentInitialization=e=>{throw(0,l.n)("GeometryBufferRendererSceneComponent")}},63022:(e,t,n)=>{var i=n(69610);const r="samplerFragmentDeclaration",a="#ifdef _DEFINENAME_\n#if _DEFINENAME_DIRECTUV==1\n#define v_VARYINGNAME_UV vMainUV1\n#elif _DEFINENAME_DIRECTUV==2\n#define v_VARYINGNAME_UV vMainUV2\n#elif _DEFINENAME_DIRECTUV==3\n#define v_VARYINGNAME_UV vMainUV3\n#elif _DEFINENAME_DIRECTUV==4\n#define v_VARYINGNAME_UV vMainUV4\n#elif _DEFINENAME_DIRECTUV==5\n#define v_VARYINGNAME_UV vMainUV5\n#elif _DEFINENAME_DIRECTUV==6\n#define v_VARYINGNAME_UV vMainUV6\n#else\nvarying vec2 v_VARYINGNAME_UV;\n#endif\nuniform sampler2D _SAMPLERNAME_Sampler;\n#endif\n";i.l.IncludesShadersStore[r]||(i.l.IncludesShadersStore[r]=a)},73325:(e,t,n)=>{var i=n(69610);const r="helperFunctions",a="const float PI=3.1415926535897932384626433832795;const float TWO_PI=6.283185307179586;const float HALF_PI=1.5707963267948966;const float RECIPROCAL_PI=0.3183098861837907;const float RECIPROCAL_PI2=0.15915494309189535;const float RECIPROCAL_PI4=0.07957747154594767;const float HALF_MIN=5.96046448e-08; \nconst float LinearEncodePowerApprox=2.2;const float GammaEncodePowerApprox=1.0/LinearEncodePowerApprox;const vec3 LuminanceEncodeApprox=vec3(0.2126,0.7152,0.0722);const float Epsilon=0.0000001;\n#define saturate(x) clamp(x,0.0,1.0)\n#define absEps(x) abs(x)+Epsilon\n#define maxEps(x) max(x,Epsilon)\n#define saturateEps(x) clamp(x,Epsilon,1.0)\nmat3 transposeMat3(mat3 inMatrix) {vec3 i0=inMatrix[0];vec3 i1=inMatrix[1];vec3 i2=inMatrix[2];mat3 outMatrix=mat3(\nvec3(i0.x,i1.x,i2.x),\nvec3(i0.y,i1.y,i2.y),\nvec3(i0.z,i1.z,i2.z)\n);return outMatrix;}\nmat3 inverseMat3(mat3 inMatrix) {float a00=inMatrix[0][0],a01=inMatrix[0][1],a02=inMatrix[0][2];float a10=inMatrix[1][0],a11=inMatrix[1][1],a12=inMatrix[1][2];float a20=inMatrix[2][0],a21=inMatrix[2][1],a22=inMatrix[2][2];float b01=a22*a11-a12*a21;float b11=-a22*a10+a12*a20;float b21=a21*a10-a11*a20;float det=a00*b01+a01*b11+a02*b21;return mat3(b01,(-a22*a01+a02*a21),(a12*a01-a02*a11),\nb11,(a22*a00-a02*a20),(-a12*a00+a02*a10),\nb21,(-a21*a00+a01*a20),(a11*a00-a01*a10))/det;}\n#if USE_EXACT_SRGB_CONVERSIONS\nvec3 toLinearSpaceExact(vec3 color)\n{vec3 nearZeroSection=0.0773993808*color;vec3 remainingSection=pow(0.947867299*(color+vec3(0.055)),vec3(2.4));\n#if defined(WEBGL2) || defined(WEBGPU) || defined(NATIVE)\nreturn mix(remainingSection,nearZeroSection,lessThanEqual(color,vec3(0.04045)));\n#else\nreturn\nvec3(\ncolor.r<=0.04045 ? nearZeroSection.r : remainingSection.r,\ncolor.g<=0.04045 ? nearZeroSection.g : remainingSection.g,\ncolor.b<=0.04045 ? nearZeroSection.b : remainingSection.b);\n#endif\n}\nvec3 toGammaSpaceExact(vec3 color)\n{vec3 nearZeroSection=12.92*color;vec3 remainingSection=1.055*pow(color,vec3(0.41666))-vec3(0.055);\n#if defined(WEBGL2) || defined(WEBGPU) || defined(NATIVE)\nreturn mix(remainingSection,nearZeroSection,lessThanEqual(color,vec3(0.0031308)));\n#else\nreturn\nvec3(\ncolor.r<=0.0031308 ? nearZeroSection.r : remainingSection.r,\ncolor.g<=0.0031308 ? nearZeroSection.g : remainingSection.g,\ncolor.b<=0.0031308 ? nearZeroSection.b : remainingSection.b);\n#endif\n}\n#endif\nfloat toLinearSpace(float color)\n{\n#if USE_EXACT_SRGB_CONVERSIONS\nfloat nearZeroSection=0.0773993808*color;float remainingSection=pow(0.947867299*(color+0.055),2.4);return color<=0.04045 ? nearZeroSection : remainingSection;\n#else\nreturn pow(color,LinearEncodePowerApprox);\n#endif\n}\nvec3 toLinearSpace(vec3 color)\n{\n#if USE_EXACT_SRGB_CONVERSIONS\nreturn toLinearSpaceExact(color);\n#else\nreturn pow(color,vec3(LinearEncodePowerApprox));\n#endif\n}\nvec4 toLinearSpace(vec4 color)\n{\n#if USE_EXACT_SRGB_CONVERSIONS\nreturn vec4(toLinearSpaceExact(color.rgb),color.a);\n#else\nreturn vec4(pow(color.rgb,vec3(LinearEncodePowerApprox)),color.a);\n#endif\n}\nfloat toGammaSpace(float color)\n{\n#if USE_EXACT_SRGB_CONVERSIONS\nfloat nearZeroSection=12.92*color;float remainingSection=1.055*pow(color,0.41666)-0.055;return color<=0.0031308 ? nearZeroSection : remainingSection;\n#else\nreturn pow(color,GammaEncodePowerApprox);\n#endif\n}\nvec3 toGammaSpace(vec3 color)\n{\n#if USE_EXACT_SRGB_CONVERSIONS\nreturn toGammaSpaceExact(color);\n#else\nreturn pow(color,vec3(GammaEncodePowerApprox));\n#endif\n}\nvec4 toGammaSpace(vec4 color)\n{\n#if USE_EXACT_SRGB_CONVERSIONS\nreturn vec4(toGammaSpaceExact(color.rgb),color.a);\n#else\nreturn vec4(pow(color.rgb,vec3(GammaEncodePowerApprox)),color.a);\n#endif\n}\nfloat square(float value)\n{return value*value;}\nvec3 square(vec3 value)\n{return value*value;}\nfloat pow5(float value) {float sq=value*value;return sq*sq*value;}\nfloat getLuminance(vec3 color)\n{return saturate(dot(color,LuminanceEncodeApprox));}\nfloat getRand(vec2 seed) {return fract(sin(dot(seed.xy ,vec2(12.9898,78.233)))*43758.5453);}\nfloat dither(vec2 seed,float varianceAmount) {float rand=getRand(seed);float normVariance=varianceAmount/255.0;float dither=mix(-normVariance,normVariance,rand);return dither;}\nconst float rgbdMaxRange=255.;vec4 toRGBD(vec3 color) {float maxRGB=maxEps(max(color.r,max(color.g,color.b)));float D =max(rgbdMaxRange/maxRGB,1.);D =saturate(floor(D)/255.);vec3 rgb=color.rgb*D;rgb=toGammaSpace(rgb);return vec4(saturate(rgb),D);}\nvec3 fromRGBD(vec4 rgbd) {rgbd.rgb=toLinearSpace(rgbd.rgb);return rgbd.rgb/rgbd.a;}\nvec3 parallaxCorrectNormal( vec3 vertexPos,vec3 origVec,vec3 cubeSize,vec3 cubePos ) {vec3 invOrigVec=vec3(1.)/origVec;vec3 halfSize=cubeSize*0.5;vec3 intersecAtMaxPlane=(cubePos+halfSize-vertexPos)*invOrigVec;vec3 intersecAtMinPlane=(cubePos-halfSize-vertexPos)*invOrigVec;vec3 largestIntersec=max(intersecAtMaxPlane,intersecAtMinPlane);float distance=min(min(largestIntersec.x,largestIntersec.y),largestIntersec.z);vec3 intersectPositionWS=vertexPos+origVec*distance;return intersectPositionWS-cubePos;}\nvec3 equirectangularToCubemapDirection(vec2 uv) {float longitude=uv.x*TWO_PI-PI;float latitude=HALF_PI-uv.y*PI;vec3 direction;direction.x=cos(latitude)*sin(longitude);direction.y=sin(latitude);direction.z=cos(latitude)*cos(longitude);return direction;}\nfloat sqrtClamped(float value) {return sqrt(max(value,0.));}\nfloat avg(vec3 value) {return dot(value,vec3(0.333333333));}\n#if defined(WEBGL2) || defined(WEBGPU) || defined(NATIVE) \nuint extractBits(uint value,int offset,int width) {return (value>>offset) & ((1u<<width)-1u);}\nint onlyBitPosition(uint value) {return (floatBitsToInt(float(value))>>23)-0x7f;}\n#endif\n";i.l.IncludesShadersStore[r]||(i.l.IncludesShadersStore[r]=a)},75007:(e,t,n)=>{n.r(t),n.d(t,{geometryPixelShader:()=>l});var i=n(69610);n(6194);const r="mrtFragmentDeclaration",a="#if defined(WEBGL2) || defined(WEBGPU) || defined(NATIVE)\nlayout(location=0) out vec4 glFragData[{X}];\n#endif\n";i.l.IncludesShadersStore[r]||(i.l.IncludesShadersStore[r]=a);n(17494),n(8269),n(73325),n(7412),n(27018);const s="geometryPixelShader",o="#extension GL_EXT_draw_buffers : require\n#if defined(BUMP) || !defined(NORMAL)\n#extension GL_OES_standard_derivatives : enable\n#endif\nprecision highp float;\n#ifdef BUMP\nvarying mat4 vWorldView;varying vec3 vNormalW;\n#else\nvarying vec3 vNormalV;\n#endif\nvarying vec4 vViewPos;\n#if defined(POSITION) || defined(BUMP)\nvarying vec3 vPositionW;\n#endif\n#if defined(VELOCITY) || defined(VELOCITY_LINEAR)\nvarying vec4 vCurrentPosition;varying vec4 vPreviousPosition;\n#endif\n#ifdef NEED_UV\nvarying vec2 vUV;\n#endif\n#ifdef BUMP\nuniform vec3 vBumpInfos;uniform vec2 vTangentSpaceParams;\n#endif\n#if defined(REFLECTIVITY)\n#if defined(ORMTEXTURE) || defined(SPECULARGLOSSINESSTEXTURE) || defined(REFLECTIVITYTEXTURE)\nuniform sampler2D reflectivitySampler;varying vec2 vReflectivityUV;\n#else\n#ifdef METALLIC_TEXTURE\nuniform sampler2D metallicSampler;varying vec2 vMetallicUV;\n#endif\n#ifdef ROUGHNESS_TEXTURE\nuniform sampler2D roughnessSampler;varying vec2 vRoughnessUV;\n#endif\n#endif\n#ifdef ALBEDOTEXTURE\nvarying vec2 vAlbedoUV;uniform sampler2D albedoSampler;\n#endif\n#ifdef REFLECTIVITYCOLOR\nuniform vec3 reflectivityColor;\n#endif\n#ifdef ALBEDOCOLOR\nuniform vec3 albedoColor;\n#endif\n#ifdef METALLIC\nuniform float metallic;\n#endif\n#if defined(ROUGHNESS) || defined(GLOSSINESS)\nuniform float glossiness;\n#endif\n#endif\n#if defined(ALPHATEST) && defined(NEED_UV)\nuniform sampler2D diffuseSampler;\n#endif\n#include<clipPlaneFragmentDeclaration>\n#include<mrtFragmentDeclaration>[SCENE_MRT_COUNT]\n#include<bumpFragmentMainFunctions>\n#include<bumpFragmentFunctions>\n#include<helperFunctions>\nvoid main() {\n#include<clipPlaneFragment>\n#ifdef ALPHATEST\nif (texture2D(diffuseSampler,vUV).a<0.4)\ndiscard;\n#endif\nvec3 normalOutput;\n#ifdef BUMP\nvec3 normalW=normalize(vNormalW);\n#include<bumpFragment>\n#ifdef NORMAL_WORLDSPACE\nnormalOutput=normalW;\n#else\nnormalOutput=normalize(vec3(vWorldView*vec4(normalW,0.0)));\n#endif\n#else\nnormalOutput=normalize(vNormalV);\n#endif\n#ifdef ENCODE_NORMAL\nnormalOutput=normalOutput*0.5+0.5;\n#endif\n#ifdef DEPTH\ngl_FragData[DEPTH_INDEX]=vec4(vViewPos.z/vViewPos.w,0.0,0.0,1.0);\n#endif\n#ifdef NORMAL\ngl_FragData[NORMAL_INDEX]=vec4(normalOutput,1.0);\n#endif\n#ifdef SCREENSPACE_DEPTH\ngl_FragData[SCREENSPACE_DEPTH_INDEX]=vec4(gl_FragCoord.z,0.0,0.0,1.0);\n#endif\n#ifdef POSITION\ngl_FragData[POSITION_INDEX]=vec4(vPositionW,1.0);\n#endif\n#ifdef VELOCITY\nvec2 a=(vCurrentPosition.xy/vCurrentPosition.w)*0.5+0.5;vec2 b=(vPreviousPosition.xy/vPreviousPosition.w)*0.5+0.5;vec2 velocity=abs(a-b);velocity=vec2(pow(velocity.x,1.0/3.0),pow(velocity.y,1.0/3.0))*sign(a-b)*0.5+0.5;gl_FragData[VELOCITY_INDEX]=vec4(velocity,0.0,1.0);\n#endif\n#ifdef VELOCITY_LINEAR\nvec2 velocity=vec2(0.5)*((vPreviousPosition.xy/vPreviousPosition.w) -\n(vCurrentPosition.xy/vCurrentPosition.w));gl_FragData[VELOCITY_LINEAR_INDEX]=vec4(velocity,0.0,1.0);\n#endif\n#ifdef REFLECTIVITY\nvec4 reflectivity=vec4(0.0,0.0,0.0,1.0);\n#ifdef METALLICWORKFLOW\nfloat metal=1.0;float roughness=1.0;\n#ifdef ORMTEXTURE\nmetal*=texture2D(reflectivitySampler,vReflectivityUV).b;roughness*=texture2D(reflectivitySampler,vReflectivityUV).g;\n#else\n#ifdef METALLIC_TEXTURE\nmetal*=texture2D(metallicSampler,vMetallicUV).r;\n#endif\n#ifdef ROUGHNESS_TEXTURE\nroughness*=texture2D(roughnessSampler,vRoughnessUV).r;\n#endif\n#endif\n#ifdef METALLIC\nmetal*=metallic;\n#endif\n#ifdef ROUGHNESS\nroughness*=(1.0-glossiness); \n#endif\nreflectivity.a-=roughness;vec3 color=vec3(1.0);\n#ifdef ALBEDOTEXTURE\ncolor=texture2D(albedoSampler,vAlbedoUV).rgb;\n#ifdef GAMMAALBEDO\ncolor=toLinearSpace(color);\n#endif\n#endif\n#ifdef ALBEDOCOLOR\ncolor*=albedoColor.xyz;\n#endif\nreflectivity.rgb=mix(vec3(0.04),color,metal);\n#else\n#if defined(SPECULARGLOSSINESSTEXTURE) || defined(REFLECTIVITYTEXTURE)\nreflectivity=texture2D(reflectivitySampler,vReflectivityUV);\n#ifdef GAMMAREFLECTIVITYTEXTURE\nreflectivity.rgb=toLinearSpace(reflectivity.rgb);\n#endif\n#else \n#ifdef REFLECTIVITYCOLOR\nreflectivity.rgb=toLinearSpace(reflectivityColor.xyz);reflectivity.a=1.0;\n#endif\n#endif\n#ifdef GLOSSINESSS\nreflectivity.a*=glossiness; \n#endif\n#endif\ngl_FragData[REFLECTIVITY_INDEX]=reflectivity;\n#endif\n}\n";i.l.ShadersStore[s]||(i.l.ShadersStore[s]=o);const l={name:s,shader:o}}}]);