"use strict";(self.webpackChunkeverything_viewer=self.webpackChunkeverything_viewer||[]).push([[227],{227:(e,t,s)=>{s.r(t),s.d(t,{OpenPBRMaterial:()=>v,OpenPBRMaterialDefines:()=>F});var i=s(75524),r=s(79259),a=s(4109),o=s(48802),n=s(26041),h=s(31088),l=s(82781),u=s(56552),_=s(28986),A=s(26877),T=s(79526),c=s(76911),g=s(82565),p=s(30492),m=s(80467),E=s(95616),R=s(18598),S=s(97667),d=s(10633),L=s(51137),C=s(79384),f=s(79923),O=s(98715),I=s(21644),P=s(17931);const y={effect:null,subMesh:null};class N{populateVectorFromLinkedProperties(e){const t=e.dimension[0];for(const e in this.linkedProperties){const s=this.linkedProperties[e],i=s.numComponents;if(t<i||s.targetUniformComponentOffset>t-i)return void(1==i?L.V.Error(`Float property ${s.name} has an offset that is too large.`):L.V.Error(`Vector${i} property ${s.name} won't fit in Vector${t} or has an offset that is too large.`));"number"==typeof s.value?N._tmpArray[s.targetUniformComponentOffset]=s.value:s.value.toArray(N._tmpArray,s.targetUniformComponentOffset)}e.fromArray(N._tmpArray)}constructor(e,t){this.linkedProperties={},this.name=e,this.numComponents=t}}N._tmpArray=[0,0,0,0];class M{constructor(e,t,s,i,r=0){this.targetUniformComponentNum=4,this.targetUniformComponentOffset=0,this.name=e,this.targetUniformName=s,this.defaultValue=t,this.value=t,this.targetUniformComponentNum=i,this.targetUniformComponentOffset=r}get numComponents(){return"number"==typeof this.defaultValue?1:this.defaultValue.dimension[0]}}class x{get samplerName(){return this.samplerPrefix+"Sampler"}get samplerInfoName(){return"v"+this.samplerPrefix.charAt(0).toUpperCase()+this.samplerPrefix.slice(1)+"Infos"}get samplerMatrixName(){return this.samplerPrefix+"Matrix"}constructor(e,t,s){this.value=null,this.samplerPrefix="",this.textureDefine="",this.name=e,this.samplerPrefix=t,this.textureDefine=s}}class b extends((0,C.F)(T.M)){}class F extends((0,c.W)(b)){constructor(e){super(e),this.NUM_SAMPLES="0",this.REALTIME_FILTERING=!1,this.IBL_CDF_FILTERING=!1,this.VERTEXCOLOR=!1,this.BAKED_VERTEX_ANIMATION_TEXTURE=!1,this.VERTEXALPHA=!1,this.ALPHATEST=!1,this.DEPTHPREPASS=!1,this.ALPHABLEND=!1,this.ALPHA_FROM_BASE_COLOR_TEXTURE=!1,this.ALPHATESTVALUE="0.5",this.PREMULTIPLYALPHA=!1,this.REFLECTIVITY_GAMMA=!1,this.REFLECTIVITYDIRECTUV=0,this.SPECULARTERM=!1,this.LODBASEDMICROSFURACE=!0,this.METALLICWORKFLOW=!0,this.ROUGHNESSSTOREINMETALMAPALPHA=!1,this.ROUGHNESSSTOREINMETALMAPGREEN=!1,this.METALLNESSSTOREINMETALMAPBLUE=!1,this.AOSTOREINMETALMAPRED=!1,this.SPECULAR_WEIGHT_IN_ALPHA=!1,this.SPECULAR_WEIGHT_FROM_SPECULAR_COLOR_TEXTURE=!1,this.SPECULAR_ROUGHNESS_ANISOTROPY_FROM_TANGENT_TEXTURE=!1,this.COAT_ROUGHNESS_ANISOTROPY_FROM_TANGENT_TEXTURE=!1,this.USE_GLTF_STYLE_ANISOTROPY=!1,this.ENVIRONMENTBRDF=!1,this.ENVIRONMENTBRDF_RGBD=!1,this.NORMAL=!1,this.TANGENT=!1,this.OBJECTSPACE_NORMALMAP=!1,this.PARALLAX=!1,this.PARALLAX_RHS=!1,this.PARALLAXOCCLUSION=!1,this.NORMALXYSCALE=!0,this.ANISOTROPIC=!1,this.ANISOTROPIC_OPENPBR=!0,this.ANISOTROPIC_BASE=!1,this.ANISOTROPIC_COAT=!1,this.REFLECTION=!1,this.REFLECTIONMAP_3D=!1,this.REFLECTIONMAP_SPHERICAL=!1,this.REFLECTIONMAP_PLANAR=!1,this.REFLECTIONMAP_CUBIC=!1,this.USE_LOCAL_REFLECTIONMAP_CUBIC=!1,this.REFLECTIONMAP_PROJECTION=!1,this.REFLECTIONMAP_SKYBOX=!1,this.REFLECTIONMAP_EXPLICIT=!1,this.REFLECTIONMAP_EQUIRECTANGULAR=!1,this.REFLECTIONMAP_EQUIRECTANGULAR_FIXED=!1,this.REFLECTIONMAP_MIRROREDEQUIRECTANGULAR_FIXED=!1,this.INVERTCUBICMAP=!1,this.USESPHERICALFROMREFLECTIONMAP=!1,this.USEIRRADIANCEMAP=!1,this.USE_IRRADIANCE_DOMINANT_DIRECTION=!1,this.USESPHERICALINVERTEX=!1,this.REFLECTIONMAP_OPPOSITEZ=!1,this.LODINREFLECTIONALPHA=!1,this.GAMMAREFLECTION=!1,this.RGBDREFLECTION=!1,this.RADIANCEOCCLUSION=!1,this.HORIZONOCCLUSION=!1,this.INSTANCES=!1,this.THIN_INSTANCES=!1,this.INSTANCESCOLOR=!1,this.PREPASS=!1,this.PREPASS_COLOR=!1,this.PREPASS_COLOR_INDEX=-1,this.PREPASS_IRRADIANCE=!1,this.PREPASS_IRRADIANCE_INDEX=-1,this.PREPASS_ALBEDO=!1,this.PREPASS_ALBEDO_INDEX=-1,this.PREPASS_ALBEDO_SQRT=!1,this.PREPASS_ALBEDO_SQRT_INDEX=-1,this.PREPASS_DEPTH=!1,this.PREPASS_DEPTH_INDEX=-1,this.PREPASS_SCREENSPACE_DEPTH=!1,this.PREPASS_SCREENSPACE_DEPTH_INDEX=-1,this.PREPASS_NORMALIZED_VIEW_DEPTH=!1,this.PREPASS_NORMALIZED_VIEW_DEPTH_INDEX=-1,this.PREPASS_NORMAL=!1,this.PREPASS_NORMAL_INDEX=-1,this.PREPASS_NORMAL_WORLDSPACE=!1,this.PREPASS_WORLD_NORMAL=!1,this.PREPASS_WORLD_NORMAL_INDEX=-1,this.PREPASS_POSITION=!1,this.PREPASS_POSITION_INDEX=-1,this.PREPASS_LOCAL_POSITION=!1,this.PREPASS_LOCAL_POSITION_INDEX=-1,this.PREPASS_VELOCITY=!1,this.PREPASS_VELOCITY_INDEX=-1,this.PREPASS_VELOCITY_LINEAR=!1,this.PREPASS_VELOCITY_LINEAR_INDEX=-1,this.PREPASS_REFLECTIVITY=!1,this.PREPASS_REFLECTIVITY_INDEX=-1,this.SCENE_MRT_COUNT=0,this.NUM_BONE_INFLUENCERS=0,this.BonesPerMesh=0,this.BONETEXTURE=!1,this.BONES_VELOCITY_ENABLED=!1,this.NONUNIFORMSCALING=!1,this.MORPHTARGETS=!1,this.MORPHTARGETS_POSITION=!1,this.MORPHTARGETS_NORMAL=!1,this.MORPHTARGETS_TANGENT=!1,this.MORPHTARGETS_UV=!1,this.MORPHTARGETS_UV2=!1,this.MORPHTARGETS_COLOR=!1,this.MORPHTARGETTEXTURE_HASPOSITIONS=!1,this.MORPHTARGETTEXTURE_HASNORMALS=!1,this.MORPHTARGETTEXTURE_HASTANGENTS=!1,this.MORPHTARGETTEXTURE_HASUVS=!1,this.MORPHTARGETTEXTURE_HASUV2S=!1,this.MORPHTARGETTEXTURE_HASCOLORS=!1,this.NUM_MORPH_INFLUENCERS=0,this.MORPHTARGETS_TEXTURE=!1,this.USEPHYSICALLIGHTFALLOFF=!1,this.USEGLTFLIGHTFALLOFF=!1,this.TWOSIDEDLIGHTING=!1,this.MIRRORED=!1,this.SHADOWFLOAT=!1,this.CLIPPLANE=!1,this.CLIPPLANE2=!1,this.CLIPPLANE3=!1,this.CLIPPLANE4=!1,this.CLIPPLANE5=!1,this.CLIPPLANE6=!1,this.POINTSIZE=!1,this.FOG=!1,this.LOGARITHMICDEPTH=!1,this.CAMERA_ORTHOGRAPHIC=!1,this.CAMERA_PERSPECTIVE=!1,this.AREALIGHTSUPPORTED=!0,this.FORCENORMALFORWARD=!1,this.SPECULARAA=!1,this.UNLIT=!1,this.DECAL_AFTER_DETAIL=!1,this.DEBUGMODE=0,this.CLUSTLIGHT_SLICES=0,this.CLUSTLIGHT_BATCH=0,this.BRDF_V_HEIGHT_CORRELATED=!0,this.MS_BRDF_ENERGY_CONSERVATION=!0,this.SPHERICAL_HARMONICS=!0,this.SPECULAR_GLOSSINESS_ENERGY_CONSERVATION=!0,this.MIX_IBL_RADIANCE_WITH_IRRADIANCE=!0,this.LEGACY_SPECULAR_ENERGY_CONSERVATION=!1,this.BASE_DIFFUSE_MODEL=0,this.DIELECTRIC_SPECULAR_MODEL=1,this.CONDUCTOR_SPECULAR_MODEL=1,this.rebuild()}reset(){super.reset(),this.ALPHATESTVALUE="0.5",this.NORMALXYSCALE=!0}}class D extends((0,O.O)(I.E)){}class v extends D{get geometryTangentAngle(){return Math.atan2(this.geometryTangent.y,this.geometryTangent.x)}set geometryTangentAngle(e){this.geometryTangent=new f.I9(Math.cos(e),Math.sin(e))}get geometryCoatTangentAngle(){return Math.atan2(this.geometryCoatTangent.y,this.geometryCoatTangent.x)}set geometryCoatTangentAngle(e){this.geometryCoatTangent=new f.I9(Math.cos(e),Math.sin(e))}get usePhysicalLightFalloff(){return this._lightFalloff===_.i.LIGHTFALLOFF_PHYSICAL}set usePhysicalLightFalloff(e){e!==this.usePhysicalLightFalloff&&(this._markAllSubMeshesAsTexturesDirty(),this._lightFalloff=e?_.i.LIGHTFALLOFF_PHYSICAL:_.i.LIGHTFALLOFF_STANDARD)}get useGLTFLightFalloff(){return this._lightFalloff===_.i.LIGHTFALLOFF_GLTF}set useGLTFLightFalloff(e){e!==this.useGLTFLightFalloff&&(this._markAllSubMeshesAsTexturesDirty(),this._lightFalloff=e?_.i.LIGHTFALLOFF_GLTF:_.i.LIGHTFALLOFF_STANDARD)}get realTimeFiltering(){return this._realTimeFiltering}set realTimeFiltering(e){this._realTimeFiltering=e,this.markAsDirty(1)}get realTimeFilteringQuality(){return this._realTimeFilteringQuality}set realTimeFilteringQuality(e){this._realTimeFilteringQuality=e,this.markAsDirty(1)}get canRenderToMRT(){return!0}constructor(e,t,s=!1){super(e,t,void 0,s||v.ForceGLSL),this._baseWeight=new M("base_weight",1,"vBaseWeight",1),this._baseWeightTexture=new x("base_weight","baseWeight","BASE_WEIGHT"),this._baseColor=new M("base_color",n.v9.White(),"vBaseColor",4),this._baseColorTexture=new x("base_color","baseColor","BASE_COLOR"),this._baseDiffuseRoughness=new M("base_diffuse_roughness",0,"vBaseDiffuseRoughness",1),this._baseDiffuseRoughnessTexture=new x("base_diffuse_roughness","baseDiffuseRoughness","BASE_DIFFUSE_ROUGHNESS"),this._baseMetalness=new M("base_metalness",0,"vReflectanceInfo",4,0),this._baseMetalnessTexture=new x("base_metalness","baseMetalness","BASE_METALNESS"),this._specularWeight=new M("specular_weight",1,"vReflectanceInfo",4,3),this._specularWeightTexture=new x("specular_weight","specularWeight","SPECULAR_WEIGHT"),this._specularColor=new M("specular_color",n.v9.White(),"vSpecularColor",4),this._specularColorTexture=new x("specular_color","specularColor","SPECULAR_COLOR"),this._specularRoughness=new M("specular_roughness",.3,"vReflectanceInfo",4,1),this._specularRoughnessTexture=new x("specular_roughness","specularRoughness","SPECULAR_ROUGHNESS"),this._specularRoughnessAnisotropy=new M("specular_roughness_anisotropy",0,"vSpecularAnisotropy",3,2),this._specularRoughnessAnisotropyTexture=new x("specular_roughness_anisotropy","specularRoughnessAnisotropy","SPECULAR_ROUGHNESS_ANISOTROPY"),this._specularIor=new M("specular_ior",1.5,"vReflectanceInfo",4,2),this._coatWeight=new M("coat_weight",0,"vCoatWeight",1,0),this._coatWeightTexture=new x("coat_weight","coatWeight","COAT_WEIGHT"),this._coatColor=new M("coat_color",n.v9.White(),"vCoatColor",3,0),this._coatColorTexture=new x("coat_color","coatColor","COAT_COLOR"),this._coatRoughness=new M("coat_roughness",0,"vCoatRoughness",1,0),this._coatRoughnessTexture=new x("coat_roughness","coatRoughness","COAT_ROUGHNESS"),this._coatRoughnessAnisotropy=new M("coat_roughness_anisotropy",0,"vCoatRoughnessAnisotropy",1),this._coatRoughnessAnisotropyTexture=new x("coat_roughness_anisotropy","coatRoughnessAnisotropy","COAT_ROUGHNESS_ANISOTROPY"),this._coatIor=new M("coat_ior",1.5,"vCoatIor",1,0),this._coatDarkening=new M("coat_darkening",1,"vCoatDarkening",1,0),this._coatDarkeningTexture=new x("coat_darkening","coatDarkening","COAT_DARKENING"),this.useCoatRoughnessFromWeightTexture=!1,this._geometryNormalTexture=new x("geometry_normal","geometryNormal","GEOMETRY_NORMAL"),this._geometryTangent=new M("geometry_tangent",new f.I9(1,0),"vSpecularAnisotropy",3,0),this._geometryTangentTexture=new x("geometry_tangent","geometryTangent","GEOMETRY_TANGENT"),this._geometryCoatNormalTexture=new x("geometry_coat_normal","geometryCoatNormal","GEOMETRY_COAT_NORMAL"),this._geometryCoatTangent=new M("geometry_coat_tangent",new f.I9(1,0),"vGeometryCoatTangent",2,0),this._geometryCoatTangentTexture=new x("geometry_coat_tangent","geometryCoatTangent","GEOMETRY_COAT_TANGENT"),this._geometryOpacity=new M("geometry_opacity",1,"vBaseColor",4,3),this._geometryOpacityTexture=new x("geometry_opacity","geometryOpacity","GEOMETRY_OPACITY"),this._emissionLuminance=new M("emission_luminance",1,"vLightingIntensity",4,1),this._emissionColor=new M("emission_color",n.v9.Black(),"vEmissionColor",3),this._emissionColorTexture=new x("emission_color","emissionColor","EMISSION_COLOR"),this._ambientOcclusionTexture=new x("ambient_occlusion","ambientOcclusion","AMBIENT_OCCLUSION"),this._uniformsList={},this._samplersList={},this._samplerDefines={},this.directIntensity=1,this.environmentIntensity=1,this.useSpecularWeightFromTextureAlpha=!1,this.forceAlphaTest=!1,this.alphaCutOff=.4,this.useAmbientOcclusionFromMetallicTextureRed=!1,this.useAmbientInGrayScale=!1,this.useObjectSpaceNormalMap=!1,this.useParallax=!1,this.useParallaxOcclusion=!1,this.parallaxScaleBias=.05,this.disableLighting=!1,this.forceIrradianceInFragment=!1,this.maxSimultaneousLights=4,this.invertNormalMapX=!1,this.invertNormalMapY=!1,this.twoSidedLighting=!1,this.useAlphaFresnel=!1,this.useLinearAlphaFresnel=!1,this.environmentBRDFTexture=null,this.forceNormalForward=!1,this.enableSpecularAntiAliasing=!1,this.useHorizonOcclusion=!0,this.useRadianceOcclusion=!0,this.unlit=!1,this.applyDecalMapAfterDetailMap=!1,this._lightingInfos=new f.IU(this.directIntensity,1,this.environmentIntensity,1),this._radianceTexture=null,this._useSpecularWeightFromAlpha=!1,this._useSpecularWeightFromSpecularColorTexture=!1,this._useSpecularRoughnessAnisotropyFromTangentTexture=!1,this._useCoatRoughnessAnisotropyFromTangentTexture=!1,this._useGltfStyleAnisotropy=!1,this._useHorizonOcclusion=!0,this._useRadianceOcclusion=!0,this._useAlphaFromBaseColorTexture=!1,this._useAmbientOcclusionFromMetallicTextureRed=!1,this._useRoughnessFromMetallicTextureGreen=!1,this._useMetallicFromMetallicTextureBlue=!1,this._lightFalloff=_.i.LIGHTFALLOFF_PHYSICAL,this._useObjectSpaceNormalMap=!1,this._useParallax=!1,this._useParallaxOcclusion=!1,this._parallaxScaleBias=.05,this._disableLighting=!1,this._maxSimultaneousLights=4,this._invertNormalMapX=!1,this._invertNormalMapY=!1,this._twoSidedLighting=!1,this._alphaCutOff=.4,this._useAlphaFresnel=!1,this._useLinearAlphaFresnel=!1,this._environmentBRDFTexture=null,this._forceIrradianceInFragment=!1,this._realTimeFiltering=!1,this._realTimeFilteringQuality=8,this._forceNormalForward=!1,this._enableSpecularAntiAliasing=!1,this._renderTargets=new P.L(16),this._unlit=!1,this._applyDecalMapAfterDetailMap=!1,this._debugMode=0,this._shadersLoaded=!1,this._breakShaderLoadedCheck=!1,this.debugMode=0,this.debugLimit=-1,this.debugFactor=1,this._cacheHasRenderTargetTextures=!1,this._transparencyMode=_.i.MATERIAL_OPAQUE,this.getScene()&&!this.getScene()?.getEngine().isWebGPU&&this.getScene().getEngine().webGLVersion<2&&L.V.Error("OpenPBRMaterial: WebGL 2.0 or above is required for this material."),v._noiseTextures[this.getScene().uniqueId]||(v._noiseTextures[this.getScene().uniqueId]=new l.g("https://assets.babylonjs.com/textures/blue_noise/blue_noise_rgb.png",this.getScene(),!1,!0,1),this.getScene().onDisposeObservable.addOnce(()=>{v._noiseTextures[this.getScene().uniqueId]?.dispose(),delete v._noiseTextures[this.getScene().uniqueId]})),this._attachImageProcessingConfiguration(null),this.getRenderTargetTextures=()=>(this._renderTargets.reset(),d.h.ReflectionTextureEnabled&&this._radianceTexture&&this._radianceTexture.isRenderTarget&&this._renderTargets.push(this._radianceTexture),this._eventInfo.renderTargets=this._renderTargets,this._callbackPluginEventFillRenderTargetTextures(this._eventInfo),this._renderTargets),this._environmentBRDFTexture=(0,a.X)(this.getScene()),this.prePassConfiguration=new S.J,this._propertyList={};for(const e of Object.getOwnPropertyNames(this)){const t=this[e];t instanceof M&&(this._propertyList[e]=t)}Object.keys(this._propertyList).forEach(e=>{const t=this._propertyList[e];let s=this._uniformsList[t.targetUniformName];s?s.numComponents!==t.targetUniformComponentNum&&L.V.Error(`Uniform ${t.targetUniformName} already exists of size ${s.numComponents}, but trying to set it to ${t.targetUniformComponentNum}.`):(s=new N(t.targetUniformName,t.targetUniformComponentNum),this._uniformsList[t.targetUniformName]=s),s.linkedProperties[t.name]=t}),this._samplersList={};for(const e of Object.getOwnPropertyNames(this)){const t=this[e];t instanceof x&&(this._samplersList[e]=t)}for(const e in this._samplersList){const t=this._samplersList[e].textureDefine;this._samplerDefines[t]={type:"boolean",default:!1},this._samplerDefines[t+"DIRECTUV"]={type:"number",default:0},this._samplerDefines[t+"_GAMMA"]={type:"boolean",default:!1}}this._baseWeight,this._baseWeightTexture,this._baseColor,this._baseColorTexture,this._baseDiffuseRoughness,this._baseDiffuseRoughnessTexture,this._baseMetalness,this._baseMetalnessTexture,this._specularWeight,this._specularWeightTexture,this._specularColor,this._specularColorTexture,this._specularRoughness,this._specularIor,this._specularRoughnessTexture,this._specularRoughnessAnisotropy,this._specularRoughnessAnisotropyTexture,this._coatWeight,this._coatWeightTexture,this._coatColor,this._coatColorTexture,this._coatRoughness,this._coatRoughnessTexture,this._coatRoughnessAnisotropy,this._coatRoughnessAnisotropyTexture,this._coatIor,this._coatDarkening,this._coatDarkeningTexture,this._geometryNormalTexture,this._geometryTangent,this._geometryTangentTexture,this._geometryCoatNormalTexture,this._geometryCoatTangent,this._geometryCoatTangentTexture,this._geometryOpacity,this._geometryOpacityTexture,this._emissionLuminance,this._emissionColor,this._emissionColorTexture,this._ambientOcclusionTexture}get hasRenderTargetTextures(){return!!(d.h.ReflectionTextureEnabled&&this._radianceTexture&&this._radianceTexture.isRenderTarget)||this._cacheHasRenderTargetTextures}get isPrePassCapable(){return!this.disableDepthWrite}getClassName(){return"OpenPBRMaterial"}get transparencyMode(){return this._transparencyMode}set transparencyMode(e){this._transparencyMode!==e&&(this._transparencyMode=e,this._markAllSubMeshesAsTexturesAndMiscDirty())}_shouldUseAlphaFromBaseColorTexture(){return this._hasAlphaChannel()&&this._transparencyMode!==_.i.MATERIAL_OPAQUE&&!this.geometryOpacityTexture}_hasAlphaChannel(){return null!=this.baseColorTexture&&this.baseColorTexture.hasAlpha&&this._useAlphaFromBaseColorTexture||null!=this.geometryOpacityTexture}clone(e,t=!0,s=""){const i=A.p.Clone(()=>new v(e,this.getScene()),this,{cloneTexturesOnlyOnce:t});return i.id=e,i.name=e,this.stencil.copyTo(i.stencil),this._clonePlugins(i,s),i}serialize(){const e=super.serialize();return e.customType="BABYLON.OpenPBRMaterial",e}static Parse(e,t,s){const i=A.p.Parse(()=>new v(e.name,t),e,t,s);return e.stencil&&i.stencil.parse(e.stencil,t,s),_.i._ParsePlugins(e,i,t,s),i}forceCompilation(e,t,s){const i={clipPlane:!1,useInstances:!1,...s};this._uniformBufferLayoutBuilt||this.buildUniformLayout(),this._callbackPluginEventGeneric(4,this._eventInfo);(()=>{if(this._breakShaderLoadedCheck)return;const s=new F({...this._eventInfo.defineNames||{},...this._samplerDefines||{}}),r=this._prepareEffect(e,e,s,void 0,void 0,i.useInstances,i.clipPlane);this._onEffectCreatedObservable&&(y.effect=r,y.subMesh=null,this._onEffectCreatedObservable.notifyObservers(y)),r.isReady()?t&&t(this):r.onCompileObservable.add(()=>{t&&t(this)})})()}isReadyForSubMesh(e,t,s){this._uniformBufferLayoutBuilt||this.buildUniformLayout();const i=t._drawWrapper;if(i.effect&&this.isFrozen&&i._wasPreviouslyReady&&i._wasPreviouslyUsingInstances===s)return!0;t.materialDefines||(this._callbackPluginEventGeneric(4,this._eventInfo),t.materialDefines=new F({...this._eventInfo.defineNames||{},...this._samplerDefines||{}}));const r=t.materialDefines;if(this._isReadyForSubMesh(t))return!0;const a=this.getScene(),o=a.getEngine();if(r._areTexturesDirty&&(this._eventInfo.hasRenderTargetTextures=!1,this._callbackPluginEventHasRenderTargetTextures(this._eventInfo),this._cacheHasRenderTargetTextures=this._eventInfo.hasRenderTargetTextures,a.texturesEnabled)){for(const e in this._samplersList){const t=this._samplersList[e];if(t.value&&!t.value.isReadyOrNotBlocking())return!1}const e=this._getRadianceTexture();if(e&&d.h.ReflectionTextureEnabled){if(!e.isReadyOrNotBlocking())return!1;if(e.irradianceTexture){if(!e.irradianceTexture.isReadyOrNotBlocking())return!1}else if(!e.sphericalPolynomial&&e.getInternalTexture()?._sphericalPolynomialPromise)return!1}if(this._environmentBRDFTexture&&d.h.ReflectionTextureEnabled&&!this._environmentBRDFTexture.isReady())return!1;if(v._noiseTextures[a.uniqueId]&&!v._noiseTextures[a.uniqueId].isReady())return!1}if(this._eventInfo.isReadyForSubMesh=!0,this._eventInfo.defines=r,this._eventInfo.subMesh=t,this._callbackPluginEventIsReadyForSubMesh(this._eventInfo),!this._eventInfo.isReadyForSubMesh)return!1;if(r._areImageProcessingDirty&&this._imageProcessingConfiguration&&!this._imageProcessingConfiguration.isReady())return!1;if(r.AREALIGHTUSED)for(let t=0;t<e.lightSources.length;t++)if(!e.lightSources[t]._isReady())return!1;o.getCaps().standardDerivatives||e.isVerticesDataPresent(E.R.NormalKind)||(e.createNormals(!0),L.V.Warn("OpenPBRMaterial: Normals have been created for the mesh: "+e.name));const n=t.effect,h=r._areLightsDisposed;let l=this._prepareEffect(e,t.getRenderingMesh(),r,this.onCompiled,this.onError,s,null),u=!1;if(l)if(this._onEffectCreatedObservable&&(y.effect=l,y.subMesh=t,this._onEffectCreatedObservable.notifyObservers(y)),this.allowShaderHotSwapping&&n&&!l.isReady()){if(l=n,r.markAsUnprocessed(),u=this.isFrozen,h)return r._areLightsDisposed=!0,!1}else a.resetCachedMaterial(),t.setEffect(l,r,this._materialContext);return!(!t.effect||!t.effect.isReady())&&(r._renderId=a.getRenderId(),i._wasPreviouslyReady=!u,i._wasPreviouslyUsingInstances=!!s,this._checkScenePerformancePriority(),!0)}buildUniformLayout(){const e=this._uniformBuffer;e.addUniform("vTangentSpaceParams",2),e.addUniform("vLightingIntensity",4),e.addUniform("pointSize",1),e.addUniform("vDebugMode",2),e.addUniform("cameraInfo",4),(0,m.G$)(e,!0,!0,!0,!0,!0),Object.values(this._uniformsList).forEach(t=>{e.addUniform(t.name,t.numComponents)}),Object.values(this._samplersList).forEach(t=>{e.addUniform(t.samplerInfoName,2),e.addUniform(t.samplerMatrixName,16)}),super.buildUniformLayout()}bindForSubMesh(e,t,s){const i=this.getScene(),r=s.materialDefines;if(!r)return;const a=s.effect;if(!a)return;this._activeEffect=a,t.getMeshUniformBuffer().bindToEffect(a,"Mesh"),t.transferToEffect(e);const h=i.getEngine();this._uniformBuffer.bindToEffect(a,"Material"),this.prePassConfiguration.bindForSubMesh(this._activeEffect,i,t,e,this.isFrozen),R.m.Bind(h.currentRenderPassId,this._activeEffect,t,e,this);const l=i.activeCamera;l?this._uniformBuffer.updateFloat4("cameraInfo",l.minZ,l.maxZ,0,0):this._uniformBuffer.updateFloat4("cameraInfo",0,0,0,0),this._eventInfo.subMesh=s,this._callbackPluginEventHardBindForSubMesh(this._eventInfo),r.OBJECTSPACE_NORMALMAP&&(e.toNormalMatrix(this._normalMatrix),this.bindOnlyNormalMatrix(this._normalMatrix));const u=this._mustRebind(i,a,s,t.visibility);(0,m.f$)(t,this._activeEffect,this.prePassConfiguration);let _=null;const A=this._uniformBuffer;if(u){if(this.bindViewProjection(a),_=this._getRadianceTexture(),!A.useUbo||!this.isFrozen||!A.isSync||s._drawWrapper._forceRebindOnNextCall){if(i.texturesEnabled){for(const e in this._samplersList){const t=this._samplersList[e];t.value&&(A.updateFloat2(t.samplerInfoName,t.value.coordinatesIndex,t.value.level),(0,m.mA)(t.value,A,t.samplerPrefix))}this.geometryNormalTexture&&(i._mirroredCameraPosition?A.updateFloat2("vTangentSpaceParams",this._invertNormalMapX?1:-1,this._invertNormalMapY?1:-1):A.updateFloat2("vTangentSpaceParams",this._invertNormalMapX?-1:1,this._invertNormalMapY?-1:1)),(0,m.X8)(i,r,A,n.v9.White(),_,this.realTimeFiltering,!0,!0,!0,!0,!0)}this.pointsCloud&&A.updateFloat("pointSize",this.pointSize),Object.values(this._uniformsList).forEach(e=>{4===e.numComponents?(e.populateVectorFromLinkedProperties(f.AA.Vector4[0]),A.updateVector4(e.name,f.AA.Vector4[0])):3===e.numComponents?(e.populateVectorFromLinkedProperties(f.AA.Vector3[0]),A.updateVector3(e.name,f.AA.Vector3[0])):2===e.numComponents?(e.populateVectorFromLinkedProperties(f.AA.Vector2[0]),A.updateFloat2(e.name,f.AA.Vector2[0].x,f.AA.Vector2[0].y)):1===e.numComponents&&A.updateFloat(e.name,e.linkedProperties[Object.keys(e.linkedProperties)[0]].value)}),this._lightingInfos.x=this.directIntensity,this._lightingInfos.y=this.emissionLuminance,this._lightingInfos.z=this.environmentIntensity*i.environmentIntensity,this._lightingInfos.w=1,A.updateVector4("vLightingIntensity",this._lightingInfos),A.updateFloat2("vDebugMode",this.debugLimit,this.debugFactor)}if(i.texturesEnabled){for(const e in this._samplersList){const t=this._samplersList[e];t.value&&A.setTexture(t.samplerName,t.value)}(0,m.Wp)(i,r,A,_,this.realTimeFiltering),r.ENVIRONMENTBRDF&&A.setTexture("environmentBrdfSampler",this._environmentBRDFTexture),r.ANISOTROPIC&&A.setTexture("blueNoiseSampler",v._noiseTextures[this.getScene().uniqueId])}this.getScene().useOrderIndependentTransparency&&this.needAlphaBlendingForMesh(t)&&this.getScene().depthPeelingRenderer.bind(a),this._eventInfo.subMesh=s,this._callbackPluginEventBindForSubMesh(this._eventInfo),(0,p.ij)(this._activeEffect,this,i),this.bindEyePosition(a)}else i.getEngine()._features.needToAlwaysBindUniformBuffers&&(this._needToBindSceneUbo=!0);!u&&this.isFrozen||(i.lightsEnabled&&!this._disableLighting&&(0,m.RL)(i,t,this._activeEffect,r,this._maxSimultaneousLights),(i.fogEnabled&&t.applyFog&&i.fogMode!==o.Z.FOGMODE_NONE||_||t.receiveShadows||r.PREPASS)&&this.bindView(a),(0,m.Yy)(i,t,this._activeEffect,!0),r.NUM_MORPH_INFLUENCERS&&(0,m.nR)(t,this._activeEffect),r.BAKED_VERTEX_ANIMATION_TEXTURE&&t.bakedVertexAnimationManager?.bind(a,r.INSTANCES),this._imageProcessingConfiguration.bind(this._activeEffect),(0,m.DL)(r,this._activeEffect,i)),this._afterBind(t,this._activeEffect,s),A.update()}getAnimatables(){const e=super.getAnimatables();for(const t in this._samplersList){const s=this._samplersList[t];s.value&&s.value.animations&&s.value.animations.length>0&&e.push(s.value)}return this._radianceTexture&&this._radianceTexture.animations&&this._radianceTexture.animations.length>0&&e.push(this._radianceTexture),e}getActiveTextures(){const e=super.getActiveTextures();for(const t in this._samplersList){const s=this._samplersList[t];s.value&&e.push(s.value)}return this._radianceTexture&&e.push(this._radianceTexture),e}hasTexture(e){if(super.hasTexture(e))return!0;for(const t in this._samplersList){if(this._samplersList[t].value===e)return!0}return this._radianceTexture===e}setPrePassRenderer(){return!1}dispose(e,t){if(this._breakShaderLoadedCheck=!0,t){this._environmentBRDFTexture&&this.getScene().environmentBRDFTexture!==this._environmentBRDFTexture&&this._environmentBRDFTexture.dispose();for(const e in this._samplersList){const t=this._samplersList[e];t.value?.dispose()}this._radianceTexture?.dispose()}this._renderTargets.dispose(),this._imageProcessingConfiguration&&this._imageProcessingObserver&&this._imageProcessingConfiguration.onUpdateParameters.remove(this._imageProcessingObserver),super.dispose(e,t)}_getRadianceTexture(){return this._radianceTexture?this._radianceTexture:this.getScene().environmentTexture}_prepareEffect(e,t,i,r=null,a=null,o=null,n=null){if(this._prepareDefines(e,t,i,o,n),!i.isDirty)return null;i.markAsProcessed();const l=this.getScene().getEngine(),u=new g.J;let _=0;i.USESPHERICALINVERTEX&&u.addFallback(_++,"USESPHERICALINVERTEX"),i.FOG&&u.addFallback(_,"FOG"),i.SPECULARAA&&u.addFallback(_,"SPECULARAA"),i.POINTSIZE&&u.addFallback(_,"POINTSIZE"),i.LOGARITHMICDEPTH&&u.addFallback(_,"LOGARITHMICDEPTH"),i.PARALLAX&&u.addFallback(_,"PARALLAX"),i.PARALLAX_RHS&&u.addFallback(_,"PARALLAX_RHS"),i.PARALLAXOCCLUSION&&u.addFallback(_++,"PARALLAXOCCLUSION"),i.ENVIRONMENTBRDF&&u.addFallback(_++,"ENVIRONMENTBRDF"),i.TANGENT&&u.addFallback(_++,"TANGENT"),_=(0,m.c4)(i,u,this._maxSimultaneousLights,_++),i.SPECULARTERM&&u.addFallback(_++,"SPECULARTERM"),i.USESPHERICALFROMREFLECTIONMAP&&u.addFallback(_++,"USESPHERICALFROMREFLECTIONMAP"),i.USEIRRADIANCEMAP&&u.addFallback(_++,"USEIRRADIANCEMAP"),i.NORMAL&&u.addFallback(_++,"NORMAL"),i.VERTEXCOLOR&&u.addFallback(_++,"VERTEXCOLOR"),i.MORPHTARGETS&&u.addFallback(_++,"MORPHTARGETS"),i.MULTIVIEW&&u.addFallback(0,"MULTIVIEW");const A=[E.R.PositionKind];i.NORMAL&&A.push(E.R.NormalKind),i.TANGENT&&A.push(E.R.TangentKind);for(let e=1;e<=6;++e)i["UV"+e]&&A.push(`uv${1===e?"":e}`);i.VERTEXCOLOR&&A.push(E.R.ColorKind),(0,m.ni)(A,e,i,u),(0,m.ER)(A,i),(0,m.IF)(A,e,i),(0,m.J2)(A,e,i);let T="openpbr";const c=["world","view","viewProjection","vEyePosition","vLightsType","visibility","vFogInfos","vFogColor","pointSize","mBones","normalMatrix","vLightingIntensity","logarithmicDepthConstant","vTangentSpaceParams","boneTextureWidth","vDebugMode","morphTargetTextureInfo","morphTargetTextureIndices","cameraInfo"];for(const e in this._uniformsList)c.push(e);const d=["environmentBrdfSampler","blueNoiseSampler","boneSampler","morphTargets","oitDepthSampler","oitFrontColorSampler","areaLightsLTC1Sampler","areaLightsLTC2Sampler"];for(const e in this._samplersList){const t=this._samplersList[e];d.push(t.samplerName),c.push(t.samplerInfoName),c.push(t.samplerMatrixName)}(0,m.B1)(c,d,!0);const L=["Material","Scene","Mesh"],C={maxSimultaneousLights:this._maxSimultaneousLights,maxSimultaneousMorphTargets:i.NUM_MORPH_INFLUENCERS};this._eventInfo.fallbacks=u,this._eventInfo.fallbackRank=_,this._eventInfo.defines=i,this._eventInfo.uniforms=c,this._eventInfo.attributes=A,this._eventInfo.samplers=d,this._eventInfo.uniformBuffersNames=L,this._eventInfo.customCode=void 0,this._eventInfo.mesh=e,this._eventInfo.indexParameters=C,this._callbackPluginEventGeneric(128,this._eventInfo),R.m.AddUniformsAndSamplers(c,d),S.J.AddUniforms(c),S.J.AddSamplers(d),(0,p.Ll)(c),h.p&&(h.p.PrepareUniforms(c,i),h.p.PrepareSamplers(d,i)),(0,m.Bb)({uniformsNames:c,uniformBuffersNames:L,samplers:d,defines:i,maxSimultaneousLights:this._maxSimultaneousLights});const f={};this.customShaderNameResolve&&(T=this.customShaderNameResolve(T,c,L,d,i,A,f));const O=i.toString(),I=l.createEffect(T,{attributes:A,uniformsNames:c,uniformBuffersNames:L,samplers:d,defines:O,fallbacks:u,onCompiled:r,onError:a,indexParameters:C,processFinalCode:f.processFinalCode,processCodeAfterIncludes:this._eventInfo.customCode,multiTarget:i.PREPASS,shaderLanguage:this._shaderLanguage,extraInitializationsAsync:this._shadersLoaded?void 0:async()=>{1===this.shaderLanguage?await Promise.all([Promise.all([s.e(9331),s.e(4821)]).then(s.bind(s,64821)),Promise.all([s.e(2703),s.e(2179),s.e(3740),s.e(8858)]).then(s.bind(s,48858))]):await Promise.all([s.e(5565).then(s.bind(s,35565)),Promise.all([s.e(8481),s.e(9031),s.e(6502),s.e(273)]).then(s.bind(s,40273))]),this._shadersLoaded=!0}},l);return this._eventInfo.customCode=void 0,I}_prepareDefines(e,t,s,i=null,r=null){const a=t.hasThinInstances,o=this.getScene(),n=o.getEngine();(0,m.az)(o,e,s,!0,this._maxSimultaneousLights,this._disableLighting),s._needNormals=!0,(0,m.VO)(o,s);const h=this.needAlphaBlendingForMesh(e)&&this.getScene().useOrderIndependentTransparency;if((0,m.N4)(o,s,this.canRenderToMRT&&!h),(0,m.Nc)(o,s,h),R.m.PrepareDefines(n.currentRenderPassId,e,s),s.METALLICWORKFLOW=!0,s._areTexturesDirty){s._needUVs=!1;for(let e=1;e<=6;++e)s["MAINUV"+e]=!1;if(o.texturesEnabled){for(const e in this._samplersList){const t=this._samplersList[e];t.value?((0,m.YT)(t.value,s,t.textureDefine),s[t.textureDefine+"_GAMMA"]=t.value.gammaSpace):s[t.textureDefine]=!1}const e=this._getRadianceTexture(),t=this._forceIrradianceInFragment||this.realTimeFiltering||this._twoSidedLighting||n.getCaps().maxVaryingVectors<=8||null!=this._baseDiffuseRoughnessTexture;(0,m.kz)(o,e,s,this.realTimeFiltering,this.realTimeFilteringQuality,!t),this._baseMetalnessTexture&&(s.AOSTOREINMETALMAPRED=this._useAmbientOcclusionFromMetallicTextureRed),s.SPECULAR_WEIGHT_IN_ALPHA=this._useSpecularWeightFromAlpha,s.SPECULAR_WEIGHT_FROM_SPECULAR_COLOR_TEXTURE=this._useSpecularWeightFromSpecularColorTexture,s.SPECULAR_ROUGHNESS_ANISOTROPY_FROM_TANGENT_TEXTURE=this._useSpecularRoughnessAnisotropyFromTangentTexture,s.COAT_ROUGHNESS_ANISOTROPY_FROM_TANGENT_TEXTURE=this._useCoatRoughnessAnisotropyFromTangentTexture,s.ROUGHNESSSTOREINMETALMAPGREEN=this._useRoughnessFromMetallicTextureGreen,s.METALLNESSSTOREINMETALMAPBLUE=this._useMetallicFromMetallicTextureBlue,this.geometryNormalTexture?(this._useParallax&&this.baseColorTexture&&d.h.DiffuseTextureEnabled?(s.PARALLAX=!0,s.PARALLAX_RHS=o.useRightHandedSystem,s.PARALLAXOCCLUSION=!!this._useParallaxOcclusion):s.PARALLAX=!1,s.OBJECTSPACE_NORMALMAP=this._useObjectSpaceNormalMap):(s.PARALLAX=!1,s.PARALLAX_RHS=!1,s.PARALLAXOCCLUSION=!1,s.OBJECTSPACE_NORMALMAP=!1),this._environmentBRDFTexture&&d.h.ReflectionTextureEnabled?(s.ENVIRONMENTBRDF=!0,s.ENVIRONMENTBRDF_RGBD=this._environmentBRDFTexture.isRGBD):(s.ENVIRONMENTBRDF=!1,s.ENVIRONMENTBRDF_RGBD=!1),this._shouldUseAlphaFromBaseColorTexture()?s.ALPHA_FROM_BASE_COLOR_TEXTURE=!0:s.ALPHA_FROM_BASE_COLOR_TEXTURE=!1}this._lightFalloff===_.i.LIGHTFALLOFF_STANDARD?(s.USEPHYSICALLIGHTFALLOFF=!1,s.USEGLTFLIGHTFALLOFF=!1):this._lightFalloff===_.i.LIGHTFALLOFF_GLTF?(s.USEPHYSICALLIGHTFALLOFF=!1,s.USEGLTFLIGHTFALLOFF=!0):(s.USEPHYSICALLIGHTFALLOFF=!0,s.USEGLTFLIGHTFALLOFF=!1),!this.backFaceCulling&&this._twoSidedLighting?s.TWOSIDEDLIGHTING=!0:s.TWOSIDEDLIGHTING=!1,s.MIRRORED=!!o._mirroredCameraPosition,s.SPECULARAA=n.getCaps().standardDerivatives&&this._enableSpecularAntiAliasing}(s._areTexturesDirty||s._areMiscDirty)&&(s.ALPHATESTVALUE=`${this._alphaCutOff}${this._alphaCutOff%1==0?".":""}`,s.PREMULTIPLYALPHA=7===this.alphaMode||8===this.alphaMode,s.ALPHABLEND=this.needAlphaBlendingForMesh(e)),s._areImageProcessingDirty&&this._imageProcessingConfiguration&&this._imageProcessingConfiguration.prepareDefines(s),s.FORCENORMALFORWARD=this._forceNormalForward,s.RADIANCEOCCLUSION=this._useRadianceOcclusion,s.HORIZONOCCLUSION=this._useHorizonOcclusion,(this.specularRoughnessAnisotropy>0||this.coatRoughnessAnisotropy>0)&&v._noiseTextures[o.uniqueId]&&d.h.ReflectionTextureEnabled?(s.ANISOTROPIC=!0,e.isVerticesDataPresent(E.R.TangentKind)||(s._needUVs=!0,s.MAINUV1=!0),this._useGltfStyleAnisotropy&&(s.USE_GLTF_STYLE_ANISOTROPY=!0),s.ANISOTROPIC_BASE=this.specularRoughnessAnisotropy>0,s.ANISOTROPIC_COAT=this.coatRoughnessAnisotropy>0):(s.ANISOTROPIC=!1,s.USE_GLTF_STYLE_ANISOTROPY=!1,s.ANISOTROPIC_BASE=!1,s.ANISOTROPIC_COAT=!1),s._areMiscDirty&&((0,m.fm)(e,o,this._useLogarithmicDepth,this.pointsCloud,this.fogEnabled,this.needAlphaTestingForMesh(e),s,this._applyDecalMapAfterDetailMap,this._useVertexPulling,t,this._setVertexOutputInvariant),s.UNLIT=this._unlit||(this.pointsCloud||this.wireframe)&&!e.isVerticesDataPresent(E.R.NormalKind),s.DEBUGMODE=this._debugMode),(0,m.OR)(o,n,this,s,!!i,r,a),this._eventInfo.defines=s,this._eventInfo.mesh=e,this._callbackPluginEventPrepareDefinesBeforeAttributes(this._eventInfo),(0,m.qB)(e,s,!0,!0,!0,this._transparencyMode!==_.i.MATERIAL_OPAQUE),this._callbackPluginEventPrepareDefines(this._eventInfo)}}v._noiseTextures={},v.ForceGLSL=!1,(0,i.Cg)([(0,r.ru)("_markAllSubMeshesAsTexturesDirty","baseWeight")],v.prototype,"_baseWeight",void 0),(0,i.Cg)([(0,r.ru)("_markAllSubMeshesAsTexturesDirty","baseWeightTexture")],v.prototype,"_baseWeightTexture",void 0),(0,i.Cg)([(0,r.ru)("_markAllSubMeshesAsTexturesDirty","baseColor")],v.prototype,"_baseColor",void 0),(0,i.Cg)([(0,r.ru)("_markAllSubMeshesAsTexturesDirty","baseColorTexture")],v.prototype,"_baseColorTexture",void 0),(0,i.Cg)([(0,r.ru)("_markAllSubMeshesAsTexturesDirty","baseDiffuseRoughness")],v.prototype,"_baseDiffuseRoughness",void 0),(0,i.Cg)([(0,r.ru)("_markAllSubMeshesAsTexturesDirty","baseDiffuseRoughnessTexture")],v.prototype,"_baseDiffuseRoughnessTexture",void 0),(0,i.Cg)([(0,r.ru)("_markAllSubMeshesAsTexturesDirty","baseMetalness")],v.prototype,"_baseMetalness",void 0),(0,i.Cg)([(0,r.ru)("_markAllSubMeshesAsTexturesDirty","baseMetalnessTexture")],v.prototype,"_baseMetalnessTexture",void 0),(0,i.Cg)([(0,r.ru)("_markAllSubMeshesAsTexturesDirty","specularWeight")],v.prototype,"_specularWeight",void 0),(0,i.Cg)([(0,r.ru)("_markAllSubMeshesAsTexturesDirty","specularWeightTexture")],v.prototype,"_specularWeightTexture",void 0),(0,i.Cg)([(0,r.ru)("_markAllSubMeshesAsTexturesDirty","specularColor")],v.prototype,"_specularColor",void 0),(0,i.Cg)([(0,r.ru)("_markAllSubMeshesAsTexturesDirty","specularColorTexture")],v.prototype,"_specularColorTexture",void 0),(0,i.Cg)([(0,r.ru)("_markAllSubMeshesAsTexturesDirty","specularRoughness")],v.prototype,"_specularRoughness",void 0),(0,i.Cg)([(0,r.ru)("_markAllSubMeshesAsTexturesDirty","specularRoughnessTexture")],v.prototype,"_specularRoughnessTexture",void 0),(0,i.Cg)([(0,r.ru)("_markAllSubMeshesAsTexturesDirty","specularRoughnessAnisotropy")],v.prototype,"_specularRoughnessAnisotropy",void 0),(0,i.Cg)([(0,r.ru)("_markAllSubMeshesAsTexturesDirty","specularRoughnessAnisotropyTexture")],v.prototype,"_specularRoughnessAnisotropyTexture",void 0),(0,i.Cg)([(0,r.ru)("_markAllSubMeshesAsTexturesDirty","specularIor")],v.prototype,"_specularIor",void 0),(0,i.Cg)([(0,r.ru)("_markAllSubMeshesAsTexturesDirty","coatWeight")],v.prototype,"_coatWeight",void 0),(0,i.Cg)([(0,r.ru)("_markAllSubMeshesAsTexturesDirty","coatWeightTexture")],v.prototype,"_coatWeightTexture",void 0),(0,i.Cg)([(0,r.ru)("_markAllSubMeshesAsTexturesDirty","coatColor")],v.prototype,"_coatColor",void 0),(0,i.Cg)([(0,r.ru)("_markAllSubMeshesAsTexturesDirty","coatColorTexture")],v.prototype,"_coatColorTexture",void 0),(0,i.Cg)([(0,r.ru)("_markAllSubMeshesAsTexturesDirty","coatRoughness")],v.prototype,"_coatRoughness",void 0),(0,i.Cg)([(0,r.ru)("_markAllSubMeshesAsTexturesDirty","coatRoughnessTexture")],v.prototype,"_coatRoughnessTexture",void 0),(0,i.Cg)([(0,r.ru)("_markAllSubMeshesAsTexturesDirty","coatRoughnessAnisotropy")],v.prototype,"_coatRoughnessAnisotropy",void 0),(0,i.Cg)([(0,r.ru)("_markAllSubMeshesAsTexturesDirty","coatRoughnessAnisotropyTexture")],v.prototype,"_coatRoughnessAnisotropyTexture",void 0),(0,i.Cg)([(0,r.ru)("_markAllSubMeshesAsTexturesDirty","coatIor")],v.prototype,"_coatIor",void 0),(0,i.Cg)([(0,r.ru)("_markAllSubMeshesAsTexturesDirty","coatDarkening")],v.prototype,"_coatDarkening",void 0),(0,i.Cg)([(0,r.ru)("_markAllSubMeshesAsTexturesDirty","coatDarkeningTexture")],v.prototype,"_coatDarkeningTexture",void 0),(0,i.Cg)([(0,r.ru)("_markAllSubMeshesAsTexturesDirty","geometryNormalTexture")],v.prototype,"_geometryNormalTexture",void 0),(0,i.Cg)([(0,r.ru)("_markAllSubMeshesAsTexturesDirty","geometryTangent")],v.prototype,"_geometryTangent",void 0),(0,i.Cg)([(0,r.ru)("_markAllSubMeshesAsTexturesDirty","geometryTangentTexture")],v.prototype,"_geometryTangentTexture",void 0),(0,i.Cg)([(0,r.ru)("_markAllSubMeshesAsTexturesDirty","geometryCoatNormalTexture")],v.prototype,"_geometryCoatNormalTexture",void 0),(0,i.Cg)([(0,r.ru)("_markAllSubMeshesAsTexturesDirty","geometryCoatTangent")],v.prototype,"_geometryCoatTangent",void 0),(0,i.Cg)([(0,r.ru)("_markAllSubMeshesAsTexturesDirty","geometryCoatTangentTexture")],v.prototype,"_geometryCoatTangentTexture",void 0),(0,i.Cg)([(0,r.ru)("_markAllSubMeshesAsTexturesDirty","geometryOpacity")],v.prototype,"_geometryOpacity",void 0),(0,i.Cg)([(0,r.ru)("_markAllSubMeshesAsTexturesDirty","geometryOpacityTexture")],v.prototype,"_geometryOpacityTexture",void 0),(0,i.Cg)([(0,r.ru)("_markAllSubMeshesAsTexturesDirty","emissionLuminance")],v.prototype,"_emissionLuminance",void 0),(0,i.Cg)([(0,r.ru)("_markAllSubMeshesAsTexturesDirty","emissionColor")],v.prototype,"_emissionColor",void 0),(0,i.Cg)([(0,r.ru)("_markAllSubMeshesAsTexturesDirty","emissionColorTexture")],v.prototype,"_emissionColorTexture",void 0),(0,i.Cg)([(0,r.ru)("_markAllSubMeshesAsTexturesDirty","ambientOcclusionTexture")],v.prototype,"_ambientOcclusionTexture",void 0),(0,i.Cg)([(0,r.lK)(),(0,r.$z)("_markAllSubMeshesAsTexturesDirty")],v.prototype,"directIntensity",void 0),(0,i.Cg)([(0,r.lK)(),(0,r.$z)("_markAllSubMeshesAsTexturesDirty")],v.prototype,"environmentIntensity",void 0),(0,i.Cg)([(0,r.lK)(),(0,r.$z)("_markAllSubMeshesAsTexturesDirty")],v.prototype,"useSpecularWeightFromTextureAlpha",void 0),(0,i.Cg)([(0,r.lK)(),(0,r.$z)("_markAllSubMeshesAsTexturesAndMiscDirty")],v.prototype,"forceAlphaTest",void 0),(0,i.Cg)([(0,r.lK)(),(0,r.$z)("_markAllSubMeshesAsTexturesAndMiscDirty")],v.prototype,"alphaCutOff",void 0),(0,i.Cg)([(0,r.lK)(),(0,r.$z)("_markAllSubMeshesAsTexturesDirty")],v.prototype,"useAmbientOcclusionFromMetallicTextureRed",void 0),(0,i.Cg)([(0,r.lK)(),(0,r.$z)("_markAllSubMeshesAsTexturesDirty")],v.prototype,"useAmbientInGrayScale",void 0),(0,i.Cg)([(0,r.lK)()],v.prototype,"usePhysicalLightFalloff",null),(0,i.Cg)([(0,r.lK)()],v.prototype,"useGLTFLightFalloff",null),(0,i.Cg)([(0,r.lK)(),(0,r.$z)("_markAllSubMeshesAsTexturesDirty")],v.prototype,"useObjectSpaceNormalMap",void 0),(0,i.Cg)([(0,r.lK)(),(0,r.$z)("_markAllSubMeshesAsTexturesDirty")],v.prototype,"useParallax",void 0),(0,i.Cg)([(0,r.lK)(),(0,r.$z)("_markAllSubMeshesAsTexturesDirty")],v.prototype,"useParallaxOcclusion",void 0),(0,i.Cg)([(0,r.lK)(),(0,r.$z)("_markAllSubMeshesAsTexturesDirty")],v.prototype,"parallaxScaleBias",void 0),(0,i.Cg)([(0,r.lK)(),(0,r.$z)("_markAllSubMeshesAsLightsDirty")],v.prototype,"disableLighting",void 0),(0,i.Cg)([(0,r.lK)(),(0,r.$z)("_markAllSubMeshesAsTexturesDirty")],v.prototype,"forceIrradianceInFragment",void 0),(0,i.Cg)([(0,r.lK)(),(0,r.$z)("_markAllSubMeshesAsLightsDirty")],v.prototype,"maxSimultaneousLights",void 0),(0,i.Cg)([(0,r.lK)(),(0,r.$z)("_markAllSubMeshesAsTexturesDirty")],v.prototype,"invertNormalMapX",void 0),(0,i.Cg)([(0,r.lK)(),(0,r.$z)("_markAllSubMeshesAsTexturesDirty")],v.prototype,"invertNormalMapY",void 0),(0,i.Cg)([(0,r.lK)(),(0,r.$z)("_markAllSubMeshesAsTexturesDirty")],v.prototype,"twoSidedLighting",void 0),(0,i.Cg)([(0,r.lK)(),(0,r.$z)("_markAllSubMeshesAsTexturesDirty")],v.prototype,"useAlphaFresnel",void 0),(0,i.Cg)([(0,r.lK)(),(0,r.$z)("_markAllSubMeshesAsTexturesDirty")],v.prototype,"useLinearAlphaFresnel",void 0),(0,i.Cg)([(0,r.$z)("_markAllSubMeshesAsTexturesDirty")],v.prototype,"environmentBRDFTexture",void 0),(0,i.Cg)([(0,r.lK)(),(0,r.$z)("_markAllSubMeshesAsTexturesDirty")],v.prototype,"forceNormalForward",void 0),(0,i.Cg)([(0,r.lK)(),(0,r.$z)("_markAllSubMeshesAsTexturesDirty")],v.prototype,"enableSpecularAntiAliasing",void 0),(0,i.Cg)([(0,r.lK)(),(0,r.$z)("_markAllSubMeshesAsTexturesDirty")],v.prototype,"useHorizonOcclusion",void 0),(0,i.Cg)([(0,r.lK)(),(0,r.$z)("_markAllSubMeshesAsTexturesDirty")],v.prototype,"useRadianceOcclusion",void 0),(0,i.Cg)([(0,r.lK)(),(0,r.$z)("_markAllSubMeshesAsMiscDirty")],v.prototype,"unlit",void 0),(0,i.Cg)([(0,r.lK)(),(0,r.$z)("_markAllSubMeshesAsMiscDirty")],v.prototype,"applyDecalMapAfterDetailMap",void 0),(0,i.Cg)([(0,r.$z)("_markAllSubMeshesAsMiscDirty")],v.prototype,"debugMode",void 0),(0,i.Cg)([(0,r.lK)()],v.prototype,"transparencyMode",null),(0,u.Y5)("BABYLON.OpenPBRMaterial",v)}}]);