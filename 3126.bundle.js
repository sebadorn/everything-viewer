"use strict";(self.webpackChunkeverything_viewer=self.webpackChunkeverything_viewer||[]).push([[3126],{3126:(e,s,t)=>{t.r(s),t.d(s,{EasingFunctionType:()=>a,FlowGraphEasingBlock:()=>c});var a,i=t(15321),n=t(71294),r=t(4720),u=t(56552);!function(e){e[e.CircleEase=0]="CircleEase",e[e.BackEase=1]="BackEase",e[e.BounceEase=2]="BounceEase",e[e.CubicEase=3]="CubicEase",e[e.ElasticEase=4]="ElasticEase",e[e.ExponentialEase=5]="ExponentialEase",e[e.PowerEase=6]="PowerEase",e[e.QuadraticEase=7]="QuadraticEase",e[e.QuarticEase=8]="QuarticEase",e[e.QuinticEase=9]="QuinticEase",e[e.SineEase=10]="SineEase",e[e.BezierCurveEase=11]="BezierCurveEase"}(a||(a={}));class c extends n.e{constructor(e){super(e),this.config=e,this._easingFunctions={},this.type=this.registerDataInput("type",r.Vv,11),this.mode=this.registerDataInput("mode",r.Es,0),this.parameters=this.registerDataInput("parameters",r.Vv,[1,0,0,1]),this.easingFunction=this.registerDataOutput("easingFunction",r.Vv)}_updateOutputs(e){const s=this.type.getValue(e),t=this.mode.getValue(e),a=this.parameters.getValue(e);if(void 0===s||void 0===t)return;const n=`${s}-${t}-${a.join("-")}`;if(!this._easingFunctions[n]){const e=function(e,...s){switch(e){case 11:return new i.Bv(...s);case 0:return new i.rm;case 1:return new i.kL(...s);case 2:return new i.ND(...s);case 3:return new i.vm;case 4:return new i._B(...s);case 5:return new i.E8(...s);default:throw new Error("Easing type not yet implemented")}}(s,...a);e.setEasingMode(t),this._easingFunctions[n]=e}this.easingFunction.setValue(this._easingFunctions[n],e)}getClassName(){return"FlowGraphEasingBlock"}}(0,u.Y5)("FlowGraphEasingBlock",c)}}]);