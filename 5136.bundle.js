"use strict";(self.webpackChunkeverything_viewer=self.webpackChunkeverything_viewer||[]).push([[5136],{29949:(e,t,r)=>{r.d(t,{AIParser:()=>i});var n=r(62845);const a={TypeUint8:0,TypeInt8:1,TypeUint16:2,TypeInt16:3,TypeUint32:4,TypeInt32:5,TypeFloat32:6,TypeBool:7,TypeString:8,TypeArray:9,TypeUint64:10,TypeInt64:11,TypeFloat64:12,toName(e){switch(e){case this.TypeUint8:return"Uint8";case this.TypeInt8:return"Int8";case this.TypeUint16:return"Uint16";case this.TypeInt16:return"Int16";case this.TypeUint32:return"Uint32";case this.TypeInt32:return"Int32";case this.TypeFloat32:return"Float32";case this.TypeBool:return"Bool";case this.TypeString:return"String";case this.TypeArray:return"Array";case this.TypeUint64:return"Uint64";case this.TypeInt64:return"Int64";case this.TypeFloat64:return"Float64";default:return String(e)}}},s={Type_F32:0,Type_F16:1,Type_Q4_0:2,Type_Q4_1:3,Type_Q4_2:4,Type_Q4_3:5,Type_Q5_0:6,Type_Q5_1:7,Type_Q8_0:8,Type_Q8_1:9,Type_Q2_K:10,Type_Q3_K:11,Type_Q4_K:12,Type_Q5_K:13,Type_Q6_K:14,Type_Q8_K:15,Type_IQ2_XXS:16,Type_IQ2_XS:17,Type_IQ3_XXS:18,Type_IQ1_S:19,Type_IQ4_NL:20,Type_IQ3_S:21,Type_IQ2_S:22,Type_IQ4_XS:23,Type_I8:24,Type_I16:25,Type_I32:26,Type_I64:27,Type_F64:28,Type_IQ1_M:29,Type_BF16:30,Type_Q4_0_4_4:31,Type_Q4_0_4_8:32,Type_Q4_0_8_8:33,Type_TQ1_0:34,Type_TQ2_0:35,Type_IQ4_NL_4_4:36,Type_IQ4_NL_4_8:37,Type_IQ4_NL_8_8:38,Type_MXFP4:39,Type_COUNT:40,toName(e){for(const t in this){const r=this[t];if("string"==typeof t&&"number"==typeof r&&r===e)return t.substring(5)}return String(e)}};class i extends n.V{constructor(e){super(e),this._textDecoder=new TextDecoder}_getRequiredSize(e,t,r){switch(r){case a.TypeUint8:case a.TypeInt8:case a.TypeBool:return 1;case a.TypeUint16:case a.TypeInt16:return 2;case a.TypeUint32:case a.TypeInt32:case a.TypeFloat32:return 4;case a.TypeString:return Number(e.getBigUint64(t,!0))+8;case a.TypeArray:{let r=12;const n=e.getUint32(t);t+=4;const a=Number(e.getBigUint64(t,!0));return t+=8,this._isTypeFixedSize(n)?r+64*a:r+this._getRequiredSize(e,t,n)*a}case a.TypeUint64:case a.TypeInt64:case a.TypeFloat64:return 8;default:return console.error("[AIParser._getRequiredSize] Unknown GGUFMetaDataValueType:",r),0}}_isTypeFixedSize(e){return![a.TypeArray,a.TypeString].includes(e)}_readArray(e,t){const r=e.getUint32(t,!0);t+=4;const n=Number(e.getBigUint64(t,!0));t+=8;const a=[];let s=0;for(let i=0;i<n;i++){const[n,i]=this._readValueMetaData(e,t+s,r);a.push(n),s+=i}return[a,12+s]}_readString(e,t){const r=Number(e.getBigUint64(t,!0));t+=8;return[this._textDecoder.decode(e.buffer.slice(t,t+r)),8+r]}_readValueMetaData(e,t,r){switch(r){case a.TypeUint8:return[e.getUint8(t),1];case a.TypeInt8:return[e.getInt8(t),1];case a.TypeUint16:return[e.getUint16(t,!0),2];case a.TypeInt16:return[e.getInt16(t,!0),2];case a.TypeUint32:return[e.getUint32(t,!0),4];case a.TypeInt32:return[e.getInt32(t,!0),4];case a.TypeFloat32:return[e.getFloat32(t,!0),4];case a.TypeBool:return[1===e.getUint8(t),1];case a.TypeString:return this._readString(e,t);case a.TypeArray:return this._readArray(e,t);case a.TypeUint64:return[e.getBigUint64(t,!0),8];case a.TypeInt64:return[e.getBigInt64(t,!0),8];case a.TypeFloat64:return[e.getFloat64(t,!0),8];default:return console.error("[AIParser._readValueMetaData] Unknown GGUFMetaDataValueType:",r),[null,0]}}async _parseGGUF(e){const t=e.getUint32(4,!0),r=Number(e.getBigUint64(8,!0)),n=Number(e.getBigUint64(16,!0));let a={},s=0;if(n>0){const e=await this._parseGGUFMetadata(n,24);a=e.data,s=e.sectionSize}let i={};if(r>0){i=(await this._parseGGUFTensors(r,24+s)).data}return{version:t,tensor_count:r,metadata_kv_count:n,metadata:a,tensors:i}}async _parseGGUFMetadata(e,t){const r={};let n=t+64*e,s=new DataView(await this.file.slice(t,n).arrayBuffer()),i=0,y=0;for(;y<e;){const[e,p]=this._readString(s,i);i+=p;const _=s.getUint32(i,!0);i+=4;const T=this._getRequiredSize(s,i,_)-(s.byteLength-i);if(T>0){console.warn(`[AIParser._parseGGUFMetadata] Need to read more of file, missing size of ${T}`);const e=n+T+1024;s=new DataView(await this.file.slice(t,e).arrayBuffer()),n=e}const[c,o]=this._readValueMetaData(s,i,_);i+=o,r[e]={type:a.toName(_),value:c},y++}return{data:r,sectionSize:i}}async _parseGGUFTensors(e,t){const r=[],n=112*e;let a=new DataView(await this.file.slice(t,t+n).arrayBuffer()),i=0,y=0;for(;y<e;){const[e,t]=this._readString(a,i);i+=t;const n=a.getUint32(i,!0);i+=4;const p=[];for(let e=0;e<n;e++)p.push(a.getBigUint64(i,!0)),i+=8;const _=a.getUint32(i,!0);i+=4;const T=a.getBigUint64(i,!0);i+=8,r.push({name:e,n_dimensions:n,dimensions:p,type:s.toName(_),offset:T}),y++}return{data:r,sectionSize:i}}async parse(){const e=new DataView(await this.file.slice(0,24).arrayBuffer()),t=this._textDecoder.decode(e.buffer.slice(0,4));let r={type:t};return"GGUF"===t&&(r=await this._parseGGUF(e),r.type??=t),console.debug("[AIParser.parse]",r),r}}}}]);