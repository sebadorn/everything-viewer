"use strict";(self.webpackChunkeverything_viewer=self.webpackChunkeverything_viewer||[]).push([[5136],{29949:(e,t,r)=>{r.d(t,{AIParser:()=>i});var a=r(62845);const n={TypeUint8:0,TypeInt8:1,TypeUint16:2,TypeInt16:3,TypeUint32:4,TypeInt32:5,TypeFloat32:6,TypeBool:7,TypeString:8,TypeArray:9,TypeUint64:10,TypeInt64:11,TypeFloat64:12,toName(e){switch(e){case this.TypeUint8:return"Uint8";case this.TypeInt8:return"Int8";case this.TypeUint16:return"Uint16";case this.TypeInt16:return"Int16";case this.TypeUint32:return"Uint32";case this.TypeInt32:return"Int32";case this.TypeFloat32:return"Float32";case this.TypeBool:return"Bool";case this.TypeString:return"String";case this.TypeArray:return"Array";case this.TypeUint64:return"Uint64";case this.TypeInt64:return"Int64";case this.TypeFloat64:return"Float64";default:return String(e)}}},s={Type_F32:0,Type_F16:1,Type_Q4_0:2,Type_Q4_1:3,Type_Q4_2:4,Type_Q4_3:5,Type_Q5_0:6,Type_Q5_1:7,Type_Q8_0:8,Type_Q8_1:9,Type_Q2_K:10,Type_Q3_K:11,Type_Q4_K:12,Type_Q5_K:13,Type_Q6_K:14,Type_Q8_K:15,Type_IQ2_XXS:16,Type_IQ2_XS:17,Type_IQ3_XXS:18,Type_IQ1_S:19,Type_IQ4_NL:20,Type_IQ3_S:21,Type_IQ2_S:22,Type_IQ4_XS:23,Type_I8:24,Type_I16:25,Type_I32:26,Type_I64:27,Type_F64:28,Type_IQ1_M:29,Type_BF16:30,Type_Q4_0_4_4:31,Type_Q4_0_4_8:32,Type_Q4_0_8_8:33,Type_TQ1_0:34,Type_TQ2_0:35,Type_IQ4_NL_4_4:36,Type_IQ4_NL_4_8:37,Type_IQ4_NL_8_8:38,Type_MXFP4:39,Type_COUNT:40,toName(e){for(const t in this){const r=this[t];if("string"==typeof t&&"number"==typeof r&&r===e)return t.substring(5)}return String(e)}};class i extends a.V{constructor(e){super(e),this._textDecoder=new TextDecoder}_getRequiredSize(e,t,r){switch(r){case n.TypeUint8:case n.TypeInt8:case n.TypeBool:return 1;case n.TypeUint16:case n.TypeInt16:return 2;case n.TypeUint32:case n.TypeInt32:case n.TypeFloat32:return 4;case n.TypeString:return Number(e.getBigUint64(t,!0))+8;case n.TypeArray:{let r=12;const a=e.getUint32(t);t+=4;const n=Number(e.getBigUint64(t,!0));return t+=8,this._isTypeFixedSize(a)?r+64*n:r+this._getRequiredSize(e,t,a)*n}case n.TypeUint64:case n.TypeInt64:case n.TypeFloat64:return 8;default:return console.error("[AIParser._getRequiredSize] Unknown GGUFMetaDataValueType:",r),0}}_isTypeFixedSize(e){return![n.TypeArray,n.TypeString].includes(e)}_readArray(e,t){const r=e.getUint32(t,!0);t+=4;const a=Number(e.getBigUint64(t,!0));t+=8;const n=[];let s=0;for(let i=0;i<a;i++){const[a,i]=this._readValueMetaData(e,t+s,r);n.push(a),s+=i}return[n,12+s]}_readString(e,t){const r=Number(e.getBigUint64(t,!0));t+=8;return[this._textDecoder.decode(e.buffer.slice(t,t+r)),8+r]}_readValueMetaData(e,t,r){switch(r){case n.TypeUint8:return[e.getUint8(t),1];case n.TypeInt8:return[e.getInt8(t),1];case n.TypeUint16:return[e.getUint16(t,!0),2];case n.TypeInt16:return[e.getInt16(t,!0),2];case n.TypeUint32:return[e.getUint32(t,!0),4];case n.TypeInt32:return[e.getInt32(t,!0),4];case n.TypeFloat32:return[e.getFloat32(t,!0),4];case n.TypeBool:return[1===e.getUint8(t),1];case n.TypeString:return this._readString(e,t);case n.TypeArray:return this._readArray(e,t);case n.TypeUint64:return[e.getBigUint64(t,!0),8];case n.TypeInt64:return[e.getBigInt64(t,!0),8];case n.TypeFloat64:return[e.getFloat64(t,!0),8];default:return console.error("[AIParser._readValueMetaData] Unknown GGUFMetaDataValueType:",r),[null,0]}}async _parseGGUF(e){const t=e.getUint32(4,!0),r=Number(e.getBigUint64(8,!0)),a=Number(e.getBigUint64(16,!0));let n={},s=0;if(a>0){const e=await this._parseGGUFMetadata(a,24);n=e.data,s=e.sectionSize}let i={};if(r>0){i=(await this._parseGGUFTensors(r,24+s)).data}return{version:t,tensor_count:r,metadata_kv_count:a,metadata:n,tensors:i}}async _parseGGUFMetadata(e,t){const r={};let a=t+64*e,s=new DataView(await this.file.slice(t,a).arrayBuffer()),i=0,p=0;for(;p<e;){const[e,_]=this._readString(s,i);i+=_;const y=s.getUint32(i,!0);i+=4;const o=this._getRequiredSize(s,i,y)-(s.byteLength-i);if(o>0){console.warn(`[AIParser._parseGGUFMetadata] Need to read more of file, missing size of ${o}`);const e=a+o+1024;s=new DataView(await this.file.slice(t,e).arrayBuffer()),a=e}const[c,T]=this._readValueMetaData(s,i,y);i+=T,r[e]={type:n.toName(y),value:c},p++}return{data:r,sectionSize:i}}async _parseGGUFTensors(e,t){const r=[],a=112*e;let n=new DataView(await this.file.slice(t,t+a).arrayBuffer()),i=0,p=0;for(;p<e;){const[e,t]=this._readString(n,i);i+=t;const a=n.getUint32(i,!0);i+=4;const _=[];for(let e=0;e<a;e++)_.push(n.getBigUint64(i,!0)),i+=8;const y=n.getUint32(i,!0);i+=4;const o=n.getBigUint64(i,!0);i+=8,r.push({name:e,n_dimensions:a,dimensions:_,type:s.toName(y),offset:o}),p++}return{data:r,sectionSize:i}}_parseSafetensors(e){const t={};try{const r=this._textDecoder.decode(e.buffer.slice()),a=JSON.parse(r);a.__metadata__&&(t.metadata=a.__metadata__,delete a.__metadata__),t.tensors=a}catch(e){console.error("[AI._parseSafetensors]",e)}return t}async parse(){let e={};if("application/x-safetensors"===this.mimeType){const t=new DataView(await this.file.slice(0,8).arrayBuffer()).getBigUint64(0,!0),r=new DataView(await this.file.slice(8,Number(t)+8).arrayBuffer());e=this._parseSafetensors(r),e.type??="Safetensors",console.debug("[AIParser.parse] Safetensors",e)}else if("application/x-gguf"===this.mimeType){const t=new DataView(await this.file.slice(0,24).arrayBuffer()),r=this._textDecoder.decode(t.buffer.slice(0,4));e.type=r,"GGUF"===r&&(e=await this._parseGGUF(t),e.type??=r),console.debug("[AIParser.parse] GGUF",e)}return e}}}}]);