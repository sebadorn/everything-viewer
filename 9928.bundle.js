"use strict";(self.webpackChunkeverything_viewer=self.webpackChunkeverything_viewer||[]).push([[9928],{89928:(e,n,a)=>{a.r(n),a.d(n,{Dispose:()=>u,DumpData:()=>d,DumpDataAsync:()=>l,DumpFramebuffer:()=>c,DumpTools:()=>f});var r=a(84255),s=a(998),t=a(84867),i=a(6315);let p,o=null;async function c(e,n,a,r,s="image/png",t,i){const p=await a.readPixels(0,0,e,n);d(e,n,new Uint8Array(p.buffer),r,s,t,!0,void 0,i)}function l(e,n,a,r="image/png",s,t=!1,i=!1,p){return new Promise((o=>{d(e,n,a,(e=>o(e)),r,s,t,i,p)}))}function d(e,n,c,l,d="image/png",f,m=!1,h=!1,g){(async function(){return o||(o=new Promise(((e,n)=>{let s,t=null;const o={preserveDrawingBuffer:!0,depth:!1,stencil:!1,alpha:!0,premultipliedAlpha:!1,antialias:!1,failIfMajorPerformanceCaveat:!1};Promise.resolve().then(a.bind(a,86514)).then((({ThinEngine:c})=>{const l=i.q.Instances.length;try{s=new OffscreenCanvas(100,100),t=new c(s,!1,o)}catch(e){l<i.q.Instances.length&&i.q.Instances.pop()?.dispose(),s=document.createElement("canvas"),t=new c(s,!1,o)}i.q.Instances.pop(),i.q.OnEnginesDisposedObservable.add((e=>{t&&e!==t&&!t.isDisposed&&0===i.q.Instances.length&&u()})),t.getCaps().parallelShaderCompile=void 0;const d=new r.J(t);a.e(9820).then(a.bind(a,79820)).then((({passPixelShader:a})=>{if(!t)return void n("Engine is not defined");const i=new r.$({engine:t,name:a.name,fragmentShader:a.shader,samplerNames:["textureSampler"]});p={canvas:s,engine:t,renderer:d,wrapper:i},e(p)}))})).catch(n)}))),await o})().then((a=>{if(a.engine.setSize(e,n,!0),c instanceof Float32Array){const e=new Uint8Array(c.length);let n=c.length;for(;n--;){const a=c[n];e[n]=Math.round(255*(0,t.Clamp)(a))}c=e}const r=a.engine.createRawTexture(c,e,n,5,!1,!m,1);a.renderer.setViewport(),a.renderer.applyEffectWrapper(a.wrapper),a.wrapper.effect._bindTexture("textureSampler",r),a.renderer.draw(),h?s.S0.ToBlob(a.canvas,(e=>{const n=new FileReader;n.onload=e=>{const n=e.target.result;l&&l(n)},n.readAsArrayBuffer(e)}),d,g):s.S0.EncodeScreenshotCanvasData(a.canvas,l,d,f,g),r.dispose()}))}function u(){p?(p.wrapper.dispose(),p.renderer.dispose(),p.engine.dispose()):o?.then((e=>{e.wrapper.dispose(),e.renderer.dispose(),e.engine.dispose()})),o=null,p=null}const f={DumpData:d,DumpDataAsync:l,DumpFramebuffer:c,Dispose:u};s.S0.DumpData=d,s.S0.DumpDataAsync=l,s.S0.DumpFramebuffer=c}}]);