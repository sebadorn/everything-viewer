"use strict";(self.webpackChunkeverything_viewer=self.webpackChunkeverything_viewer||[]).push([[5417],{52383:(e,n,r)=>{var t=r(69610);const a="kernelBlurVaryingDeclaration",s="varying sampleCoord{X}: vec2f;";t.l.IncludesShadersStoreWGSL[a]||(t.l.IncludesShadersStoreWGSL[a]=s)},85417:(e,n,r)=>{r.r(n),r.d(n,{kernelBlurVertexShaderWGSL:()=>i});var t=r(69610);r(52383);const a="kernelBlurVertex",s="vertexOutputs.sampleCoord{X}=vertexOutputs.sampleCenter+uniforms.delta*KERNEL_OFFSET{X};";t.l.IncludesShadersStoreWGSL[a]||(t.l.IncludesShadersStoreWGSL[a]=s);const l="kernelBlurVertexShader",u="attribute position: vec2f;uniform delta: vec2f;varying sampleCenter: vec2f;\n#include<kernelBlurVaryingDeclaration>[0..varyingCount]\n#define CUSTOM_VERTEX_DEFINITIONS\n@vertex\nfn main(input : VertexInputs)->FragmentInputs {const madd: vec2f= vec2f(0.5,0.5);\n#define CUSTOM_VERTEX_MAIN_BEGIN\nvertexOutputs.sampleCenter=(input.position*madd+madd);\n#include<kernelBlurVertex>[0..varyingCount]\nvertexOutputs.position= vec4f(input.position,0.0,1.0);\n#define CUSTOM_VERTEX_MAIN_END\n}";t.l.ShadersStoreWGSL[l]||(t.l.ShadersStoreWGSL[l]=u);const i={name:l,shader:u}}}]);