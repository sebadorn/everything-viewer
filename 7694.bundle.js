"use strict";(self.webpackChunkeverything_viewer=self.webpackChunkeverything_viewer||[]).push([[7694],{10167:(e,t,a)=>{a.d(t,{AIView:()=>l});var n=a(42109),s=a(15287);class l extends s.P{constructor(e){super(e,"ai")}_addRowIfExists(e,t,a,s){null!=t&&e.append(n.UI.buildTableRow(null,null,a,s,t))}_buildContent(e){const t=document.createElement("div");t.classList.add("header-info");const a=document.createElement("table");if(a.classList.add("header-general"),a.append(n.UI.buildTableHeaderRow("Name","Type","Value"),n.UI.buildTableRow(null,null,"type","String",e.type)),this._addRowIfExists(a,e.version,"type","String"),this._addRowIfExists(a,e.metadata_kv_count,"metadata_kv_count","Uint64"),this._addRowIfExists(a,e.tensor_count,"tensor_count","Uint64"),t.append(n.UI.build("<h3>General</h3>"),a),e.metadata){const a=document.createElement("table");if(a.classList.add("header-metadata"),"Safetensors"===e.type)for(const t in e.metadata){const s=e.metadata[t];a.append(n.UI.buildTableHeaderRow("Name","Value"),n.UI.buildTableRow(null,null,t,s))}else a.append(n.UI.buildTableHeaderRow("Name","Type","Value"),...this._buildMetadataRows(e.metadata));t.append(n.UI.build("<h3>Metadata</h3>"),a)}if(e.tensors){const a=document.createElement("table");a.classList.add("header-tensors"),a.append(n.UI.buildTableHeaderRow("Name","Dimensions","Type"),...this._buildTensorRows(e.tensors)),t.append(n.UI.build("<h3>Tensors</h3>"),a)}t.append(n.UI.build('<div class="clear"></div>')),this.nodeView.append(t)}_buildMetadataRows(e){const t=[];for(const a in e){const s=e[a],l=s.value;let d=s.type,i=l;if(Array.isArray(l)){const e=typeof l[0];d=`Array(${l.length})`;const t="string"===e,a=t?'", "':", ";i="[",l.length>30?(i+=t?'"':"",i+=l.slice(0,30).join(a),i+=t?'"':"",i+=", â€¦"):(i+=t?'"':"",i+=l.join(a),i+=t?'"':""),i+="]"}const o=n.UI.buildTableRow(null,null,a,d,i);o.classList.add(a.replaceAll(".","-")),t.push(o)}return t}_buildTensorRows(e){const t=[];if(Array.isArray(e))for(let a=0;a<e.length;a++){const s=e[a],l=n.UI.buildTableRow(null,null,s.name,"["+s.dimensions.join(", ")+"]",s.type);t.push(l)}else{const a=Object.keys(e);a.sort((e,t)=>e.localeCompare(t,void 0,{numeric:!0}));for(const s of a){const a=e[s],l=n.UI.buildTableRow(null,null,s,"["+a.shape.join(", ")+"]",a.dtype);t.push(l)}}return t}async load(){const e=await this.parser.parse();this.buildMetaNode(),this._buildContent(e),this._openWindow({height:800,width:Math.min(1e3,window.innerWidth)})}}}}]);