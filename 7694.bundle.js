"use strict";(self.webpackChunkeverything_viewer=self.webpackChunkeverything_viewer||[]).push([[7694],{10167:(e,t,n)=>{n.d(t,{AIView:()=>s});var a=n(42109),l=n(15287);class s extends l.P{constructor(e){super(e,"ai")}_buildContent(e){const t=document.createElement("table");t.classList.add("header-general"),t.append(a.UI.buildTableHeaderRow("Name","Type","Value"),a.UI.buildTableRow(null,null,"type","String",e.type),a.UI.buildTableRow(null,null,"version","Uint32",e.version),a.UI.buildTableRow(null,null,"metadata_kv_count","Uint64",e.metadata_kv_count),a.UI.buildTableRow(null,null,"tensor_count","Uint64",e.tensor_count));const n=document.createElement("table");n.classList.add("header-metadata"),n.append(a.UI.buildTableHeaderRow("Name","Type","Value"),...this._buildMetadataRows(e.metadata));const l=document.createElement("table");l.classList.add("header-tensors"),l.append(a.UI.buildTableHeaderRow("Name","Dimensions","Type"),...this._buildTensorRows(e.tensors));const s=document.createElement("div");s.classList.add("header-info"),s.append(a.UI.build("<h3>General</h3>"),t,a.UI.build("<h3>Metadata</h3>"),n,a.UI.build("<h3>Tensors</h3>"),l),this.nodeView.append(s)}_buildMetadataRows(e){const t=[];for(const n in e){const l=e[n],s=l.value;let i=l.type,d=s;if(Array.isArray(s)){const e=typeof s[0];i=`Array(${s.length})`;const t="string"===e,n=t?'", "':", ";d="[",s.length>30?(d+=t?'"':"",d+=s.slice(0,30).join(n),d+=t?'"':"",d+=", â€¦"):(d+=t?'"':"",d+=s.join(n),d+=t?'"':""),d+="]"}const o=a.UI.buildTableRow(null,null,n,i,d);o.classList.add(n.replaceAll(".","-")),t.push(o)}return t}_buildTensorRows(e){const t=[];for(let n=0;n<e.length;n++){const l=e[n],s=a.UI.buildTableRow(null,null,l.name,"["+l.dimensions.join(", ")+"]",l.type);t.push(s)}return t}async load(){const e=await this.parser.parse();this.buildMetaNode(),this._buildContent(e),this._openWindow({height:800,width:Math.min(1e3,window.innerWidth)})}}}}]);