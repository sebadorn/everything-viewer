"use strict";(self.webpackChunkeverything_viewer=self.webpackChunkeverything_viewer||[]).push([[3383],{58960:(e,s,t)=>{t.d(s,{MidiView:()=>c});var i=t(91625),n=t(42109),o=t(81094),a=t(19108);class r extends a.u{constructor(e){super(),this._config=e||{}}destroy(){this._node?.remove()}hide(){this._node.style.display="none"}moveTo(e,s){const t=this._node.getBoundingClientRect();this._node.style.left=Math.round(e-t.width/2)+"px",this._node.style.top=s-t.height+"px"}render(){return super.render(),this._node=n.UI.build('<div class="info-overlay"></div>'),"string"==typeof this._config?.classes&&this._node.classList.add(...this._config.classes.split(" ")),this._node}show(){this._node.style.display="block"}set value(e){this._node.textContent=e}}class l extends a.u{_currentValue=0;_innerBar=null;_overlay=null;_valueDisplay=null;constructor(e){super(),this._config=e,"number"!=typeof this._config.min&&(this._config.min=0),"number"!=typeof this._config.max&&(this._config.max=100),"boolean"!=typeof this._config.showValue&&(this._config.showValue=!0),"boolean"!=typeof this._config.canInteract&&(this._config.canInteract=!0),this._currentValue=this._config.initialValue??this._config.min}_absToRel(e){return(e-this._config.min)/(this._config.max-this._config.min)}_hideOverlayValue(){this._overlay?.hide(),this._barMarker.style.display="none"}_relToAbs(e){return this._config.min+e*(this._config.max-this._config.min)}_showOverlayValue(e){this._overlay||(this._overlay=new r,document.body.append(this._overlay.render()));const s=this._node.getBoundingClientRect(),t=e.offsetX/s.width,i=this._relToAbs(t);this._overlay.value=this._config.formatValue?.(i)??i,this._overlay.moveTo(e.clientX,s.top-4),this._overlay.show(),this._barMarker.style.display="block",this._barMarker.style.left=e.offsetX+"px"}destroy(){this._overlay?.destroy(),this._overlay=null,this._node?.remove()}render(){return super.render(),this._node=n.UI.build('<div class="linear-slider"></div>'),this._innerBar=n.UI.build('<div class="inner-bar"></div>'),this._barMarker=n.UI.build('<div class="bar-marker"></div>'),this._node.append(this._innerBar,this._barMarker),this._config.showValue&&(this._valueDisplay=n.UI.build('<div class="value-display"></div>'),this._node.append(this._valueDisplay)),"string"==typeof this._config.classes&&this._node.classList.add(...this._config.classes.split(" ")),this._config.canInteract&&(this._node.addEventListener("click",e=>{const s=this._node.getBoundingClientRect(),t=e.offsetX/s.width;this._config.onChange?.(t,this._relToAbs(t))}),this._node.classList.add("interactive")),this._node.addEventListener("mouseover",e=>this._showOverlayValue(e)),this._node.addEventListener("mousemove",e=>this._showOverlayValue(e)),this._node.addEventListener("mouseleave",e=>this._hideOverlayValue()),this.value=this._currentValue,this._node}get value(){return this._currentValue}set value(e){let s=Math.min(this._config.max,Math.max(this._config.min,e));isNaN(s)||(this._currentValue=s,this._innerBar.style.width=Math.round(100*this.valueProgress)+"%")}get valueProgress(){return this._absToRel(this._currentValue)}set valueProgress(e){e=Math.min(1,Math.max(0,e)),e=this._config.min+e*(this._config.max-this._config.min),this.value=e}}const h="playing",u="paused";class d extends a.u{_seekbar=null;_state=u;_volume=0;_volumeControl=null;constructor(e){super(),this._config=e||{},void 0===this._config.hasSeekbar&&(this._config.hasSeekbar=!0),void 0===this._config.hasVolume&&(this._config.hasVolume=!0)}_buildPlayPauseButton(){return new o.$({classes:"play-pause",icon:i.F.play,onClick:()=>{this._state===h?this._config.onPause():this._config.onPlay()}})}_buildSeekbar(){return new l({classes:"seekbar",max:this._config.duration,showValue:!1,formatValue:e=>n.UI.formatDuration(1e3*e,{formatWithColon:!0}),onChange:(e,s)=>{this._seekbar.value=s,this._config.onSeek?.(e,s)}})}_buildVolume(){return new l({classes:"volume",showValue:!1,formatValue:e=>Math.round(e)+"%",onChange:(e,s)=>{this._volumeControl.value=s,this._config.onVolume?.(e)}})}destroy(){this._seekbar?.destroy(),this._seekbar=null,this._volumeControl?.destroy(),this._volumeControl=null,this._node?.remove()}render(){super.render(),this._btnPlayPause=this._buildPlayPauseButton(),this._time=n.UI.build('<span class="time">00:00</span>');const e=n.UI.build('<div class="bottom-row"></div>');return e.append(this._btnPlayPause.render(),this._time),this._node=n.UI.build('<div class="player-controls"></div>'),this._config.hasSeekbar&&(this._seekbar=this._buildSeekbar(),this._node.append(this._seekbar.render())),this._config.hasVolume&&(this._volumeControl=this._buildVolume(),e.append(n.UI.build('<span class="icon volume">volume_up</span>'),this._volumeControl.render()),"number"==typeof this._config.volume&&(this.volume=this._config.volume)),this._node.append(e),this._node}get progress(){return this._seekbar?.valueProgress??0}set progress(e){this._seekbar&&(this._seekbar.valueProgress=e),this.time=e*this._config.duration}get progressInSeconds(){return this._seekbar?.value??0}set progressInSeconds(e){this._seekbar&&(this._seekbar.value=e),this.time=e}get state(){return this._state}set state(e){if(this._state===e)return;this._state=e;const s=e===h?i.F.pause:i.F.play;this._btnPlayPause?.update({icon:s})}set time(e){this._time.textContent=n.UI.formatDuration(1e3*e,{formatWithColon:!0})}get volume(){return this._volume}set volume(e){this._config.hasVolume&&(e=Number(e),isNaN(e)||(this._volume=Math.min(1,Math.max(0,e)),this._volumeControl&&(this._volumeControl.value=100*this._volume)))}}var _=t(15287);class c extends _.P{_scheduleId=null;Tone=null;synths=[];constructor(e){super(e,"midi")}_addMetaData(e){e.name&&this.mdAdd("Name",e.name),this.mdAdd("Tracks",e.tracks.length),this.mdAdd("Duration",n.UI.formatDuration(1e3*e.duration))}_buildPlayer(e){const s=this.Tone.getTransport();s.loop=!1;const t=this.Tone.getDestination();t.volume.value=this.Tone.gainToDb(.3),this._player=new d({duration:e.duration,volume:this.Tone.dbToGain(t.volume.value),onPause:()=>this.pause(),onPlay:()=>this.play(),onSeek:(e,t)=>s.seconds=t,onVolume:e=>t.volume.value=this.Tone.gainToDb(e)}),s.on("start",()=>this._player.state=h),s.on("pause",()=>this._player.state=u),s.on("stop",()=>this._player.state=u),this._scheduleId=s.scheduleRepeat(t=>{this._player.progressInSeconds=Math.min(e.duration,s.seconds),s.seconds>e.duration&&this.stop()},.5,0,e.duration+1);const i=n.UI.build('<div class="midi-player"></div>');i.append(this._player.render()),this.nodeView.append(i)}destroy(){const e=this.Tone.getTransport();for(e.stop(),e.clear(this._scheduleId);this.synths.length>0;){const e=this.synths.shift();e.releaseAll(),e.dispose()}e.off("start"),e.off("pause"),e.off("stop"),e.position=0,e.cancel(),this.Tone.setContext(new this.Tone.Context,!0),this._player?.destroy(),super.destroy()}async load(){const e=await this.parser.parse();this.Tone=e.Tone,this.synths=e.synths,this._addMetaData(e.midiData),this.buildMetaNode(),this._buildPlayer(e.midiData),this._openWindow()}pause(){this.Tone.getTransport().pause()}play(){0!==this.synths.length&&this.Tone.getTransport().start()}stop(){this.Tone.getTransport().stop()}}}}]);