"use strict";(self.webpackChunkeverything_viewer=self.webpackChunkeverything_viewer||[]).push([[910,4256],{60531:(e,t,a)=>{a.d(t,{DICOMParser:()=>s});var i=a(62845),n=a(92507);class s extends i.V{static numInstances=0;constructor(e){super(e,!!e.dir),this.file=e.dir||e.file,e.fileList&&(this.entries=e.fileList),this._fileManagerIds=[],s.numInstances++}async _loadFromDicomdirFile(e){const t=await e.arrayBuffer(),i=(await Promise.all([a.e(5915),a.e(4995)]).then(a.t.bind(a,35915,23))).parseDicom(new Uint8Array(t),{TransferSyntaxUID:"1.2.840.10008.1.2"}).elements.x00041220;return i&&Array.isArray(i.items)||console.error("[DICOMParser._parseHandlerDir] Record is either not set or has no entries.",i),i}async _parseHandlerDir(){const e=this.entries,t=e.find(e=>e.isFile&&"dicomdir"===e.name.toLowerCase());return t?new Promise((e,a)=>{t.file(async t=>{const a=await this._loadFromDicomdirFile(t);e(a)},e=>{console.error("[DICOMParser._parseHandlerDir]",e),a(e)})}):e}async addAndLoadFile(e){const t=this.wadouri.fileManager.add(e);return this._fileManagerIds.push(t),await this.wadouri.loadImage(t).promise}destroy(){if(1===s.numInstances){console.log("[DICOMParser.destroy] Purging cornerstone caches.");try{0===n.NIFTIParser.numInstances&&this.cache.purgeCache(),this.wadouri.dataSetCacheManager.purge(),this.wadouri.fileManager.purge()}catch(e){console.error("[DICOMParser.destroy]",e)}}s.numInstances--}static getModalityName(e){if(!e)return e;e=String(e).toUpperCase();let t=s.MODALITY_MAP[e];return t&&(t+=` [${e}]`),t||e}static getPregnancyStatus(e){if(isNaN(Number(e)))return e;return["not pregnant","possibly pregnant","definitely pregnant","unknown"][(e=Number(e))+1]||e}getFilepathsFromRecord(e){const t=[];return e.items.forEach(e=>{let a=e.dataSet.string("x00041500");a&&(a=a.replace(/\\/g,"/"),t.push(a))}),t}loadDICOMDIRFiles(e,t){const a=[];if(Array.isArray(e)){const i=n=>{if(n>=e.length)return void t(null,a);e[n].file(async e=>{const t=await this.addAndLoadFile(e);a.push(t),i(n+1)})};i(0)}else{const i=this.getFilepathsFromRecord(e),n=e=>{if(e>=i.length)return void t(null,a);const s=i[e];this.file.getFile(s,{},t=>{t.file(async t=>{const i=await this.addAndLoadFile(t);a.push(i),n(e+1)})},t=>{console.error(`[DICOMParser.loadDICOMDIRFiles] getFile "${s}": `+t.message),n(e+1)})};n(0)}}async parse(){const e=await Promise.all([a.e(764),a.e(2388),a.e(3537),a.e(8483)]).then(a.bind(a,63537)),t=await Promise.all([a.e(764),a.e(1612),a.e(2388),a.e(5915),a.e(8728),a.e(8146)]).then(a.bind(a,88728));if(e.init(),t.init(),this.cache=e.cache,this.wadouri=t.wadouri,this.isDir)return await this._parseHandlerDir();if("dicomdir"===this.file.name.toLowerCase()){const e=await this._loadFromDicomdirFile(this.file);return this.getFilepathsFromRecord(e)}return await this.addAndLoadFile(this.file)}}s.MODALITY_MAP={AR:"Autorefraction",AS:"Angioscopy",ASMT:"Content Assessment Results",AU:"Audio",BDUS:"Bone Densitometry (ultrasound)",BI:"Biomagnetic imaging",BMD:"Bone Densitometry (X-Ray)",CD:"Color flow Doppler",CF:"Cinefluorography",CP:"Colposcopy",CR:"Computed Radiography",CS:"Cystoscopy",CT:"Computed Tomography",DD:"Duplex Doppler",DF:"Digital fluoroscopy",DG:"Diaphanography",DM:"Digital microscopy",DOC:"Document",DS:"Digital Subtraction Angiography",DX:"Digital Radiography",EC:"Echocardiography",ECG:"Electrocardiography",EPS:"Cardiac Electrophysiology",ES:"Endoscopy",FA:"Fluorescein angiography",FID:"Fiducials",FS:"Fundoscopy",GM:"General Microscopy",HC:"Hard Copy",HD:"Hemodynamic Waveform",IO:"Intra-Oral Radiography",IOL:"Intraocular Lens Data",IVOCT:"Intravascular Optical Coherence Tomography",IVUS:"Intravascular Ultrasound",KER:"Keratometry",KO:"Key Object Selection",LEN:"Lensometry",LP:"Laparoscopy",LS:"Laser surface scan",MA:"Magnetic resonance angiography",MG:"Mammography",MR:"Magnetic Resonance",MS:"Magnetic resonance spectroscopy",NM:"Nuclear Medicine",OAM:"Ophthalmic Axial Measurements",OCT:"Optical Coherence Tomography (non-Ophthalmic)",OP:"Ophthalmic Photography",OPM:"Ophthalmic Mapping",OPR:"Ophthalmic Refraction",OPT:"Ophthalmic Tomography",OPV:"Ophthalmic Visual Field",OSS:"Optical Surface Scan",OT:"Other",PLAN:"Plan",PR:"Presentation State",PT:"Positron emission tomography (PET)",PX:"Panoramic X-Ray",REG:"Registration",RESP:"Respiratory Waveform",RF:"Radio Fluoroscopy",RG:"Radiographic imaging (conventional film/screen)",RTDOSE:"Radiotherapy Dose",RTIMAGE:"Radiotherapy Image",RTPLAN:"Radiotherapy Plan",RTRECORD:"RT Treatment Record",RTSTRUCT:"Radiotherapy Structure Set",RWV:"Real World Value Map",SEG:"Segmentation",SM:"Slide Microscopy",SMR:"Stereometric Relationship",SR:"SR Document",SRF:"Subjective Refraction",ST:"Single-photon emission computed tomography (SPECT)",STAIN:"Automated Slide Stainer",TG:"Thermography",US:"Ultrasound",VA:"Visual Acuity",VF:"Videofluorography",XA:"X-Ray Angiography",XC:"External-camera Photography"}},73265:(e,t,a)=>{a.d(t,{DICOMView:()=>l});var i=a(81094),n=a(91625),s=a(42109),r=a(15287),o=a(60531);class l extends r.P{constructor(e){super(e,"dicom"),this._frameDelay=250,this._frameIndex=0,this._frameTime=33.333,this._listenerKeyNav=null,this._metaGroups=null,this._timer=0}_addMetaInfo(e){const t=!this._metaGroups;this._metaGroups=this._metaGroups||{};["patient","patientStudy","generalStudy","generalSeries","generalImage","generalEquipment"].forEach(e=>{this._metaGroups[e]=this._metaGroups[e]||[],this._metaGroups[e].length=0}),this._metaGroups.patient.push({name:"Patient ID",value:e.string("x00100020")},{name:"Issuer of Patient ID",value:e.string("x00100021")},{name:"Type of Patient ID",value:e.string("x00100022")},{hr:1},{name:"Patient Name",value:e.string("x00100010")},{name:"Other Patient Names",value:e.string("x00101001")},{name:"Patient Birth Date",value:e.string("x00100030")},{name:"Patient Birth Time",value:e.string("x00100032")},{name:"Patient Sex",value:e.string("x00100040")},{name:"Ethnic Group",value:e.string("x00102160")},{name:"Patient Breed Desc.",value:e.string("x00102292")},{name:"Patient Species Desc.",value:e.string("x00102201")},{name:"Patient Comments",value:e.string("x00104000")},{name:"Strain Desc.",value:e.string("x00100212")},{name:"Strain Nomenclature",value:e.string("x00100213")},{name:"Strain Addit. Info.",value:e.string("x00100218")},{hr:1},{name:"Responsible Person",value:e.string("x00102297")},{name:"Resp. Person Role",value:e.string("x00102298")},{name:"Resp. Organization",value:e.string("x00102299")}),this._metaGroups.patientStudy.push({name:"Admitting Diagnoses Desc.",value:e.string("x00081080")},{name:"Patient's Age (years)",value:e.string("x00101010")},{name:"Patient's Size (m)",value:e.string("x00101020")},{name:"Patient's BMI",value:e.string("x00101022")},{name:"Measured AP Dimension (mm)",value:e.string("x00101023")},{name:"Measured Lateral Dimension (mm)",value:e.string("x00101024")},{name:"Patient's Weight (kg)",value:e.string("x00101030")},{name:"Medical Alerts",value:e.string("x00102000")},{name:"Allergies",value:e.string("x00102110")},{name:"Occupation",value:e.string("x00102180")},{name:"Smoking Status",value:e.string("x001021a0")},{name:"Addit. Patient History",value:e.string("x001021b0")},{name:"Pregnancy Status",value:o.DICOMParser.getPregnancyStatus(e.string("x001021c0"))},{name:"Last Menstrual Date",value:e.string("x001021d0")},{name:"Patient's Sex Neutered",value:e.string("x00102203")},{name:"Reason for Visit",value:e.string("x00321066")},{name:"Admission ID",value:e.string("x00380010")},{name:"Service Episode ID",value:e.string("x00380060")},{name:"Service Episode Desc.",value:e.string("x00380062")},{name:"Patient State",value:e.string("x00380500")}),this._metaGroups.generalStudy.push({name:"Study Date",value:e.string("x00080020")},{name:"Study Time",value:e.string("x00080030")},{name:"Accession Number",value:e.string("x00080050")},{name:"Referring Physician Name",value:e.string("x00080090")},{name:"Consulting Physician's Name",value:e.string("x0008109c")},{name:"Study Desc.",value:e.string("x00081030")},{name:"Physician(s) of Record",value:e.string("x00081048")},{name:"Physician(s) Reading Study",value:e.string("x00081060")},{name:"Study ID",value:e.string("x00200010")},{name:"Requesting Service",value:e.string("x00321033")}),this._metaGroups.generalSeries.push({name:"Series Date",value:e.string("x00080021")},{name:"Series Time",value:e.string("x00080031")},{name:"Modality",value:o.DICOMParser.getModalityName(e.string("x00080060"))},{name:"Series Desc.",value:e.string("x0008103e")},{name:"Performing Physician's Name",value:e.string("x00081050")},{name:"Operator's Name",value:e.string("x00081070")},{name:"Anatomical Orientation Type",value:e.string("x00102210")},{name:"Body Part Examined",value:e.string("x00180015")},{name:"Protocol Name",value:e.string("x00181030")},{name:"Patient Position",value:e.string("x00185100")},{name:"Series Number",value:e.string("x00200011")},{name:"Laterality",value:e.string("x00200060")},{name:"Performed Procedure Step Desc.",value:e.string("x00400254")},{name:"Comments on the Procedure Step",value:e.string("x00400280")}),this._metaGroups.generalImage.push({name:"Image Type",value:e.string("x00080008")},{name:"Patient Orientation",value:e.string("x00200020")},{name:"Image Laterality",value:e.string("x00200062")},{name:"Image Comments",value:e.string("x00204000")}),this._metaGroups.generalEquipment.push({name:"Manufacturer",value:e.string("x00080070")},{name:"Institution Name",value:e.string("x00080080")},{name:"Institution Address",value:e.string("x00080081")},{name:"Station Name",value:e.string("x00081010")},{name:"Institutional Department Name",value:e.string("x00081040")},{name:"Manufacturer's Model Name",value:e.string("x00081090")},{name:"Device Serial Number",value:e.string("x00181000")},{name:"Device UID",value:e.string("x00181002")},{name:"Gantry ID",value:e.string("x00181008")},{name:"Software Versions",value:e.string("x00181020")},{name:"Spatial Resolution",value:e.string("x00181050")},{name:"Date of Last Calibration",value:e.string("x00181200")},{name:"Time of Last Calibration",value:e.string("x00181201")}),t&&(this.mdAddGroup("Patient",this._metaGroups.patient),this.mdAddGroup("Patient Study",this._metaGroups.patientStudy),this.mdAddGroup("General Study",this._metaGroups.generalStudy),this.mdAddGroup("General Series",this._metaGroups.generalSeries),this.mdAddGroup("General Image",this._metaGroups.generalImage),this.mdAddGroup("General Equipment",this._metaGroups.generalEquipment))}_buildControls(){const e=s.UI.build(`\n\t\t\t<div class="image-container"></div>\n\t\t\t<div class="actions">\n\t\t\t\t<input type="range" min="1" max="${this._numFrames}" value="1" />\n\t\t\t\t<div class="line">\n\t\t\t\t\t<div class="wrap wrap-frame-controls"></div>\n\t\t\t\t\t<div class="wrap wrap-playback">\n\t\t\t\t\t\t<select class="speed">\n\t\t\t\t\t\t\t<option value="${this._frameTime}">Default: ${this._frameTime} ms</option>\n\t\t\t\t\t\t\t<option value="16.7">16.7 ms</option>\n\t\t\t\t\t\t\t<option value="33.3">33.3 ms</option>\n\t\t\t\t\t\t\t<option value="66.7">66.7 ms</option>\n\t\t\t\t\t\t\t<option value="133.3">133.3 ms</option>\n\t\t\t\t\t\t</select>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t`),t=new i.$({classes:"frame-prev",icon:n.F.arrow_prev}),a=new i.$({classes:"frame-next",icon:n.F.arrow_next}),r=new i.$({classes:"play-pause",icon:n.F.play});if(e.querySelector(".wrap-frame-controls").append(t.render(),s.UI.build('<span class="counter"></span>'),a.render()),e.querySelector(".wrap-playback").append(r.render()),this._frameIndex=0,this._numFrames<=2)e.querySelector(".actions").remove();else{const i=e.querySelector('input[type="range"]');i.addEventListener("change",e=>{this._frameIndex=e.target.valueAsNumber-1,this._controlGoto(this._frameIndex)}),t.on("click",e=>{this._controlGoto(--this._frameIndex),i.value=this._frameIndex+1}),a.on("click",e=>{this._controlGoto(++this._frameIndex),i.value=this._frameIndex+1});const s=e.querySelector("select.speed");s.addEventListener("change",e=>{this._frameTime=Number(s.value)}),r.on("click",e=>{this._timer?(r.update({icon:n.F.play}),clearTimeout(this._timer),this._timer=0,this._updateMeta()):(r.update({icon:n.F.pause}),this._playback(i))}),this._listenerKeyNav=e=>{const t=document.activeElement;t&&"range"===t.type||("ArrowLeft"===e.key?(this._controlGoto(--this._frameIndex),i.value=this._frameIndex+1):"ArrowRight"===e.key&&(this._controlGoto(++this._frameIndex),i.value=this._frameIndex+1))},document.body.addEventListener("keyup",this._listenerKeyNav),this._counter=e.querySelector(".counter")}this.nodeView.append(e)}_buildDICOMDIRFileList(e){const t=document.createElement("ol");e.forEach(e=>{const a=document.createElement("li");a.textContent=e,t.append(a)});const a=document.createElement("wrap");a.className="dicomdir-list",a.append(t),this.nodeView.append(a)}_controlGoto(e,t=!0){this._frameIndex=this.showImage(e,t),this._counter&&(this._counter.textContent=this._frameIndex+1+"/"+this._numFrames)}_handleResize(){}async _initViewport(){const{Enums:e,RenderingEngine:t}=await Promise.all([a.e(764),a.e(2388),a.e(3537),a.e(8483)]).then(a.bind(a,63537)),i=this.nodeView.querySelector(".image-container");this._renderingEngine=new t,this._renderingEngine.enableElement({viewportId:"ctStack",type:e.ViewportType.STACK,element:i,defaultOptions:{orientation:e.OrientationAxis.AXIAL}}),this._viewport=this._renderingEngine.getViewport("ctStack")}_playback(e){if(this._timer)return;const t=0===this._frameIndex?this._frameDelay:0;this._timer=setTimeout(()=>{this._controlGoto(++this._frameIndex,!1),e.value=this._frameIndex+1,this._timer=0,this._playback(e)},this._frameTime+t)}_updateMeta(){this._images?.length&&(clearTimeout(this._metaUpdateTimeout),this._metaUpdateTimeout=setTimeout(()=>{const e=this._images[this._frameIndex]?.data;e&&(this._addMetaInfo(e),this.buildMetaNode({toggleForEmpty:!0}))},200))}destroy(){super.destroy(),clearTimeout(this._timer),this._renderingEngine?.destroy(),this._renderingEngine=null,this._viewport=null,this._images=null,this._imageId=null,document.body.removeEventListener("keyup",this._listenerKeyNav)}async load(){const e=await this.parser.parse();if(this.parser.isDir)this.parser.loadDICOMDIRFiles(e,async(e,t)=>{this._images=t,this._numFrames=this._images.length,this.buildMetaNode(),this._buildControls();this._openWindow().on("resized",()=>this._handleResize()),await this._initViewport(),this._viewport.setStack(this._images.map(e=>e.imageId)),this.showFile(0),this._controlGoto(0)});else if(Array.isArray(e))this._buildDICOMDIRFileList(e),this.buildMetaNode(),this._openWindow();else{const t=e.data;this._numFrames=Number(t.string("x00280008")||1),this._frameDelay=Number(t.string("x00181033")||this._frameDelay),this._frameTime=Number(t.string("x00181063")||this._frameTime),this._addMetaInfo(t),this.buildMetaNode({toggleForEmpty:!0}),this._buildControls();this._openWindow().on("resized",()=>this._handleResize()),this._imageId=e.imageId,await this._initViewport();let a=[];for(let e=0;e<this._numFrames;e++){let t=e>0?this._imageId+"?frame="+e:this._imageId;a.push(t)}this._viewport.setStack(a),this._controlGoto(0)}}showFile(e){e>=this._images.length?e=0:e<0&&(e=this._images.length-1);const t=this._images[e],a=t.data;return this._frameDelay=Number(a.string("x00181033")||this._frameDelay),this._frameTime=Number(a.string("x00181063")||this._frameTime),this._addMetaInfo(a),this.buildMetaNode({toggleForEmpty:!0}),this._imageId=t.imageId,e}showImage(e,t=!0){return e>=this._numFrames?e=0:e<0&&(e=this._numFrames-1),this._viewport.setImageIdIndex(e),t&&this._updateMeta(),e}}},92507:(e,t,a)=>{a.d(t,{NIFTIParser:()=>s});var i=a(62845),n=a(60531);class s extends i.V{static numInstances=0;constructor(e){super(e,!!e.dir),this.file=e.dir||e.file,s.numInstances++}destroy(){if(URL.revokeObjectURL(this._objectURL),s.numInstances+n.DICOMParser.numInstances===1){console.log("[NIFTIParser.destroy] Purging cornerstone caches.");try{this.cache.purgeCache()}catch(e){console.error("[NIFTIParser.destroy]",e)}}s.numInstances--}async parse(){const e=await Promise.all([a.e(764),a.e(2388),a.e(3537),a.e(8483)]).then(a.bind(a,63537)),t=await Promise.all([a.e(764),a.e(5693)]).then(a.bind(a,59753));return e.init(),t.init(),e.imageLoader.registerImageLoader("nifti",t.cornerstoneNiftiImageLoader),this.cache=e.cache,this._objectURL=URL.createObjectURL(this.file),await t.createNiftiImageIdsAndCacheMetadata({url:this._objectURL})}}}}]);