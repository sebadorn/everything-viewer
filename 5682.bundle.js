"use strict";(self.webpackChunkeverything_viewer=self.webpackChunkeverything_viewer||[]).push([[5682],{15682:(e,a,r)=>{r.r(a),r.d(a,{FlowGraphSetVariableBlock:()=>l});var t=r(56552),i=r(33006),s=r(4720);class l extends i.w{constructor(e){if(super(e),!e.variable&&!e.variables)throw new Error("FlowGraphSetVariableBlock: variable/variables is not defined");if(e.variables&&e.variable)throw new Error("FlowGraphSetVariableBlock: variable and variables are both defined");if(e.variables)for(const a of e.variables)this.registerDataInput(a,s.Vv);else this.registerDataInput("value",s.Vv)}_execute(e,a){if(this.config?.variables)for(const a of this.config.variables)this._saveVariable(e,a);else this._saveVariable(e,this.config?.variable,"value");this.out._activateSignal(e)}_saveVariable(e,a,r){const t=e._getGlobalContextVariable("currentlyRunningAnimationGroups",[]);for(const r of t){const i=e.assetsContext.animationGroups[r];for(const s of i.targetedAnimations)if(s.target===e&&s.target===e&&s.animation.targetProperty===a){i.stop();const a=t.indexOf(r);a>-1&&t.splice(a,1),e._setGlobalContextVariable("currentlyRunningAnimationGroups",t);break}}const i=this.getDataInput(r||a)?.getValue(e);e.setVariable(a,i)}getClassName(){return"FlowGraphSetVariableBlock"}serialize(e){super.serialize(e),e.config.variable=this.config?.variable}}(0,t.Y5)("FlowGraphSetVariableBlock",l)}}]);